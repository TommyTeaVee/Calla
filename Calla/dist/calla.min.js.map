{"version":3,"file":"calla.min.js","sources":["../../Kudzu/typeChecks.ts","../audio/canChangeAudioOutput.ts","../../Kudzu/events/EventBase.ts","../../Kudzu/arrays/arrayRemoveAt.ts","../CallaEvents.ts","../ConnectionState.ts","../../Kudzu/arrays/arrayScan.ts","../tele/BaseTeleconferenceClient.ts","../audio/AudioActivityEvent.ts","../Calla.ts","../index.ts","../meta/BaseMetadataClient.ts","../../Kudzu/events/sleep.ts"],"sourcesContent":["function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n    return obj instanceof HTMLElement;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}","import { isFunction } from \"kudzu/typeChecks\";\r\n\r\n/**\r\n * Indicates whether or not the current browser can change the destination device for audio output.\r\n **/\r\nexport const canChangeAudioOutput = isFunction((HTMLAudioElement.prototype as any).setSinkId);","import { arrayRemoveAt } from \"../arrays/arrayRemoveAt\";\r\nimport { isFunction } from \"../typeChecks\";\r\n\r\nexport class EventBase implements EventTarget {\r\n    private listeners = new Map<string, Function[]>();\r\n    private listenerOptions = new Map<Function, AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<Function>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find(c => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: Function[], callback: Function) {\r\n        const idx = listeners.findIndex(c => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (options && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private mappedCallbacks = new Map<Function, (evt: Event) => any>();\r\n\r\n    addEventListener<K extends string & keyof EventsT>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: AddEventListenerOptions): void {\r\n        let mappedCallback = this.mappedCallbacks.get(callback);\r\n        if (mappedCallback == null) {\r\n            mappedCallback = (evt: Event) => callback(evt as TypedEvent<K> & EventsT[K]);\r\n            this.mappedCallbacks.set(callback, mappedCallback);\r\n        }\r\n\r\n        super.addEventListener(type, mappedCallback, options);\r\n    }\r\n\r\n    removeEventListener<K extends string & keyof EventsT>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        const mappedCallback = this.mappedCallbacks.get(callback);\r\n        if (mappedCallback) {\r\n            super.removeEventListener(type, mappedCallback);\r\n        }\r\n    }\r\n}","/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}","import { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport type { AudioActivityEvent } from \"./audio/AudioActivityEvent\";\r\nimport type { InterpolatedPose } from \"./audio/positions/InterpolatedPose\";\r\nimport { AudioStreamSource } from \"./audio/sources/AudioStreamSource\";\r\n\r\nexport type CallaTeleconferenceEventType = \"serverConnected\"\r\n    | \"serverDisconnected\"\r\n    | \"serverFailed\"\r\n    | \"conferenceConnected\"\r\n    | \"conferenceJoined\"\r\n    | \"conferenceFailed\"\r\n    | \"conferenceRestored\"\r\n    | \"conferenceLeft\"\r\n    | \"participantJoined\"\r\n    | \"participantLeft\"\r\n    | \"userNameChanged\"\r\n    | \"audioMuteStatusChanged\"\r\n    | \"videoMuteStatusChanged\"\r\n    | \"audioActivity\"\r\n    | \"audioAdded\"\r\n    | \"audioRemoved\"\r\n    | \"videoAdded\"\r\n    | \"videoRemoved\";\r\n\r\nexport type CallaMetadataEventType = \"userPosed\"\r\n    | \"userPointer\"\r\n    | \"setAvatarEmoji\"\r\n    | \"avatarChanged\"\r\n    | \"emote\"\r\n    | \"chat\";\r\n\r\nexport type CallaEventType = CallaTeleconferenceEventType | CallaMetadataEventType;\r\n\r\nexport class CallaEvent<T extends CallaEventType> extends Event {\r\n    constructor(public eventType: T) {\r\n        super(eventType);\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerConnectedEvent\r\n    extends CallaEvent<\"serverConnected\"> {\r\n    constructor() {\r\n        super(\"serverConnected\");\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerDisconnectedEvent\r\n    extends CallaEvent<\"serverDisconnected\"> {\r\n    constructor() {\r\n        super(\"serverDisconnected\");\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerFailedEvent\r\n    extends CallaEvent<\"serverFailed\"> {\r\n    constructor() {\r\n        super(\"serverFailed\");\r\n    }\r\n}\r\n\r\nexport class CallaUserEvent<T extends CallaEventType> extends CallaEvent<T> {\r\n    constructor(type: T, public id: string) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public displayName: string) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaUserNameChangedEvent extends CallaUserEvent<\"userNameChanged\"> {\r\n    constructor(id: string, public displayName: string) {\r\n        super(\"userNameChanged\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceJoinedEvent extends CallaUserEvent<\"conferenceJoined\"> {\r\n    constructor(id: string, public pose: InterpolatedPose) {\r\n        super(\"conferenceJoined\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceLeftEvent extends CallaUserEvent<\"conferenceLeft\"> {\r\n    constructor(id: string) {\r\n        super(\"conferenceLeft\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceConnectedEvent extends CallaEvent<\"conferenceConnected\"> {\r\n    constructor() {\r\n        super(\"conferenceConnected\");\r\n    }\r\n}\r\n\r\nexport class CallaConferenceFailedEvent extends CallaEvent<\"conferenceFailed\">{\r\n    constructor() {\r\n        super(\"conferenceFailed\");\r\n    }\r\n}\r\n\r\nexport class CallaConferenceRestoredEvent extends CallaEvent<\"conferenceRestored\">{\r\n    constructor() {\r\n        super(\"conferenceRestored\");\r\n    }\r\n}\r\n\r\nexport class CallaParticipantJoinedEvent extends CallaParticipantEvent<\"participantJoined\"> {\r\n    constructor(id: string, displayName: string, public source: AudioStreamSource) {\r\n        super(\"participantJoined\", id, displayName);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantLeftEvent extends CallaUserEvent<\"participantLeft\"> {\r\n    constructor(id: string) {\r\n        super(\"participantLeft\", id);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantNameChangeEvent extends CallaParticipantEvent<\"userNameChanged\"> {\r\n    constructor(id: string, displayName: string) {\r\n        super(\"userNameChanged\", id, displayName);\r\n    }\r\n}\r\n\r\nexport class CallaUserMutedEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public muted: boolean) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaUserAudioMutedEvent extends CallaUserMutedEvent<\"audioMuteStatusChanged\"> {\r\n    constructor(id: string, muted: boolean) {\r\n        super(\"audioMuteStatusChanged\", id, muted);\r\n    }\r\n}\r\n\r\nexport class CallaUserVideoMutedEvent extends CallaUserMutedEvent<\"videoMuteStatusChanged\"> {\r\n    constructor(id: string, muted: boolean) {\r\n        super(\"videoMuteStatusChanged\", id, muted);\r\n    }\r\n}\r\n\r\nexport enum StreamType {\r\n    Audio = \"audio\",\r\n    Video = \"video\"\r\n}\r\n\r\nexport enum StreamOpType {\r\n    Added = \"added\",\r\n    Removed = \"removed\",\r\n    Changed = \"changed\"\r\n}\r\n\r\nexport class CallaStreamEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, public kind: StreamType, public op: StreamOpType, id: string, public stream: MediaStream) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaStreamAddedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Added, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaStreamRemovedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Removed, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaStreamChangedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Changed, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaAudioStreamAddedEvent extends CallaStreamAddedEvent<\"audioAdded\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"audioAdded\", StreamType.Audio, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaAudioStreamRemovedEvent extends CallaStreamRemovedEvent<\"audioRemoved\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"audioRemoved\", StreamType.Audio, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaVideoStreamAddedEvent extends CallaStreamAddedEvent<\"videoAdded\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"videoAdded\", StreamType.Video, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaVideoStreamRemovedEvent extends CallaStreamRemovedEvent<\"videoRemoved\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"videoRemoved\", StreamType.Video, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaPoseEvent<T extends CallaMetadataEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public px: number, public py: number, public pz: number, public fx: number, public fy: number, public fz: number, public ux: number, public uy: number, public uz: number) {\r\n        super(type, id);\r\n    }\r\n\r\n    set(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        this.px = px;\r\n        this.py = py;\r\n        this.pz = pz;\r\n        this.fx = fx;\r\n        this.fy = fy;\r\n        this.fz = fz;\r\n        this.ux = ux;\r\n        this.uy = uy;\r\n        this.uz = uz;\r\n    }\r\n}\r\n\r\nexport class CallaUserPosedEvent extends CallaPoseEvent<\"userPosed\"> {\r\n    constructor(id: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        super(\"userPosed\", id, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n}\r\n\r\nexport class CallaUserPointerEvent extends CallaPoseEvent<\"userPointer\"> {\r\n    constructor(id: string, public name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        super(\"userPointer\", id, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n}\r\n\r\nexport class CallaEmojiEvent<T extends CallaMetadataEventType> extends CallaUserEvent<T> {\r\n    emoji: string;\r\n    constructor(type: T, id: string, emoji: Emoji | string) {\r\n        super(type, id);\r\n        if (emoji instanceof Emoji) {\r\n            this.emoji = emoji.value;\r\n        }\r\n        else {\r\n            this.emoji = emoji;\r\n        }\r\n    }\r\n}\r\n\r\nexport class CallaEmoteEvent extends CallaEmojiEvent<\"emote\"> {\r\n    constructor(id: string, emoji: Emoji | string) {\r\n        super(\"emote\", id, emoji);\r\n    }\r\n}\r\n\r\nexport class CallaEmojiAvatarEvent extends CallaEmojiEvent<\"setAvatarEmoji\"> {\r\n    constructor(id: string, emoji: Emoji | string) {\r\n        super(\"setAvatarEmoji\", id, emoji);\r\n    }\r\n}\r\n\r\nexport class CallaAvatarChangedEvent extends CallaUserEvent<\"avatarChanged\"> {\r\n    constructor(id: string, public url: string) {\r\n        super(\"avatarChanged\", id);\r\n    }\r\n}\r\n\r\nexport class CallaChatEvent extends CallaUserEvent<\"chat\"> {\r\n    constructor(id: string, public text: string) {\r\n        super(\"chat\", id);\r\n    }\r\n}\r\n\r\nexport interface CallaTeleconferenceEvents {\r\n    serverConnected: CallaTeleconferenceServerConnectedEvent;\r\n    serverDisconnected: CallaTeleconferenceServerDisconnectedEvent;\r\n    serverFailed: CallaTeleconferenceServerFailedEvent;\r\n    audioMuteStatusChanged: CallaUserAudioMutedEvent;\r\n    videoMuteStatusChanged: CallaUserVideoMutedEvent;\r\n    conferenceConnected: CallaConferenceConnectedEvent;\r\n    conferenceJoined: CallaConferenceJoinedEvent;\r\n    conferenceLeft: CallaConferenceLeftEvent;\r\n    conferenceFailed: CallaConferenceFailedEvent;\r\n    conferenceRestored: CallaConferenceRestoredEvent;\r\n    participantJoined: CallaParticipantJoinedEvent;\r\n    participantLeft: CallaParticipantLeftEvent;\r\n    userNameChanged: CallaUserNameChangedEvent;\r\n    audioActivity: AudioActivityEvent;\r\n    audioAdded: CallaAudioStreamAddedEvent;\r\n    videoAdded: CallaVideoStreamAddedEvent;\r\n    audioRemoved: CallaAudioStreamRemovedEvent;\r\n    videoRemoved: CallaVideoStreamRemovedEvent;\r\n}\r\n\r\nexport interface CallaMetadataEvents {\r\n    userPosed: CallaUserPosedEvent;\r\n    userPointer: CallaUserPointerEvent;\r\n    emote: CallaEmoteEvent;\r\n    setAvatarEmoji: CallaEmojiAvatarEvent;\r\n    avatarChanged: CallaAvatarChangedEvent;\r\n    chat: CallaChatEvent;\r\n}\r\n\r\nexport interface CallaClientEvents extends CallaTeleconferenceEvents, CallaMetadataEvents { }","export enum ConnectionState {\r\n    Disconnected = \"Disconnected\",\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnecting = \"Disconnecting\"\r\n}","/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The first item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScan<T>(arr: T[], ...tests: ((val: T) => boolean)[]) {\r\n    for (const test of tests) {\r\n        for (const item of arr) {\r\n            if (test(item)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}","import { arrayScan } from \"kudzu/arrays/arrayScan\";\r\nimport type { ErsatzEventTarget } from \"kudzu/events/ErsatzEventTarget\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport { IFetcher } from \"kudzu/io/IFetcher\";\r\nimport { AudioManager } from \"../audio/AudioManager\";\r\nimport { canChangeAudioOutput } from \"../audio/canChangeAudioOutput\";\r\nimport type { MediaDeviceSet, MediaPermissionSet } from \"../Calla\";\r\nimport type { CallaTeleconferenceEvents } from \"../CallaEvents\";\r\nimport { CallaUserEvent } from \"../CallaEvents\";\r\nimport { ConnectionState } from \"../ConnectionState\";\r\nimport type { IMetadataClientExt } from \"../meta/IMetadataClient\";\r\nimport type { ITeleconferenceClientExt } from \"./ITeleconferenceClient\";\r\n\r\nexport function addLogger(obj: ErsatzEventTarget, evtName: string): void {\r\n    obj.addEventListener(evtName, (...rest: any[]) => {\r\n        if (loggingEnabled) {\r\n            console.log(\">== CALLA ==<\", evtName, ...rest);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction filterDeviceDuplicates(devices: MediaDeviceInfo[]) {\r\n    const filtered = [];\r\n    for (let i = 0; i < devices.length; ++i) {\r\n        const a = devices[i];\r\n        let found = false;\r\n        for (let j = 0; j < filtered.length && !found; ++j) {\r\n            const b = filtered[j];\r\n            found = a.kind === b.kind && b.label.indexOf(a.label) > 0;\r\n        }\r\n\r\n        if (!found) {\r\n            filtered.push(a);\r\n        }\r\n    }\r\n\r\n    return filtered;\r\n}\r\n\r\nconst PREFERRED_AUDIO_OUTPUT_ID_KEY = \"calla:preferredAudioOutputID\";\r\nconst PREFERRED_AUDIO_INPUT_ID_KEY = \"calla:preferredAudioInputID\";\r\nconst PREFERRED_VIDEO_INPUT_ID_KEY = \"calla:preferredVideoInputID\";\r\n\r\nexport const DEFAULT_LOCAL_USER_ID = \"local-user\";\r\n\r\nlet loggingEnabled = window.location.hostname === \"localhost\"\r\n    || /\\bdebug\\b/.test(window.location.search);\r\n\r\nexport abstract class BaseTeleconferenceClient\r\n    extends TypedEventBase<CallaTeleconferenceEvents>\r\n    implements ITeleconferenceClientExt {\r\n\r\n    toggleLogging() {\r\n        loggingEnabled = !loggingEnabled;\r\n    }\r\n\r\n    localUserID: string = null;\r\n    localUserName: string = null;\r\n    roomName: string = null;\r\n\r\n    protected fetcher: IFetcher;\r\n\r\n    audio: AudioManager;\r\n\r\n    private _connectionState = ConnectionState.Disconnected;\r\n    private _conferenceState = ConnectionState.Disconnected;\r\n\r\n    hasAudioPermission = false;\r\n    hasVideoPermission = false;\r\n\r\n    get connectionState(): ConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    private setConnectionState(state: ConnectionState): void {\r\n        this._connectionState = state;\r\n    }\r\n\r\n    get conferenceState(): ConnectionState {\r\n        return this._conferenceState;\r\n    }\r\n\r\n    private setConferenceState(state: ConnectionState): void {\r\n        this._conferenceState = state;\r\n    }\r\n\r\n    constructor(fetcher: IFetcher, audio: AudioManager, public needsAudioDevice = true, public needsVideoDevice = false) {\r\n        super();\r\n\r\n        this.fetcher = fetcher;\r\n\r\n        this.audio = audio;\r\n\r\n        this.addEventListener(\"serverConnected\", this.setConnectionState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"serverFailed\", this.setConnectionState.bind(this, ConnectionState.Disconnected));\r\n        this.addEventListener(\"serverDisconnected\", this.setConnectionState.bind(this, ConnectionState.Disconnected));\r\n\r\n        this.addEventListener(\"conferenceJoined\", this.setConferenceState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"conferenceFailed\", this.setConferenceState.bind(this, ConnectionState.Disconnected));\r\n        this.addEventListener(\"conferenceRestored\", this.setConferenceState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"conferenceLeft\", this.setConferenceState.bind(this, ConnectionState.Disconnected));\r\n    }\r\n\r\n    dispatchEvent<K extends string & keyof CallaTeleconferenceEvents>(evt: CallaTeleconferenceEvents[K] & Event): boolean {\r\n        if (evt instanceof CallaUserEvent\r\n            && (evt.id == null\r\n                || evt.id === \"local\")) {\r\n            if (this.localUserID === DEFAULT_LOCAL_USER_ID) {\r\n                evt.id = null;\r\n            }\r\n            else {\r\n                evt.id = this.localUserID;\r\n            }\r\n        }\r\n\r\n        return super.dispatchEvent(evt);\r\n    }\r\n\r\n    async getNext<T extends keyof CallaTeleconferenceEvents>(evtName: T, userID: string): Promise<CallaTeleconferenceEvents[T]> {\r\n        return new Promise((resolve) => {\r\n            const getter = (evt: CallaTeleconferenceEvents[T]) => {\r\n                if (evt instanceof CallaUserEvent\r\n                    && evt.id === userID) {\r\n                    this.removeEventListener(evtName, getter);\r\n                    resolve(evt);\r\n                }\r\n            };\r\n\r\n            this.addEventListener(evtName, getter);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    get preferredAudioInputID(): string {\r\n        return localStorage.getItem(PREFERRED_AUDIO_INPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredAudioInputID(v: string) {\r\n        localStorage.setItem(PREFERRED_AUDIO_INPUT_ID_KEY, v);\r\n    }\r\n\r\n    get preferredVideoInputID(): string {\r\n        return localStorage.getItem(PREFERRED_VIDEO_INPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredVideoInputID(v: string) {\r\n        localStorage.setItem(PREFERRED_VIDEO_INPUT_ID_KEY, v);\r\n    }\r\n\r\n    async setPreferredDevices(): Promise<void> {\r\n        await this.setPreferredAudioInput(true);\r\n        await this.setPreferredVideoInput(false);\r\n        await this.setPreferredAudioOutput(true);\r\n    }\r\n\r\n    async getPreferredAudioInput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getAudioInputDevices();\r\n        const device = arrayScan(\r\n            devices,\r\n            (d) => d.deviceId === this.preferredAudioInputID,\r\n            (d) => d.deviceId === \"communications\",\r\n            (d) => d.deviceId === \"default\",\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredAudioInput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredAudioInput(allowAny);\r\n        if (device) {\r\n            await this.setAudioInputDevice(device);\r\n        }\r\n    }\r\n\r\n    async getPreferredVideoInput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getVideoInputDevices();\r\n        const device = arrayScan(devices,\r\n            (d) => d.deviceId === this.preferredVideoInputID,\r\n            (d) => allowAny && d && /front/i.test(d.label),\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredVideoInput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredVideoInput(allowAny);\r\n        if (device) {\r\n            await this.setVideoInputDevice(device);\r\n        }\r\n    }\r\n\r\n    private async getDevices(): Promise<MediaDeviceInfo[]> {\r\n        let devices: MediaDeviceInfo[] = null;\r\n        for (let i = 0; i < 3; ++i) {\r\n            devices = await navigator.mediaDevices.enumerateDevices();\r\n            for (const device of devices) {\r\n                if (device.deviceId.length > 0) {\r\n                    this.hasAudioPermission = this.hasAudioPermission || device.kind === \"audioinput\" && device.label.length > 0;\r\n                    this.hasVideoPermission = this.hasVideoPermission || device.kind === \"videoinput\" && device.label.length > 0;\r\n                }\r\n            }\r\n\r\n            if (this.hasAudioPermission) {\r\n                break;\r\n            }\r\n\r\n            try {\r\n                await navigator.mediaDevices.getUserMedia({\r\n                    audio: this.needsAudioDevice && !this.hasAudioPermission,\r\n                    video: this.needsVideoDevice && !this.hasVideoPermission\r\n                });\r\n            }\r\n            catch (exp) {\r\n                console.warn(exp);\r\n            }\r\n        }\r\n\r\n        return devices || [];\r\n    }\r\n\r\n    async getMediaPermissions(): Promise<MediaPermissionSet> {\r\n        await this.getDevices();\r\n        return {\r\n            audio: this.hasAudioPermission,\r\n            video: this.hasVideoPermission\r\n        };\r\n    }\r\n\r\n    private async getAvailableDevices(filterDuplicates: boolean = false): Promise<MediaDeviceSet> {\r\n        let devices = await this.getDevices();\r\n\r\n        if (filterDuplicates) {\r\n            devices = filterDeviceDuplicates(devices);\r\n        }\r\n\r\n        return {\r\n            audioOutput: canChangeAudioOutput ? devices.filter(d => d.kind === \"audiooutput\") : [],\r\n            audioInput: devices.filter(d => d.kind === \"audioinput\"),\r\n            videoInput: devices.filter(d => d.kind === \"videoinput\")\r\n        };\r\n    }\r\n\r\n    async getAudioInputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.audioInput || [];\r\n    }\r\n\r\n    async getVideoInputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.videoInput || [];\r\n    }\r\n\r\n    async setAudioOutputDevice(device: MediaDeviceInfo) {\r\n        if (canChangeAudioOutput) {\r\n            this.preferredAudioOutputID = device && device.deviceId || null;\r\n        }\r\n    }\r\n\r\n    async getAudioOutputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        if (!canChangeAudioOutput) {\r\n            return [];\r\n        }\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.audioOutput || [];\r\n    }\r\n\r\n    async getCurrentAudioOutputDevice() {\r\n        if (!canChangeAudioOutput) {\r\n            return null;\r\n        }\r\n        const curId = this.audio.getAudioOutputDeviceID(),\r\n            devices = await this.getAudioOutputDevices(),\r\n            device = devices.filter((d) => curId != null && d.deviceId === curId\r\n                || curId == null && d.deviceId === this.preferredAudioOutputID);\r\n        if (device.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return device[0];\r\n        }\r\n    }\r\n\r\n    get preferredAudioOutputID(): string {\r\n        return localStorage.getItem(PREFERRED_AUDIO_OUTPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredAudioOutputID(v: string) {\r\n        localStorage.setItem(PREFERRED_AUDIO_OUTPUT_ID_KEY, v);\r\n    }\r\n\r\n\r\n    async getPreferredAudioOutput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getAudioOutputDevices();\r\n        const device = arrayScan(\r\n            devices,\r\n            (d) => d.deviceId === this.preferredAudioOutputID,\r\n            (d) => d.deviceId === \"communications\",\r\n            (d) => d.deviceId === \"default\",\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredAudioOutput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredAudioOutput(allowAny);\r\n        if (device) {\r\n            await this.setAudioOutputDevice(device);\r\n        }\r\n    }\r\n\r\n    async setAudioInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        this.preferredAudioInputID = device && device.deviceId || null;\r\n    }\r\n\r\n    async setVideoInputDevice(device: MediaDeviceInfo) {\r\n        this.preferredVideoInputID = device && device.deviceId || null;\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        this.setConnectionState(ConnectionState.Connecting);\r\n    }\r\n\r\n    async join(_roomName: string, _password?: string): Promise<void> {\r\n        this.setConferenceState(ConnectionState.Connecting);\r\n    }\r\n\r\n    async leave(): Promise<void> {\r\n        this.setConferenceState(ConnectionState.Disconnecting);\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        this.setConnectionState(ConnectionState.Disconnecting);\r\n    }\r\n\r\n    abstract userExists(id: string): boolean;\r\n    abstract getUserNames(): string[][];\r\n    abstract identify(userNameOrID: string): Promise<void>;\r\n    abstract getCurrentAudioInputDevice(): Promise<MediaDeviceInfo>;\r\n    abstract getCurrentVideoInputDevice(): Promise<MediaDeviceInfo>;\r\n    abstract toggleAudioMuted(): Promise<boolean>;\r\n    abstract toggleVideoMuted(): Promise<boolean>;\r\n    abstract getAudioMuted(): Promise<boolean>;\r\n    abstract getVideoMuted(): Promise<boolean>;\r\n    abstract getDefaultMetadataClient(): IMetadataClientExt;\r\n}\r\n","/**\r\n * An Event class for tracking changes to audio activity.\r\n **/\r\nexport class AudioActivityEvent extends Event {\r\n    id: string = null;\r\n    isActive: boolean = false;\r\n\r\n    /** Creates a new \"audioActivity\" event */\r\n    constructor() {\r\n        super(\"audioActivity\");\r\n        Object.seal(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the current state of the event\r\n     * @param id - the user for which the activity changed\r\n     * @param isActive - the new state of the activity\r\n     */\r\n    set(id: string, isActive: boolean): void {\r\n        this.id = id;\r\n        this.isActive = isActive;\r\n    }\r\n}\r\n","import type { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport type { IFetcher } from \"kudzu/io/IFetcher\";\r\nimport type { IDisposable } from \"kudzu/using\";\r\nimport { AudioActivityEvent } from \"./audio/AudioActivityEvent\";\r\nimport type { AudioManager } from \"./audio/AudioManager\";\r\nimport { canChangeAudioOutput } from \"./audio/canChangeAudioOutput\";\r\nimport type {\r\n    CallaAudioStreamAddedEvent,\r\n    CallaAudioStreamRemovedEvent,\r\n    CallaClientEvents,\r\n    CallaConferenceJoinedEvent,\r\n    CallaConferenceLeftEvent,\r\n    CallaParticipantJoinedEvent,\r\n    CallaParticipantLeftEvent,\r\n    CallaUserPointerEvent,\r\n    CallaUserPosedEvent\r\n} from \"./CallaEvents\";\r\nimport { ConnectionState } from \"./ConnectionState\";\r\nimport type { ICombinedClient } from \"./ICombinedClient\";\r\nimport type { IMetadataClient, IMetadataClientExt } from \"./meta/IMetadataClient\";\r\nimport type { ITeleconferenceClient, ITeleconferenceClientExt } from \"./tele/ITeleconferenceClient\";\r\n\r\nexport interface MediaPermissionSet {\r\n    audio: boolean;\r\n    video: boolean;\r\n}\r\n\r\nexport interface MediaDeviceSet {\r\n    audioInput: MediaDeviceInfo[];\r\n    videoInput: MediaDeviceInfo[];\r\n    audioOutput: MediaDeviceInfo[];\r\n}\r\n\r\nexport enum ClientState {\r\n    InConference = \"in-conference\",\r\n    JoiningConference = \"joining-conference\",\r\n    Connected = \"connected\",\r\n    Connecting = \"connecting\",\r\n    Prepaired = \"prepaired\",\r\n    Prepairing = \"prepairing\",\r\n    Unprepared = \"unprepaired\"\r\n}\r\n\r\nconst audioActivityEvt = new AudioActivityEvent();\r\n\r\nexport class Calla\r\n    extends TypedEventBase<CallaClientEvents>\r\n    implements ICombinedClient, IDisposable {\r\n\r\n    isAudioMuted: boolean = null;\r\n    isVideoMuted: boolean = null;\r\n\r\n    constructor(\r\n        private _fetcher: IFetcher,\r\n        private _tele: ITeleconferenceClientExt,\r\n        private _meta: IMetadataClientExt) {\r\n        super();\r\n\r\n        const fwd = this.dispatchEvent.bind(this);\r\n\r\n        this._tele.addEventListener(\"serverConnected\", fwd);\r\n        this._tele.addEventListener(\"serverDisconnected\", fwd);\r\n        this._tele.addEventListener(\"serverFailed\", fwd);\r\n        this._tele.addEventListener(\"conferenceFailed\", fwd);\r\n        this._tele.addEventListener(\"conferenceRestored\", fwd);\r\n\r\n        this._tele.addEventListener(\"audioMuteStatusChanged\", fwd);\r\n        this._tele.addEventListener(\"videoMuteStatusChanged\", fwd);\r\n\r\n        this._tele.addEventListener(\"conferenceJoined\", async (evt: CallaConferenceJoinedEvent) => {\r\n            const user = this.audio.setLocalUserID(evt.id);\r\n            evt.pose = user.pose;\r\n            this.dispatchEvent(evt);\r\n            await this.setPreferredDevices();\r\n        });\r\n\r\n        this._tele.addEventListener(\"conferenceLeft\", (evt: CallaConferenceLeftEvent) => {\r\n            this.audio.setLocalUserID(evt.id);\r\n            this.dispatchEvent(evt);\r\n        });\r\n\r\n        this._tele.addEventListener(\"participantJoined\", async (joinEvt: CallaParticipantJoinedEvent) => {\r\n            joinEvt.source = this.audio.createUser(joinEvt.id);\r\n            this.dispatchEvent(joinEvt);\r\n        });\r\n\r\n        this._tele.addEventListener(\"participantLeft\", (evt: CallaParticipantLeftEvent) => {\r\n            this.dispatchEvent(evt);\r\n            this.audio.removeUser(evt.id);\r\n        });\r\n\r\n        this._tele.addEventListener(\"userNameChanged\", fwd);\r\n        this._tele.addEventListener(\"videoAdded\", fwd);\r\n        this._tele.addEventListener(\"videoRemoved\", fwd);\r\n\r\n        this._tele.addEventListener(\"audioAdded\", (evt: CallaAudioStreamAddedEvent) => {\r\n            const user = this.audio.getUser(evt.id);\r\n            if (user) {\r\n                let stream = user.streams.get(evt.kind);\r\n                if (stream) {\r\n                    user.streams.delete(evt.kind);\r\n                }\r\n\r\n                stream = evt.stream;\r\n                user.streams.set(evt.kind, stream);\r\n\r\n                if (evt.id !== this._tele.localUserID) {\r\n                    this.audio.setUserStream(evt.id, stream);\r\n                }\r\n\r\n                this.dispatchEvent(evt);\r\n            }\r\n        });\r\n\r\n        this._tele.addEventListener(\"audioRemoved\", (evt: CallaAudioStreamRemovedEvent) => {\r\n            const user = this.audio.getUser(evt.id);\r\n            if (user && user.streams.has(evt.kind)) {\r\n                user.streams.delete(evt.kind);\r\n            }\r\n\r\n            if (evt.id !== this._tele.localUserID) {\r\n                this.audio.setUserStream(evt.id, null);\r\n            }\r\n\r\n            this.dispatchEvent(evt);\r\n        });\r\n\r\n        this._meta.addEventListener(\"avatarChanged\", fwd);\r\n        this._meta.addEventListener(\"chat\", fwd);\r\n        this._meta.addEventListener(\"emote\", fwd);\r\n        this._meta.addEventListener(\"setAvatarEmoji\", fwd);\r\n\r\n        const offsetEvt = (poseEvt: CallaUserPointerEvent | CallaUserPosedEvent): void => {\r\n            const O = this.audio.getUserOffset(poseEvt.id);\r\n            if (O) {\r\n                poseEvt.px += O[0];\r\n                poseEvt.py += O[1];\r\n                poseEvt.pz += O[2];\r\n            }\r\n            this.dispatchEvent(poseEvt);\r\n        };\r\n\r\n        this._meta.addEventListener(\"userPointer\", offsetEvt);\r\n\r\n        this._meta.addEventListener(\"userPosed\", (evt: CallaUserPosedEvent) => {\r\n            this.audio.setUserPose(\r\n                evt.id,\r\n                evt.px, evt.py, evt.pz,\r\n                evt.fx, evt.fy, evt.fz,\r\n                evt.ux, evt.uy, evt.uz);\r\n            offsetEvt(evt);\r\n        });\r\n\r\n        this.audio.addEventListener(\"audioActivity\", (evt: AudioActivityEvent) => {\r\n            audioActivityEvt.id = evt.id;\r\n            audioActivityEvt.isActive = evt.isActive;\r\n            this.dispatchEvent(audioActivityEvt);\r\n        });\r\n\r\n        const dispose = this.dispose.bind(this);\r\n        window.addEventListener(\"beforeunload\", dispose);\r\n        window.addEventListener(\"unload\", dispose);\r\n        window.addEventListener(\"pagehide\", dispose);\r\n\r\n        Object.seal(this);\r\n    }\r\n\r\n    get connectionState(): ConnectionState {\r\n        return this._tele.connectionState;\r\n    }\r\n\r\n    get conferenceState(): ConnectionState {\r\n        return this._tele.conferenceState;\r\n    }\r\n\r\n    get fetcher(): IFetcher {\r\n        return this._fetcher;\r\n    }\r\n\r\n    get tele(): ITeleconferenceClient {\r\n        return this._tele;\r\n    }\r\n\r\n    get meta(): IMetadataClient {\r\n        return this._meta;\r\n    }\r\n\r\n    get audio(): AudioManager {\r\n        return this._tele.audio;\r\n    }\r\n\r\n    get preferredAudioOutputID(): string {\r\n        return this._tele.preferredAudioOutputID;\r\n    }\r\n\r\n    set preferredAudioOutputID(v: string) {\r\n        this._tele.preferredAudioOutputID = v;\r\n    }\r\n\r\n    get preferredAudioInputID(): string {\r\n        return this._tele.preferredAudioInputID;\r\n    }\r\n\r\n    set preferredAudioInputID(v: string) {\r\n        this._tele.preferredAudioInputID = v;\r\n    }\r\n\r\n    get preferredVideoInputID(): string {\r\n        return this._tele.preferredVideoInputID;\r\n    }\r\n\r\n    set preferredVideoInputID(v: string) {\r\n        this._tele.preferredVideoInputID = v;\r\n    }\r\n\r\n    async getCurrentAudioOutputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentAudioOutputDevice();\r\n    }\r\n\r\n    async getMediaPermissions(): Promise<MediaPermissionSet> {\r\n        return await this._tele.getMediaPermissions();\r\n    }\r\n\r\n    async getAudioOutputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getAudioOutputDevices(filterDuplicates);\r\n    }\r\n\r\n    async getAudioInputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getAudioInputDevices(filterDuplicates);\r\n    }\r\n\r\n    async getVideoInputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getVideoInputDevices(filterDuplicates);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.leave();\r\n        this.disconnect();\r\n    }\r\n\r\n    get offsetRadius(): number {\r\n        return this.audio.offsetRadius;\r\n    }\r\n\r\n    set offsetRadius(v: number) {\r\n        this.audio.offsetRadius = v;\r\n    }\r\n\r\n    setLocalPose(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.audio.setUserPose(this.localUserID, px, py, pz, fx, fy, fz, ux, uy, uz, 0);\r\n        this._meta.setLocalPose(px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPoseImmediate(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.audio.setUserPose(this.localUserID, px, py, pz, fx, fy, fz, ux, uy, uz, 0);\r\n        this._meta.setLocalPoseImmediate(px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPointer(name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this._meta.setLocalPointer(name, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setAvatarEmoji(emoji: Emoji): void {\r\n        this._meta.setAvatarEmoji(emoji);\r\n    }\r\n\r\n    setAvatarURL(url: string): void {\r\n        this._meta.setAvatarURL(url);\r\n    }\r\n\r\n    emote(emoji: Emoji): void {\r\n        this._meta.emote(emoji);\r\n    }\r\n\r\n    chat(text: string): void {\r\n        this._meta.chat(text);\r\n    }\r\n\r\n    async setPreferredDevices(): Promise<void> {\r\n        await this._tele.setPreferredDevices();\r\n    }\r\n\r\n    async setAudioInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        await this._tele.setAudioInputDevice(device);\r\n    }\r\n\r\n    async setVideoInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        await this._tele.setVideoInputDevice(device);\r\n    }\r\n\r\n    async getCurrentAudioInputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentAudioInputDevice();\r\n    }\r\n\r\n    async getCurrentVideoInputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentVideoInputDevice();\r\n    }\r\n\r\n    async toggleAudioMuted(): Promise<boolean> {\r\n        return await this._tele.toggleAudioMuted();\r\n    }\r\n\r\n    async toggleVideoMuted(): Promise<boolean> {\r\n        return await this._tele.toggleVideoMuted();\r\n    }\r\n\r\n    async getAudioMuted(): Promise<boolean> {\r\n        return await this._tele.getAudioMuted();\r\n    }\r\n\r\n    async getVideoMuted(): Promise<boolean> {\r\n        return await this._tele.getVideoMuted();\r\n    }\r\n\r\n    get metadataState(): ConnectionState {\r\n        return this._meta.metadataState;\r\n    }\r\n\r\n    get localUserID() {\r\n        return this._tele.localUserID;\r\n    }\r\n\r\n    get localUserName() {\r\n        return this._tele.localUserName;\r\n    }\r\n\r\n    get roomName() {\r\n        return this._tele.roomName;\r\n    }\r\n\r\n    userExists(id: string): boolean {\r\n        return this._tele.userExists(id);\r\n    }\r\n\r\n    getUserNames(): string[][] {\r\n        return this._tele.getUserNames();\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        await this._tele.connect();\r\n        if (this._tele.connectionState === ConnectionState.Connected) {\r\n            await this._meta.connect();\r\n        }\r\n    }\r\n\r\n    async join(roomName: string): Promise<void> {\r\n        await this._tele.join(roomName);\r\n        if (this._tele.conferenceState === ConnectionState.Connected) {\r\n            await this._meta.join(roomName);\r\n        }\r\n    }\r\n\r\n    async identify(userName: string): Promise<void> {\r\n        await this._tele.identify(userName);\r\n        await this._meta.identify(this.localUserID);\r\n    }\r\n\r\n    async leave(): Promise<void> {\r\n        await this._meta.leave();\r\n        await this._tele.leave();\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        await this._meta.disconnect();\r\n        await this._tele.disconnect();\r\n    }\r\n\r\n    update(): void {\r\n        this.audio.update();\r\n    }\r\n\r\n    async setAudioOutputDevice(device: MediaDeviceInfo) {\r\n        this._tele.setAudioOutputDevice(device);\r\n        if (canChangeAudioOutput) {\r\n            await this.audio.setAudioOutputDeviceID(this._tele.preferredAudioOutputID);\r\n        }\r\n    }\r\n\r\n    async setAudioMuted(muted: boolean) {\r\n        let isMuted = this.isAudioMuted;\r\n        if (muted !== isMuted) {\r\n            isMuted = await this.toggleAudioMuted();\r\n        }\r\n        return isMuted;\r\n    }\r\n\r\n    async setVideoMuted(muted: boolean) {\r\n        let isMuted = this.isVideoMuted;\r\n        if (muted !== isMuted) {\r\n            isMuted = await this.toggleVideoMuted();\r\n        }\r\n        return isMuted;\r\n    }\r\n\r\n}","export * from \"./audio/canChangeAudioOutput\";\r\nexport * from \"./meta/BaseMetadataClient\";\r\nexport * from \"./tele/BaseTeleconferenceClient\";\r\nexport { Calla as Client } from \"./Calla\";\r\nexport {\r\n    CallaTeleconferenceEventType as TeleconferenceEvents,\r\n    CallaMetadataEventType as MetadataEvents\r\n} from \"./CallaEvents\";\r\n\r\nimport { version } from \"./package.json\";\r\nconsole.info(`Calla v${version}.`);\r\n\r\nexport { version };","import type { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport { sleep } from \"kudzu/events/sleep\";\r\nimport type { CallaEventType, CallaMetadataEvents } from \"../CallaEvents\";\r\nimport { CallaUserEvent } from \"../CallaEvents\";\r\nimport { ConnectionState } from \"../ConnectionState\";\r\nimport type { IMetadataClientExt } from \"./IMetadataClient\";\r\n\r\n\r\nexport abstract class BaseMetadataClient\r\n    extends TypedEventBase<CallaMetadataEvents>\r\n    implements IMetadataClientExt {\r\n\r\n    private tasks = new Map<string, Promise<any>>();\r\n\r\n    constructor(private sleepTime: number) {\r\n        super();\r\n    }\r\n\r\n    async getNext<T extends keyof CallaMetadataEvents>(evtName: T, userID: string): Promise<CallaMetadataEvents[T]> {\r\n        return new Promise((resolve) => {\r\n            const getter = (evt: CallaMetadataEvents[T]) => {\r\n                if (evt instanceof CallaUserEvent\r\n                    && evt.id === userID) {\r\n                    this.removeEventListener(evtName, getter);\r\n                    resolve(evt);\r\n                }\r\n            };\r\n\r\n            this.addEventListener(evtName, getter);\r\n        });\r\n    }\r\n\r\n    abstract get metadataState(): ConnectionState;\r\n\r\n    get isConnected(): boolean {\r\n        return this.metadataState === ConnectionState.Connected;\r\n    }\r\n\r\n    protected abstract callInternal(command: CallaEventType, ...args: any[]): Promise<void>;\r\n\r\n    private async callThrottled(key: string, command: CallaEventType, ...args: any[]): Promise<void> {\r\n        if (!this.tasks.has(key)) {\r\n            const start = performance.now();\r\n            const task = this.callInternal(command, ...args);\r\n            this.tasks.set(key, task);\r\n            await task;\r\n            const delta = performance.now() - start;\r\n            const sleepTime = this.sleepTime - delta;\r\n            if (sleepTime > 0) {\r\n                await sleep(this.sleepTime);\r\n            }\r\n            this.tasks.delete(key);\r\n        }\r\n    }\r\n\r\n    private async callImmediate(command: CallaEventType, ...args: any[]): Promise<void> {\r\n        await this.callInternal(command, ...args);\r\n    }\r\n\r\n    setLocalPose(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callThrottled(\"userPosed\", \"userPosed\", px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPoseImmediate(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callImmediate(\"userPosed\", px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPointer(name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callThrottled(\"userPointer\" + name, \"userPointer\", name, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setAvatarEmoji(emoji: Emoji): void {\r\n        this.callImmediate(\"setAvatarEmoji\", emoji);\r\n    }\r\n\r\n    setAvatarURL(url: string): void {\r\n        this.callImmediate(\"avatarChanged\", url);\r\n    }\r\n\r\n    emote(emoji: Emoji): void {\r\n        this.callImmediate(\"emote\", emoji);\r\n    }\r\n\r\n    chat(text: string): void {\r\n        this.callImmediate(\"chat\", text);\r\n    }\r\n\r\n    abstract connect(): Promise<void>;\r\n    abstract join(roomName: string): Promise<void>;\r\n    abstract identify(userNameOrID: string): Promise<void>;\r\n    abstract leave(): Promise<void>;\r\n    abstract disconnect(): Promise<void>;\r\n}\r\n","export function sleep(dt: number) : Promise<void> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, dt);\r\n    });\r\n}\r\n"],"names":["isFunction","obj","o","c","Function","canChangeAudioOutput","HTMLAudioElement","prototype","setSinkId","TypedEventBase","[object Object]","this","Map","type","callback","options","listeners","get","Array","set","find","push","listenerOptions","removeListener","idx","findIndex","arr","splice","arrayRemoveAt","has","delete","evt","once","call","defaultPrevented","mappedCallback","mappedCallbacks","super","addEventListener","removeEventListener","CallaEvent","Event","eventType","CallaUserEvent","id","StreamType","StreamOpType","ConnectionState","arrayScan","tests","test","item","PREFERRED_AUDIO_OUTPUT_ID_KEY","PREFERRED_AUDIO_INPUT_ID_KEY","PREFERRED_VIDEO_INPUT_ID_KEY","DEFAULT_LOCAL_USER_ID","loggingEnabled","window","location","hostname","search","AudioActivityEvent","Object","seal","isActive","ClientState","audioActivityEvt","console","info","sleepTime","evtName","userID","Promise","resolve","getter","isConnected","metadataState","Connected","key","command","args","tasks","start","performance","now","task","callInternal","delta","dt","setTimeout","px","py","pz","fx","fy","fz","ux","uy","uz","callThrottled","callImmediate","name","emoji","url","text","fetcher","audio","needsAudioDevice","needsVideoDevice","Disconnected","setConnectionState","bind","setConferenceState","connectionState","_connectionState","state","conferenceState","_conferenceState","localUserID","dispatchEvent","preferredAudioInputID","localStorage","getItem","v","setItem","preferredVideoInputID","setPreferredAudioInput","setPreferredVideoInput","setPreferredAudioOutput","allowAny","getAudioInputDevices","d","deviceId","length","device","getPreferredAudioInput","setAudioInputDevice","getVideoInputDevices","label","getPreferredVideoInput","setVideoInputDevice","devices","i","navigator","mediaDevices","enumerateDevices","hasAudioPermission","kind","hasVideoPermission","getUserMedia","video","exp","warn","getDevices","filterDuplicates","filtered","a","found","j","b","indexOf","filterDeviceDuplicates","audioOutput","filter","audioInput","videoInput","getAvailableDevices","preferredAudioOutputID","curId","getAudioOutputDeviceID","getAudioOutputDevices","getPreferredAudioOutput","setAudioOutputDevice","Connecting","_roomName","_password","Disconnecting","_fetcher","_tele","_meta","fwd","async","user","setLocalUserID","pose","setPreferredDevices","joinEvt","source","createUser","removeUser","getUser","stream","streams","setUserStream","offsetEvt","poseEvt","O","getUserOffset","setUserPose","dispose","tele","meta","getCurrentAudioOutputDevice","getMediaPermissions","leave","disconnect","offsetRadius","setLocalPose","setLocalPoseImmediate","setLocalPointer","setAvatarEmoji","setAvatarURL","emote","chat","getCurrentAudioInputDevice","getCurrentVideoInputDevice","toggleAudioMuted","toggleVideoMuted","getAudioMuted","getVideoMuted","localUserName","roomName","userExists","getUserNames","connect","join","userName","identify","update","setAudioOutputDeviceID","muted","isMuted","isAudioMuted","isVideoMuted","rest","log"],"mappings":"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"}