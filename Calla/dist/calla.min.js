var Calla=function(e){"use strict";function t(e){return t=e,n=Function,typeof t==="function"||t instanceof n;var t,n}const n=t(HTMLAudioElement.prototype.setSinkId);class s{static write(e){return`${e}${s.RecordSeparator}`}static parse(e){if(e[e.length-1]!==s.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(s.RecordSeparator);return t.pop(),t}}var o;s.RecordSeparatorCode=30,s.RecordSeparator=String.fromCharCode(s.RecordSeparatorCode),function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(o||(o={}));class i{constructor(){}log(e,t){}}i.instance=new i;class r{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class a{static get isBrowser(){return"object"==typeof window}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}}function c(e,t){let n="";return h(e)?(n=`Binary data of length ${e.byteLength}`,t&&(n+=`. Content: '${function(e){const t=new Uint8Array(e);let n="";return t.forEach((e=>{n+=`0x${e<16?"0":""}${e.toString(16)} `})),n.substr(0,n.length-1)}(e)}'`)):"string"==typeof e&&(n=`String data of length ${e.length}`,t&&(n+=`. Content: '${e}'`)),n}function h(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}async function l(e,t,n,s,i,r,a,l,d){let u={};if(i){const e=await i();e&&(u={Authorization:`Bearer ${e}`})}const[p,f]=g();u[p]=f,e.log(o.Trace,`(${t} transport) sending data. ${c(r,a)}.`);const m=h(r)?"arraybuffer":"text",v=await n.post(s,{content:r,headers:{...u,...d},responseType:m,withCredentials:l});e.log(o.Trace,`(${t} transport) request complete. Response status: ${v.statusCode}.`)}class d{constructor(e,t){this.subject=e,this.observer=t}dispose(){const e=this.subject.observers.indexOf(this.observer);e>-1&&this.subject.observers.splice(e,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch((e=>{}))}}class u{constructor(e){this.minimumLogLevel=e,this.outputConsole=console}log(e,t){if(e>=this.minimumLogLevel)switch(e){case o.Critical:case o.Error:this.outputConsole.error(`[${(new Date).toISOString()}] ${o[e]}: ${t}`);break;case o.Warning:this.outputConsole.warn(`[${(new Date).toISOString()}] ${o[e]}: ${t}`);break;case o.Information:this.outputConsole.info(`[${(new Date).toISOString()}] ${o[e]}: ${t}`);break;default:this.outputConsole.log(`[${(new Date).toISOString()}] ${o[e]}: ${t}`)}}}function g(){return["X-SignalR-User-Agent",p("0.0.0-DEV_BUILD",navigator.platform,"Browser",void 0)]}function p(e,t,n,s){let o="Microsoft SignalR/";const i=e.split(".");return o+=`${i[0]}.${i[1]}`,o+=` (${e}; `,o+=t&&""!==t?`${t}; `:"Unknown OS; ",o+=`${n}`,o+=s?`; ${s}`:"; Unknown Runtime Version",o+=")",o}class f{writeHandshakeRequest(e){return s.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n,o;if(h(e)){const t=new Uint8Array(e),i=t.indexOf(s.RecordSeparatorCode);if(-1===i)throw new Error("Message is incomplete.");const r=i+1;n=String.fromCharCode.apply(null,t.slice(0,r)),o=t.byteLength>r?t.slice(r).buffer:null}else{const t=e,i=t.indexOf(s.RecordSeparator);if(-1===i)throw new Error("Message is incomplete.");const r=i+1;n=t.substring(0,r),o=t.length>r?t.substring(r):null}const i=s.parse(n),r=JSON.parse(i[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return t=r,[o,t]}}var m;!function(e){e[e.Invocation=1]="Invocation",e[e.StreamItem=2]="StreamItem",e[e.Completion=3]="Completion",e[e.StreamInvocation=4]="StreamInvocation",e[e.CancelInvocation=5]="CancelInvocation",e[e.Ping=6]="Ping",e[e.Close=7]="Close"}(m||(m={}));class v{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new d(this,e)}}var w;!function(e){e.Disconnected="Disconnected",e.Connecting="Connecting",e.Connected="Connected",e.Disconnecting="Disconnecting",e.Reconnecting="Reconnecting"}(w||(w={}));class y{constructor(e,t,n,s){r.isRequired(e,"connection"),r.isRequired(t,"logger"),r.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this.logger=t,this.protocol=n,this.connection=e,this.reconnectPolicy=s,this.handshakeProtocol=new f,this.connection.onreceive=e=>this.processIncomingData(e),this.connection.onclose=e=>this.connectionClosed(e),this.callbacks={},this.methods={},this.closedCallbacks=[],this.reconnectingCallbacks=[],this.reconnectedCallbacks=[],this.invocationId=0,this.receivedHandshakeResponse=!1,this.connectionState=w.Disconnected,this.connectionStarted=!1,this.cachedPingMessage=this.protocol.writeMessage({type:m.Ping})}static create(e,t,n,s){return new y(e,t,n,s)}get state(){return this.connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this.connectionState!==w.Disconnected&&this.connectionState!==w.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this.startPromise=this.startWithStateTransitions(),this.startPromise}async startWithStateTransitions(){if(this.connectionState!==w.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this.connectionState=w.Connecting,this.logger.log(o.Debug,"Starting HubConnection.");try{await this.startInternal(),this.connectionState=w.Connected,this.connectionStarted=!0,this.logger.log(o.Debug,"HubConnection connected successfully.")}catch(e){return this.connectionState=w.Disconnected,this.logger.log(o.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async startInternal(){this.stopDuringStartError=void 0,this.receivedHandshakeResponse=!1;const e=new Promise(((e,t)=>{this.handshakeResolver=e,this.handshakeRejecter=t}));await this.connection.start(this.protocol.transferFormat);try{const t={protocol:this.protocol.name,version:this.protocol.version};if(this.logger.log(o.Debug,"Sending handshake request."),await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(t)),this.logger.log(o.Information,`Using HubProtocol '${this.protocol.name}'.`),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),await e,this.stopDuringStartError)throw this.stopDuringStartError}catch(e){throw this.logger.log(o.Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this.cleanupTimeout(),this.cleanupPingTimer(),await this.connection.stop(e),e}}async stop(){const e=this.startPromise;this.stopPromise=this.stopInternal(),await this.stopPromise;try{await e}catch(e){}}stopInternal(e){return this.connectionState===w.Disconnected?(this.logger.log(o.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve()):this.connectionState===w.Disconnecting?(this.logger.log(o.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this.stopPromise):(this.connectionState=w.Disconnecting,this.logger.log(o.Debug,"Stopping HubConnection."),this.reconnectDelayHandle?(this.logger.log(o.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this.reconnectDelayHandle),this.reconnectDelayHandle=void 0,this.completeClose(),Promise.resolve()):(this.cleanupTimeout(),this.cleanupPingTimer(),this.stopDuringStartError=e||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))}stream(e,...t){const[n,s]=this.replaceStreamingParams(t),o=this.createStreamInvocation(e,t,s);let i;const r=new v;return r.cancelCallback=()=>{const e=this.createCancelInvocation(o.invocationId);return delete this.callbacks[o.invocationId],i.then((()=>this.sendWithProtocol(e)))},this.callbacks[o.invocationId]=(e,t)=>{t?r.error(t):e&&(e.type===m.Completion?e.error?r.error(new Error(e.error)):r.complete():r.next(e.item))},i=this.sendWithProtocol(o).catch((e=>{r.error(e),delete this.callbacks[o.invocationId]})),this.launchStreams(n,i),r}sendMessage(e){return this.resetKeepAliveInterval(),this.connection.send(e)}sendWithProtocol(e){return this.sendMessage(this.protocol.writeMessage(e))}send(e,...t){const[n,s]=this.replaceStreamingParams(t),o=this.sendWithProtocol(this.createInvocation(e,t,!0,s));return this.launchStreams(n,o),o}invoke(e,...t){const[n,s]=this.replaceStreamingParams(t),o=this.createInvocation(e,t,!1,s);return new Promise(((e,t)=>{this.callbacks[o.invocationId]=(n,s)=>{s?t(s):n&&(n.type===m.Completion?n.error?t(new Error(n.error)):e(n.result):t(new Error(`Unexpected message type: ${n.type}`)))};const s=this.sendWithProtocol(o).catch((e=>{t(e),delete this.callbacks[o.invocationId]}));this.launchStreams(n,s)}))}on(e,t){e&&t&&(e=e.toLowerCase(),this.methods[e]||(this.methods[e]=[]),-1===this.methods[e].indexOf(t)&&this.methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this.methods[e];if(n)if(t){const s=n.indexOf(t);-1!==s&&(n.splice(s,1),0===n.length&&delete this.methods[e])}else delete this.methods[e]}onclose(e){e&&this.closedCallbacks.push(e)}onreconnecting(e){e&&this.reconnectingCallbacks.push(e)}onreconnected(e){e&&this.reconnectedCallbacks.push(e)}processIncomingData(e){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(e=this.processHandshakeResponse(e),this.receivedHandshakeResponse=!0),e){const t=this.protocol.parseMessages(e,this.logger);for(const e of t)switch(e.type){case m.Invocation:this.invokeClientMethod(e);break;case m.StreamItem:case m.Completion:const t=this.callbacks[e.invocationId];t&&(e.type===m.Completion&&delete this.callbacks[e.invocationId],t(e));break;case m.Ping:break;case m.Close:this.logger.log(o.Information,"Close message received from server.");const n=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(n):this.stopPromise=this.stopInternal(n);break;default:this.logger.log(o.Warning,`Invalid message type: ${e.type}.`)}}this.resetTimeoutPeriod()}processHandshakeResponse(e){let t,n;try{[n,t]=this.handshakeProtocol.parseHandshakeResponse(e)}catch(e){const t="Error parsing handshake response: "+e;this.logger.log(o.Error,t);const n=new Error(t);throw this.handshakeRejecter(n),n}if(t.error){const e="Server returned handshake error: "+t.error;this.logger.log(o.Error,e);const n=new Error(e);throw this.handshakeRejecter(n),n}return this.logger.log(o.Debug,"Server handshake complete."),this.handshakeResolver(),n}resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this.cleanupPingTimer(),this.pingServerHandle=setTimeout((async()=>{if(this.connectionState===w.Connected)try{await this.sendMessage(this.cachedPingMessage)}catch{this.cleanupPingTimer()}}),this.keepAliveIntervalInMilliseconds))}resetTimeoutPeriod(){this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds))}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}invokeClientMethod(e){const t=this.methods[e.target.toLowerCase()];if(t){try{t.forEach((t=>t.apply(this,e.arguments)))}catch(t){this.logger.log(o.Error,`A callback for the method ${e.target.toLowerCase()} threw error '${t}'.`)}if(e.invocationId){const e="Server requested a response, which is not supported in this version of the client.";this.logger.log(o.Error,e),this.stopPromise=this.stopInternal(new Error(e))}}else this.logger.log(o.Warning,`No client method with the name '${e.target}' found.`)}connectionClosed(e){this.logger.log(o.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this.connectionState}.`),this.stopDuringStartError=this.stopDuringStartError||e||new Error("The underlying connection was closed before the hub handshake could complete."),this.handshakeResolver&&this.handshakeResolver(),this.cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this.cleanupTimeout(),this.cleanupPingTimer(),this.connectionState===w.Disconnecting?this.completeClose(e):this.connectionState===w.Connected&&this.reconnectPolicy?this.reconnect(e):this.connectionState===w.Connected&&this.completeClose(e)}completeClose(e){if(this.connectionStarted){this.connectionState=w.Disconnected,this.connectionStarted=!1;try{this.closedCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this.logger.log(o.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async reconnect(e){const t=Date.now();let n=0,s=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),i=this.getNextRetryDelay(n++,0,s);if(null===i)return this.logger.log(o.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this.completeClose(e);if(this.connectionState=w.Reconnecting,e?this.logger.log(o.Information,`Connection reconnecting because of error '${e}'.`):this.logger.log(o.Information,"Connection reconnecting."),this.onreconnecting){try{this.reconnectingCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this.logger.log(o.Error,`An onreconnecting callback called with error '${e}' threw error '${t}'.`)}if(this.connectionState!==w.Reconnecting)return void this.logger.log(o.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==i;){if(this.logger.log(o.Information,`Reconnect attempt number ${n} will start in ${i} ms.`),await new Promise((e=>{this.reconnectDelayHandle=setTimeout(e,i)})),this.reconnectDelayHandle=void 0,this.connectionState!==w.Reconnecting)return void this.logger.log(o.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this.startInternal(),this.connectionState=w.Connected,this.logger.log(o.Information,"HubConnection reconnected successfully."),this.onreconnected)try{this.reconnectedCallbacks.forEach((e=>e.apply(this,[this.connection.connectionId])))}catch(e){this.logger.log(o.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this.logger.log(o.Information,`Reconnect attempt failed because of error '${e}'.`),this.connectionState!==w.Reconnecting)return void this.logger.log(o.Debug,"Connection left the reconnecting state during reconnect attempt. Done reconnecting.");s=e instanceof Error?e:new Error(e.toString()),i=this.getNextRetryDelay(n++,Date.now()-t,s)}}this.logger.log(o.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this.completeClose()}getNextRetryDelay(e,t,n){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(n){return this.logger.log(o.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${n}'.`),null}}cancelCallbacksWithError(e){const t=this.callbacks;this.callbacks={},Object.keys(t).forEach((n=>{(0,t[n])(null,e)}))}cleanupPingTimer(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)}cleanupTimeout(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)}createInvocation(e,t,n,s){if(n)return 0!==s.length?{arguments:t,streamIds:s,target:e,type:m.Invocation}:{arguments:t,target:e,type:m.Invocation};{const n=this.invocationId;return this.invocationId++,0!==s.length?{arguments:t,invocationId:n.toString(),streamIds:s,target:e,type:m.Invocation}:{arguments:t,invocationId:n.toString(),target:e,type:m.Invocation}}}launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then((()=>this.sendWithProtocol(this.createCompletionMessage(n))))},error:e=>{let s;s=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then((()=>this.sendWithProtocol(this.createCompletionMessage(n,s))))},next:e=>{t=t.then((()=>this.sendWithProtocol(this.createStreamItemMessage(n,e))))}})}}replaceStreamingParams(e){const t=[],n=[];for(let s=0;s<e.length;s++){const o=e[s];if(this.isObservable(o)){const i=this.invocationId;this.invocationId++,t[i]=o,n.push(i.toString()),e.splice(s,1)}}return[t,n]}isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}createStreamInvocation(e,t,n){const s=this.invocationId;return this.invocationId++,0!==n.length?{arguments:t,invocationId:s.toString(),streamIds:n,target:e,type:m.StreamInvocation}:{arguments:t,invocationId:s.toString(),target:e,type:m.StreamInvocation}}createCancelInvocation(e){return{invocationId:e,type:m.CancelInvocation}}createStreamItemMessage(e,t){return{invocationId:e,item:t,type:m.StreamItem}}createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:m.Completion}:{invocationId:e,result:n,type:m.Completion}}}const b=[0,2e3,1e4,3e4,null];class C{constructor(e){this.retryDelays=void 0!==e?[...e,null]:b}nextRetryDelayInMilliseconds(e){return this.retryDelays[e.previousRetryCount]}}class I extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.statusCode=t,this.__proto__=n}}class S extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class E extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class D{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class k{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}}class P extends k{constructor(e){if(super(),this.logger=e,"undefined"==typeof fetch){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;this.jar=new(e("tough-cookie").CookieJar),this.fetchType=e("node-fetch"),this.fetchType=e("fetch-cookie")(this.fetchType,this.jar),this.abortControllerType=e("abort-controller")}else this.fetchType=fetch.bind(self),this.abortControllerType=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new E;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this.abortControllerType;let n;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),n=new E});let s,i=null;if(e.timeout){const s=e.timeout;i=setTimeout((()=>{t.abort(),this.logger.log(o.Warning,"Timeout from HTTP request."),n=new S}),s)}try{s=await this.fetchType(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"manual",signal:t.signal})}catch(e){if(n)throw n;throw this.logger.log(o.Warning,`Error from HTTP request. ${e}.`),e}finally{i&&clearTimeout(i),e.abortSignal&&(e.abortSignal.onabort=null)}if(!s.ok)throw new I(s.statusText,s.status);const r=function(e,t){let n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":n=e.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`);default:n=e.text()}return n}(s,e.responseType),a=await r;return new D(s.status,s.statusText,a)}}class T extends k{constructor(e){super(),this.logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new E):e.method?e.url?new Promise(((t,n)=>{const s=new XMLHttpRequest;s.open(e.method,e.url,!0),s.withCredentials=void 0===e.withCredentials||e.withCredentials,s.setRequestHeader("X-Requested-With","XMLHttpRequest"),s.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const i=e.headers;i&&Object.keys(i).forEach((e=>{s.setRequestHeader(e,i[e])})),e.responseType&&(s.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{s.abort(),n(new E)}),e.timeout&&(s.timeout=e.timeout),s.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),s.status>=200&&s.status<300?t(new D(s.status,s.statusText,s.response||s.responseText)):n(new I(s.statusText,s.status))},s.onerror=()=>{this.logger.log(o.Warning,`Error from HTTP request. ${s.status}: ${s.statusText}.`),n(new I(s.statusText,s.status))},s.ontimeout=()=>{this.logger.log(o.Warning,"Timeout from HTTP request."),n(new S)},s.send(e.content||"")})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class A extends k{constructor(e){if(super(),"undefined"!=typeof fetch)this.httpClient=new P(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this.httpClient=new T(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new E):e.method?e.url?this.httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}var $,R;!function(e){e[e.None=0]="None",e[e.WebSockets=1]="WebSockets",e[e.ServerSentEvents=2]="ServerSentEvents",e[e.LongPolling=4]="LongPolling"}($||($={})),function(e){e[e.Text=1]="Text",e[e.Binary=2]="Binary"}(R||(R={}));class L{constructor(){this.isAborted=!1,this.onabort=null}abort(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this.isAborted}}class _{constructor(e,t,n,s,o,i){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.pollAbort=new L,this.logMessageContent=s,this.withCredentials=o,this.headers=i,this.running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this.pollAbort.aborted}async connect(e,t){if(r.isRequired(e,"url"),r.isRequired(t,"transferFormat"),r.isIn(t,R,"transferFormat"),this.url=e,this.logger.log(o.Trace,"(LongPolling transport) Connecting."),t===R.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,s]=g(),i={[n]:s,...this.headers},a={abortSignal:this.pollAbort.signal,headers:i,timeout:1e5,withCredentials:this.withCredentials};t===R.Binary&&(a.responseType="arraybuffer");const c=await this.getAccessToken();this.updateHeaderToken(a,c);const h=`${e}&_=${Date.now()}`;this.logger.log(o.Trace,`(LongPolling transport) polling: ${h}.`);const l=await this.httpClient.get(h,a);200!==l.statusCode?(this.logger.log(o.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this.closeError=new I(l.statusText||"",l.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,a)}async getAccessToken(){return this.accessTokenFactory?await this.accessTokenFactory():null}updateHeaderToken(e,t){e.headers||(e.headers={}),t?e.headers.Authorization=`Bearer ${t}`:e.headers.Authorization&&delete e.headers.Authorization}async poll(e,t){try{for(;this.running;){const n=await this.getAccessToken();this.updateHeaderToken(t,n);try{const n=`${e}&_=${Date.now()}`;this.logger.log(o.Trace,`(LongPolling transport) polling: ${n}.`);const s=await this.httpClient.get(n,t);204===s.statusCode?(this.logger.log(o.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==s.statusCode?(this.logger.log(o.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this.closeError=new I(s.statusText||"",s.statusCode),this.running=!1):s.content?(this.logger.log(o.Trace,`(LongPolling transport) data received. ${c(s.content,this.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this.logger.log(o.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(e){this.running?e instanceof S?this.logger.log(o.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=e,this.running=!1):this.logger.log(o.Trace,`(LongPolling transport) Poll errored after shutdown: ${e.message}`)}}}finally{this.logger.log(o.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose()}}async send(e){return this.running?l(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,e,this.logMessageContent,this.withCredentials,this.headers):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this.logger.log(o.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort();try{await this.receiving,this.logger.log(o.Trace,`(LongPolling transport) sending DELETE request to ${this.url}.`);const e={},[t,n]=g();e[t]=n;const s={headers:{...e,...this.headers},withCredentials:this.withCredentials},i=await this.getAccessToken();this.updateHeaderToken(s,i),await this.httpClient.delete(this.url,s),this.logger.log(o.Trace,"(LongPolling transport) DELETE request sent.")}finally{this.logger.log(o.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose()}}raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this.closeError&&(e+=" Error: "+this.closeError),this.logger.log(o.Trace,e),this.onclose(this.closeError)}}}class x{constructor(e,t,n,s,o,i,r){this.httpClient=e,this.accessTokenFactory=t,this.logger=n,this.logMessageContent=s,this.withCredentials=i,this.eventSourceConstructor=o,this.headers=r,this.onreceive=null,this.onclose=null}async connect(e,t){if(r.isRequired(e,"url"),r.isRequired(t,"transferFormat"),r.isIn(t,R,"transferFormat"),this.logger.log(o.Trace,"(SSE transport) Connecting."),this.url=e,this.accessTokenFactory){const t=await this.accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((n,s)=>{let i,r=!1;if(t===R.Text){if(a.isBrowser||a.isWebWorker)i=new this.eventSourceConstructor(e,{withCredentials:this.withCredentials});else{const t={},[n,s]=g();t[n]=s,i=new this.eventSourceConstructor(e,{withCredentials:this.withCredentials,headers:{...t,...this.headers}})}try{i.onmessage=e=>{if(this.onreceive)try{this.logger.log(o.Trace,`(SSE transport) data received. ${c(e.data,this.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this.close(e)}},i.onerror=e=>{const t=new Error(e.data||"Error occurred");r?this.close(t):s(t)},i.onopen=()=>{this.logger.log(o.Information,`SSE connected to ${this.url}`),this.eventSource=i,r=!0,n()}}catch(e){return void s(e)}}else s(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this.eventSource?l(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,e,this.logMessageContent,this.withCredentials,this.headers):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this.close(),Promise.resolve()}close(e){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(e))}}class U{constructor(e,t,n,s){this.logger=t,this.accessTokenFactory=e,this.logMessageContent=n,this.webSocketConstructor=s,this.onreceive=null,this.onclose=null}async connect(e,t){if(r.isRequired(e,"url"),r.isRequired(t,"transferFormat"),r.isIn(t,R,"transferFormat"),this.logger.log(o.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory){const t=await this.accessTokenFactory();t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`)}return new Promise(((n,s)=>{let i;e=e.replace(/^http/,"ws");let r=!1;i||(i=new this.webSocketConstructor(e)),t===R.Binary&&(i.binaryType="arraybuffer"),i.onopen=t=>{this.logger.log(o.Information,`WebSocket connected to ${e}.`),this.webSocket=i,r=!0,n()},i.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),s(t)},i.onmessage=e=>{if(this.logger.log(o.Trace,`(WebSockets transport) data received. ${c(e.data,this.logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(e){return void this.close(e)}},i.onclose=e=>{if(r)this.close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:new Error("There was an error with the transport."),s(t)}}}))}send(e){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(o.Trace,`(WebSockets transport) sending data. ${c(e,this.logMessageContent)}.`),this.webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this.webSocket&&this.close(void 0),Promise.resolve()}close(e){this.webSocket&&(this.webSocket.onclose=()=>{},this.webSocket.onmessage=()=>{},this.webSocket.onerror=()=>{},this.webSocket.close(),this.webSocket=void 0),this.logger.log(o.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this.isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason}).`)))}isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class M{constructor(e,t={}){var n;if(this.features={},this.negotiateVersion=1,r.isRequired(e,"url"),this.logger=void 0===(n=t.logger)?new u(o.Information):null===n?i.instance:n.log?n:new u(n),this.baseUrl=this.resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials,"undefined"==typeof WebSocket||t.WebSocket||(t.WebSocket=WebSocket),"undefined"==typeof EventSource||t.EventSource||(t.EventSource=EventSource),this.httpClient=t.httpClient||new A(this.logger),this.connectionState="Disconnected",this.connectionStarted=!1,this.options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||R.Binary,r.isIn(e,R,"transferFormat"),this.logger.log(o.Debug,`Starting connection with transfer format '${R[e]}'.`),"Disconnected"!==this.connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this.connectionState="Connecting",this.startInternalPromise=this.startInternal(e),await this.startInternalPromise,"Disconnecting"===this.connectionState){const e="Failed to start the HttpConnection before stop() was called.";return this.logger.log(o.Error,e),await this.stopPromise,Promise.reject(new Error(e))}if("Connected"!==this.connectionState){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this.logger.log(o.Error,e),Promise.reject(new Error(e))}this.connectionStarted=!0}send(e){return"Connected"!==this.connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this.sendQueue||(this.sendQueue=new O(this.transport)),this.sendQueue.send(e))}async stop(e){return"Disconnected"===this.connectionState?(this.logger.log(o.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this.connectionState?(this.logger.log(o.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this.stopPromise):(this.connectionState="Disconnecting",this.stopPromise=new Promise((e=>{this.stopPromiseResolver=e})),await this.stopInternal(e),void await this.stopPromise)}async stopInternal(e){this.stopError=e;try{await this.startInternalPromise}catch(e){}if(this.transport){try{await this.transport.stop()}catch(e){this.logger.log(o.Error,`HttpConnection.transport.stop() threw error '${e}'.`),this.stopConnection()}this.transport=void 0}else this.logger.log(o.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."),this.stopConnection()}async startInternal(e){let t=this.baseUrl;this.accessTokenFactory=this.options.accessTokenFactory;try{if(this.options.skipNegotiation){if(this.options.transport!==$.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this.constructTransport($.WebSockets),await this.startTransport(t,e)}else{let n=null,s=0;do{if(n=await this.getNegotiationResponse(t),"Disconnecting"===this.connectionState||"Disconnected"===this.connectionState)throw new Error("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const e=n.accessToken;this.accessTokenFactory=()=>e}s++}while(n.url&&s<100);if(100===s&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this.createTransport(t,this.options.transport,n,e)}this.transport instanceof _&&(this.features.inherentKeepAlive=!0),"Connecting"===this.connectionState&&(this.logger.log(o.Debug,"The HttpConnection connected successfully."),this.connectionState="Connected")}catch(e){return this.logger.log(o.Error,"Failed to start the connection: "+e),this.connectionState="Disconnected",this.transport=void 0,Promise.reject(e)}}async getNegotiationResponse(e){const t={};if(this.accessTokenFactory){const e=await this.accessTokenFactory();e&&(t.Authorization=`Bearer ${e}`)}const[n,s]=g();t[n]=s;const i=this.resolveNegotiateUrl(e);this.logger.log(o.Debug,`Sending negotiation request: ${i}.`);try{const e=await this.httpClient.post(i,{content:"",headers:{...t,...this.options.headers},withCredentials:this.options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const n=JSON.parse(e.content);return(!n.negotiateVersion||n.negotiateVersion<1)&&(n.connectionToken=n.connectionId),n}catch(e){return this.logger.log(o.Error,"Failed to complete negotiation with the server: "+e),Promise.reject(e)}}createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async createTransport(e,t,n,s){let i=this.createConnectUrl(e,n.connectionToken);if(this.isITransport(t))return this.logger.log(o.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this.startTransport(i,s),void(this.connectionId=n.connectionId);const r=[],a=n.availableTransports||[];let c=n;for(const n of a){const a=this.resolveTransportOrError(n,t,s);if(a instanceof Error)r.push(`${n.transport} failed: ${a}`);else if(this.isITransport(a)){if(this.transport=a,!c){try{c=await this.getNegotiationResponse(e)}catch(e){return Promise.reject(e)}i=this.createConnectUrl(e,c.connectionToken)}try{return await this.startTransport(i,s),void(this.connectionId=c.connectionId)}catch(e){if(this.logger.log(o.Error,`Failed to start the transport '${n.transport}': ${e}`),c=void 0,r.push(`${n.transport} failed: ${e}`),"Connecting"!==this.connectionState){const e="Failed to select transport before stop() was called.";return this.logger.log(o.Debug,e),Promise.reject(new Error(e))}}}}return r.length>0?Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${r.join(" ")}`)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}constructTransport(e){switch(e){case $.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new U(this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket);case $.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new x(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource,this.options.withCredentials,this.options.headers||{});case $.LongPolling:return new _(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.withCredentials,this.options.headers||{});default:throw new Error(`Unknown transport: ${e}.`)}}startTransport(e,t){return this.transport.onreceive=this.onreceive,this.transport.onclose=e=>this.stopConnection(e),this.transport.connect(e,t)}resolveTransportOrError(e,t,n){const s=$[e.transport];if(null==s)return this.logger.log(o.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!=(t&e)}(t,s))return this.logger.log(o.Debug,`Skipping transport '${$[s]}' because it was disabled by the client.`),new Error(`'${$[s]}' is disabled by the client.`);if(!(e.transferFormats.map((e=>R[e])).indexOf(n)>=0))return this.logger.log(o.Debug,`Skipping transport '${$[s]}' because it does not support the requested transfer format '${R[n]}'.`),new Error(`'${$[s]}' does not support ${R[n]}.`);if(s===$.WebSockets&&!this.options.WebSocket||s===$.ServerSentEvents&&!this.options.EventSource)return this.logger.log(o.Debug,`Skipping transport '${$[s]}' because it is not supported in your environment.'`),new Error(`'${$[s]}' is not supported in your environment.`);this.logger.log(o.Debug,`Selecting transport '${$[s]}'.`);try{return this.constructTransport(s)}catch(e){return e}}isITransport(e){return e&&"object"==typeof e&&"connect"in e}stopConnection(e){if(this.logger.log(o.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this.connectionState}.`),this.transport=void 0,e=this.stopError||e,this.stopError=void 0,"Disconnected"!==this.connectionState){if("Connecting"===this.connectionState)throw this.logger.log(o.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this.connectionState&&this.stopPromiseResolver(),e?this.logger.log(o.Error,`Connection disconnected with error '${e}'.`):this.logger.log(o.Information,"Connection disconnected."),this.sendQueue&&(this.sendQueue.stop().catch((e=>{this.logger.log(o.Error,`TransportSendQueue.stop() threw error '${e}'.`)})),this.sendQueue=void 0),this.connectionId=void 0,this.connectionState="Disconnected",this.connectionStarted){this.connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this.logger.log(o.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this.logger.log(o.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!a.isBrowser||!window.document)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this.logger.log(o.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}resolveNegotiateUrl(e){const t=e.indexOf("?");let n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",n+=-1===t?"":e.substring(t),-1===n.indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this.negotiateVersion),n}}class O{constructor(e){this.transport=e,this.buffer=[],this.executing=!0,this.sendBufferedData=new H,this.transportResult=new H,this.sendLoopPromise=this.sendLoop()}send(e){return this.bufferData(e),this.transportResult||(this.transportResult=new H),this.transportResult.promise}stop(){return this.executing=!1,this.sendBufferedData.resolve(),this.sendLoopPromise}bufferData(e){if(this.buffer.length&&typeof this.buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this.buffer} but was of type ${typeof e}`);this.buffer.push(e),this.sendBufferedData.resolve()}async sendLoop(){for(;;){if(await this.sendBufferedData.promise,!this.executing){this.transportResult&&this.transportResult.reject("Connection stopped.");break}this.sendBufferedData=new H;const e=this.transportResult;this.transportResult=void 0;const t="string"==typeof this.buffer[0]?this.buffer.join(""):O.concatBuffers(this.buffer);this.buffer.length=0;try{await this.transport.send(t),e.resolve()}catch(t){e.reject(t)}}}static concatBuffers(e){const t=e.map((e=>e.byteLength)).reduce(((e,t)=>e+t)),n=new Uint8Array(t);let s=0;for(const t of e)n.set(new Uint8Array(t),s),s+=t.byteLength;return n.buffer}}class H{constructor(){this.promise=new Promise(((e,t)=>[this.resolver,this.rejecter]=[e,t]))}resolve(){this.resolver()}reject(e){this.rejecter(e)}}class j{constructor(){this.name="json",this.version=1,this.transferFormat=R.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=i.instance);const n=s.parse(e),r=[];for(const e of n){const n=JSON.parse(e);if("number"!=typeof n.type)throw new Error("Invalid payload.");switch(n.type){case m.Invocation:this.isInvocationMessage(n);break;case m.StreamItem:this.isStreamItemMessage(n);break;case m.Completion:this.isCompletionMessage(n);break;case m.Ping:case m.Close:break;default:t.log(o.Information,"Unknown message type '"+n.type+"' ignored.");continue}r.push(n)}return r}writeMessage(e){return s.write(JSON.stringify(e))}isInvocationMessage(e){this.assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this.assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}isStreamItemMessage(e){if(this.assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this.assertNotEmptyString(e.error,"Invalid payload for Completion message."),this.assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const N={trace:o.Trace,debug:o.Debug,info:o.Information,information:o.Information,warn:o.Warning,warning:o.Warning,error:o.Error,critical:o.Critical,none:o.None};class W{configureLogging(e){if(r.isRequired(e,"logging"),void 0!==e.log)this.logger=e;else if("string"==typeof e){const t=function(e){const t=N[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new u(t)}else this.logger=new u(e);return this}withUrl(e,t){return r.isRequired(e,"url"),r.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return r.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new C(e):this.reconnectPolicy=e:this.reconnectPolicy=new C,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new M(this.url,e);return y.create(t,this.logger||i.instance,this.protocol||new j,this.reconnectPolicy)}}function V(e){return new Promise((t=>{const n=setInterval((()=>{e()&&(clearInterval(n),t())}),100)}))}class q{constructor(e,t,n=null){this.value=e,this.desc=t,this.value=e,this.desc=t,this.props=n||{}}contains(e){return e instanceof q?this.contains(e.value):this.value.indexOf(e)>=0}}class F extends Event{constructor(e){super(e),this.eventType=e}}class B extends F{constructor(e,t){super(e),this.id=t}}var z,J,X;!function(e){e.Audio="audio",e.Video="video"}(z||(z={})),function(e){e.Added="added",e.Removed="removed",e.Changed="changed"}(J||(J={}));class Q extends B{constructor(e,t,n,s,o,i,r,a,c,h,l){super(e,t),this.px=n,this.py=s,this.pz=o,this.fx=i,this.fy=r,this.fz=a,this.ux=c,this.uy=h,this.uz=l}set(e,t,n,s,o,i,r,a,c){this.px=e,this.py=t,this.pz=n,this.fx=s,this.fy=o,this.fz=i,this.ux=r,this.uy=a,this.uz=c}}class K extends Q{constructor(e,t,n,s,o,i,r,a,c,h){super("userPosed",e,t,n,s,o,i,r,a,c,h)}}class G extends Q{constructor(e,t,n,s,o,i,r,a,c,h,l){super("userPointer",e,n,s,o,i,r,a,c,h,l),this.name=t}}class Y extends B{constructor(e,t,n){super(e,t),this.emoji=n instanceof q?n.value:n}}class Z extends Y{constructor(e,t){super("emote",e,t)}}class ee extends Y{constructor(e,t){super("setAvatarEmoji",e,t)}}class te extends B{constructor(e,t){super("avatarChanged",e),this.url=t}}class ne extends B{constructor(e,t){super("chat",e),this.text=t}}!function(e){e.Disconnected="Disconnected",e.Connecting="Connecting",e.Connected="Connected",e.Disconnecting="Disconnecting"}(X||(X={}));class se extends class{constructor(){this.listeners=new Map,this.listenerOptions=new Map}addEventListener(e,n,s){if(t(n)){let t=this.listeners.get(e);t||(t=new Array,this.listeners.set(e,t)),t.find((e=>e===n))||(t.push(n),s&&this.listenerOptions.set(n,s))}}removeEventListener(e,n){if(t(n)){const t=this.listeners.get(e);t&&this.removeListener(t,n)}}removeListener(e,t){const n=e.findIndex((e=>e===t));n>=0&&(!function(e,t){e.splice(t,1)[0]}(e,n),this.listenerOptions.has(t)&&this.listenerOptions.delete(t))}dispatchEvent(e){const t=this.listeners.get(e.type);if(t)for(const n of t){const s=this.listenerOptions.get(n);s&&s.once&&this.removeListener(t,n),n.call(this,e)}return!e.defaultPrevented}}{constructor(){super(...arguments),this.mappedCallbacks=new Map}addEventListener(e,t,n){let s=this.mappedCallbacks.get(t);null==s&&(s=e=>t(e),this.mappedCallbacks.set(t,s)),super.addEventListener(e,s,n)}removeEventListener(e,t){const n=this.mappedCallbacks.get(t);n&&super.removeEventListener(e,n)}}class oe extends se{constructor(e){super(),this.sleepTime=e,this.tasks=new Map}async getNext(e,t){return new Promise((n=>{const s=o=>{o instanceof B&&o.id===t&&(this.removeEventListener(e,s),n(o))};this.addEventListener(e,s)}))}get isConnected(){return this.metadataState===X.Connected}async callThrottled(e,t,...n){if(!this.tasks.has(e)){const o=performance.now(),i=this.callInternal(t,...n);this.tasks.set(e,i),await i;const r=performance.now()-o;this.sleepTime-r>0&&await(s=this.sleepTime,new Promise((e=>{setTimeout(e,s)}))),this.tasks.delete(e)}var s}async callImmediate(e,...t){await this.callInternal(e,...t)}setLocalPose(e,t,n,s,o,i,r,a,c){this.callThrottled("userPosed","userPosed",e,t,n,s,o,i,r,a,c)}setLocalPoseImmediate(e,t,n,s,o,i,r,a,c){this.callImmediate("userPosed",e,t,n,s,o,i,r,a,c)}setLocalPointer(e,t,n,s,o,i,r,a,c,h){this.callThrottled("userPointer"+e,"userPointer",e,t,n,s,o,i,r,a,c,h)}setAvatarEmoji(e){this.callImmediate("setAvatarEmoji",e)}setAvatarURL(e){this.callImmediate("avatarChanged",e)}emote(e){this.callImmediate("emote",e)}chat(e){this.callImmediate("chat",e)}}function ie(e,...t){for(const n of t)for(const t of e)if(n(t))return t;return null}const re="calla:preferredAudioOutputID",ae="calla:preferredAudioInputID",ce="calla:preferredVideoInputID",he="local-user";let le="localhost"===window.location.hostname||/\bdebug\b/.test(window.location.search);class de extends Event{constructor(){super("audioActivity"),this.id=null,this.isActive=!1,Object.seal(this)}set(e,t){this.id=e,this.isActive=t}}var ue;!function(e){e.InConference="in-conference",e.JoiningConference="joining-conference",e.Connected="connected",e.Connecting="connecting",e.Prepaired="prepaired",e.Prepairing="prepairing",e.Unprepared="unprepaired"}(ue||(ue={}));const ge=new de;var pe="1.0.0";return console.info("Calla v1.0.0."),e.BaseMetadataClient=oe,e.BaseTeleconferenceClient=class extends se{constructor(e,t,n=!0,s=!1){super(),this.needsAudioDevice=n,this.needsVideoDevice=s,this.localUserID=null,this.localUserName=null,this.roomName=null,this._connectionState=X.Disconnected,this._conferenceState=X.Disconnected,this.hasAudioPermission=!1,this.hasVideoPermission=!1,this.fetcher=e,this.audio=t,this.addEventListener("serverConnected",this.setConnectionState.bind(this,X.Connected)),this.addEventListener("serverFailed",this.setConnectionState.bind(this,X.Disconnected)),this.addEventListener("serverDisconnected",this.setConnectionState.bind(this,X.Disconnected)),this.addEventListener("conferenceJoined",this.setConferenceState.bind(this,X.Connected)),this.addEventListener("conferenceFailed",this.setConferenceState.bind(this,X.Disconnected)),this.addEventListener("conferenceRestored",this.setConferenceState.bind(this,X.Connected)),this.addEventListener("conferenceLeft",this.setConferenceState.bind(this,X.Disconnected))}toggleLogging(){le=!le}get connectionState(){return this._connectionState}setConnectionState(e){this._connectionState=e}get conferenceState(){return this._conferenceState}setConferenceState(e){this._conferenceState=e}dispatchEvent(e){return e instanceof B&&(null==e.id||"local"===e.id)&&(this.localUserID===he?e.id=null:e.id=this.localUserID),super.dispatchEvent(e)}async getNext(e,t){return new Promise((n=>{const s=o=>{o instanceof B&&o.id===t&&(this.removeEventListener(e,s),n(o))};this.addEventListener(e,s)}))}get preferredAudioInputID(){return localStorage.getItem(ae)}set preferredAudioInputID(e){localStorage.setItem(ae,e)}get preferredVideoInputID(){return localStorage.getItem(ce)}set preferredVideoInputID(e){localStorage.setItem(ce,e)}async setPreferredDevices(){await this.setPreferredAudioInput(!0),await this.setPreferredVideoInput(!1),await this.setPreferredAudioOutput(!0)}async getPreferredAudioInput(e){return ie(await this.getAudioInputDevices(),(e=>e.deviceId===this.preferredAudioInputID),(e=>"communications"===e.deviceId),(e=>"default"===e.deviceId),(t=>e&&t.deviceId.length>0))}async setPreferredAudioInput(e){const t=await this.getPreferredAudioInput(e);t&&await this.setAudioInputDevice(t)}async getPreferredVideoInput(e){return ie(await this.getVideoInputDevices(),(e=>e.deviceId===this.preferredVideoInputID),(t=>e&&t&&/front/i.test(t.label)),(t=>e&&t.deviceId.length>0))}async setPreferredVideoInput(e){const t=await this.getPreferredVideoInput(e);t&&await this.setVideoInputDevice(t)}async getDevices(){let e=null;for(let t=0;t<3;++t){e=await navigator.mediaDevices.enumerateDevices();for(const t of e)t.deviceId.length>0&&(this.hasAudioPermission=this.hasAudioPermission||"audioinput"===t.kind&&t.label.length>0,this.hasVideoPermission=this.hasVideoPermission||"videoinput"===t.kind&&t.label.length>0);if(this.hasAudioPermission)break;try{await navigator.mediaDevices.getUserMedia({audio:this.needsAudioDevice&&!this.hasAudioPermission,video:this.needsVideoDevice&&!this.hasVideoPermission})}catch(e){console.warn(e)}}return e||[]}async getMediaPermissions(){return await this.getDevices(),{audio:this.hasAudioPermission,video:this.hasVideoPermission}}async getAvailableDevices(e=!1){let t=await this.getDevices();return e&&(t=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n];let o=!1;for(let e=0;e<t.length&&!o;++e){const n=t[e];o=s.kind===n.kind&&n.label.indexOf(s.label)>0}o||t.push(s)}return t}(t)),{audioOutput:n?t.filter((e=>"audiooutput"===e.kind)):[],audioInput:t.filter((e=>"audioinput"===e.kind)),videoInput:t.filter((e=>"videoinput"===e.kind))}}async getAudioInputDevices(e=!1){const t=await this.getAvailableDevices(e);return t&&t.audioInput||[]}async getVideoInputDevices(e=!1){const t=await this.getAvailableDevices(e);return t&&t.videoInput||[]}async setAudioOutputDevice(e){n&&(this.preferredAudioOutputID=e&&e.deviceId||null)}async getAudioOutputDevices(e=!1){if(!n)return[];const t=await this.getAvailableDevices(e);return t&&t.audioOutput||[]}async getCurrentAudioOutputDevice(){if(!n)return null;const e=this.audio.getAudioOutputDeviceID(),t=(await this.getAudioOutputDevices()).filter((t=>null!=e&&t.deviceId===e||null==e&&t.deviceId===this.preferredAudioOutputID));return 0===t.length?null:t[0]}get preferredAudioOutputID(){return localStorage.getItem(re)}set preferredAudioOutputID(e){localStorage.setItem(re,e)}async getPreferredAudioOutput(e){return ie(await this.getAudioOutputDevices(),(e=>e.deviceId===this.preferredAudioOutputID),(e=>"communications"===e.deviceId),(e=>"default"===e.deviceId),(t=>e&&t.deviceId.length>0))}async setPreferredAudioOutput(e){const t=await this.getPreferredAudioOutput(e);t&&await this.setAudioOutputDevice(t)}async setAudioInputDevice(e){this.preferredAudioInputID=e&&e.deviceId||null}async setVideoInputDevice(e){this.preferredVideoInputID=e&&e.deviceId||null}async connect(){this.setConnectionState(X.Connecting)}async join(e,t){this.setConferenceState(X.Connecting)}async leave(){this.setConferenceState(X.Disconnecting)}async disconnect(){this.setConnectionState(X.Disconnecting)}},e.Client=class extends se{constructor(e,t,n){super(),this._fetcher=e,this._tele=t,this._meta=n,this.isAudioMuted=null,this.isVideoMuted=null;const s=this.dispatchEvent.bind(this);this._tele.addEventListener("serverConnected",s),this._tele.addEventListener("serverDisconnected",s),this._tele.addEventListener("serverFailed",s),this._tele.addEventListener("conferenceFailed",s),this._tele.addEventListener("conferenceRestored",s),this._tele.addEventListener("audioMuteStatusChanged",s),this._tele.addEventListener("videoMuteStatusChanged",s),this._tele.addEventListener("conferenceJoined",(async e=>{const t=this.audio.setLocalUserID(e.id);e.pose=t.pose,this.dispatchEvent(e),await this.setPreferredDevices()})),this._tele.addEventListener("conferenceLeft",(e=>{this.audio.setLocalUserID(e.id),this.dispatchEvent(e)})),this._tele.addEventListener("participantJoined",(async e=>{e.source=this.audio.createUser(e.id),this.dispatchEvent(e)})),this._tele.addEventListener("participantLeft",(e=>{this.dispatchEvent(e),this.audio.removeUser(e.id)})),this._tele.addEventListener("userNameChanged",s),this._tele.addEventListener("videoAdded",s),this._tele.addEventListener("videoRemoved",s),this._tele.addEventListener("audioAdded",(e=>{const t=this.audio.getUser(e.id);if(t){let n=t.streams.get(e.kind);n&&t.streams.delete(e.kind),n=e.stream,t.streams.set(e.kind,n),e.id!==this._tele.localUserID&&this.audio.setUserStream(e.id,n),this.dispatchEvent(e)}})),this._tele.addEventListener("audioRemoved",(e=>{const t=this.audio.getUser(e.id);t&&t.streams.has(e.kind)&&t.streams.delete(e.kind),e.id!==this._tele.localUserID&&this.audio.setUserStream(e.id,null),this.dispatchEvent(e)})),this._meta.addEventListener("avatarChanged",s),this._meta.addEventListener("chat",s),this._meta.addEventListener("emote",s),this._meta.addEventListener("setAvatarEmoji",s);const o=e=>{const t=this.audio.getUserOffset(e.id);t&&(e.px+=t[0],e.py+=t[1],e.pz+=t[2]),this.dispatchEvent(e)};this._meta.addEventListener("userPointer",o),this._meta.addEventListener("userPosed",(e=>{this.audio.setUserPose(e.id,e.px,e.py,e.pz,e.fx,e.fy,e.fz,e.ux,e.uy,e.uz),o(e)})),this.audio.addEventListener("audioActivity",(e=>{ge.id=e.id,ge.isActive=e.isActive,this.dispatchEvent(ge)}));const i=this.dispose.bind(this);window.addEventListener("beforeunload",i),window.addEventListener("unload",i),window.addEventListener("pagehide",i),Object.seal(this)}get connectionState(){return this._tele.connectionState}get conferenceState(){return this._tele.conferenceState}get fetcher(){return this._fetcher}get tele(){return this._tele}get meta(){return this._meta}get audio(){return this._tele.audio}get preferredAudioOutputID(){return this._tele.preferredAudioOutputID}set preferredAudioOutputID(e){this._tele.preferredAudioOutputID=e}get preferredAudioInputID(){return this._tele.preferredAudioInputID}set preferredAudioInputID(e){this._tele.preferredAudioInputID=e}get preferredVideoInputID(){return this._tele.preferredVideoInputID}set preferredVideoInputID(e){this._tele.preferredVideoInputID=e}async getCurrentAudioOutputDevice(){return await this._tele.getCurrentAudioOutputDevice()}async getMediaPermissions(){return await this._tele.getMediaPermissions()}async getAudioOutputDevices(e){return await this._tele.getAudioOutputDevices(e)}async getAudioInputDevices(e){return await this._tele.getAudioInputDevices(e)}async getVideoInputDevices(e){return await this._tele.getVideoInputDevices(e)}dispose(){this.leave(),this.disconnect()}get offsetRadius(){return this.audio.offsetRadius}set offsetRadius(e){this.audio.offsetRadius=e}setLocalPose(e,t,n,s,o,i,r,a,c){this.audio.setUserPose(this.localUserID,e,t,n,s,o,i,r,a,c,0),this._meta.setLocalPose(e,t,n,s,o,i,r,a,c)}setLocalPoseImmediate(e,t,n,s,o,i,r,a,c){this.audio.setUserPose(this.localUserID,e,t,n,s,o,i,r,a,c,0),this._meta.setLocalPoseImmediate(e,t,n,s,o,i,r,a,c)}setLocalPointer(e,t,n,s,o,i,r,a,c,h){this._meta.setLocalPointer(e,t,n,s,o,i,r,a,c,h)}setAvatarEmoji(e){this._meta.setAvatarEmoji(e)}setAvatarURL(e){this._meta.setAvatarURL(e)}emote(e){this._meta.emote(e)}chat(e){this._meta.chat(e)}async setPreferredDevices(){await this._tele.setPreferredDevices()}async setAudioInputDevice(e){await this._tele.setAudioInputDevice(e)}async setVideoInputDevice(e){await this._tele.setVideoInputDevice(e)}async getCurrentAudioInputDevice(){return await this._tele.getCurrentAudioInputDevice()}async getCurrentVideoInputDevice(){return await this._tele.getCurrentVideoInputDevice()}async toggleAudioMuted(){return await this._tele.toggleAudioMuted()}async toggleVideoMuted(){return await this._tele.toggleVideoMuted()}async getAudioMuted(){return await this._tele.getAudioMuted()}async getVideoMuted(){return await this._tele.getVideoMuted()}get metadataState(){return this._meta.metadataState}get localUserID(){return this._tele.localUserID}get localUserName(){return this._tele.localUserName}get roomName(){return this._tele.roomName}userExists(e){return this._tele.userExists(e)}getUserNames(){return this._tele.getUserNames()}async connect(){await this._tele.connect(),this._tele.connectionState===X.Connected&&await this._meta.connect()}async join(e){await this._tele.join(e),this._tele.conferenceState===X.Connected&&await this._meta.join(e)}async identify(e){await this._tele.identify(e),await this._meta.identify(this.localUserID)}async leave(){await this._meta.leave(),await this._tele.leave()}async disconnect(){await this._meta.disconnect(),await this._tele.disconnect()}update(){this.audio.update()}async setAudioOutputDevice(e){this._tele.setAudioOutputDevice(e),n&&await this.audio.setAudioOutputDeviceID(this._tele.preferredAudioOutputID)}async setAudioMuted(e){let t=this.isAudioMuted;return e!==t&&(t=await this.toggleAudioMuted()),t}async setVideoMuted(e){let t=this.isVideoMuted;return e!==t&&(t=await this.toggleVideoMuted()),t}},e.DEFAULT_LOCAL_USER_ID=he,e.SignalRMetadataClient=class extends oe{constructor(e){super(50),this.lastRoom=null,this.lastUserID=null,this.currentRoom=null,this.currentUserID=null,this.hub=(new W).withUrl(e,$.WebSockets).build(),this.hub.onclose((()=>{this.lastRoom=null,this.lastUserID=null})),this.hub.on("userPosed",((e,t,n,s,o,i,r,a,c,h)=>{this.dispatchEvent(new K(e,t,n,s,o,i,r,a,c,h))})),this.hub.on("userPointer",((e,t,n,s,o,i,r,a,c,h,l)=>{this.dispatchEvent(new G(e,t,n,s,o,i,r,a,c,h,l))})),this.hub.on("avatarChanged",((e,t)=>{this.dispatchEvent(new te(e,t))})),this.hub.on("emote",((e,t)=>{this.dispatchEvent(new Z(e,t))})),this.hub.on("setAvatarEmoji",((e,t)=>{this.dispatchEvent(new ee(e,t))})),this.hub.on("chat",((e,t)=>{this.dispatchEvent(new ne(e,t))}))}get metadataState(){switch(this.hub.state){case w.Connected:return X.Connected;case w.Connecting:case w.Reconnecting:return X.Connecting;case w.Disconnected:return X.Disconnected;case w.Disconnecting:return X.Disconnecting;default:!function(e,t){throw new Error((t||"Unexpected object: ")+e)}(this.hub.state)}}async maybeStart(){this.metadataState===X.Connecting?await V((()=>this.metadataState===X.Connected)):(this.metadataState===X.Disconnecting&&await V((()=>this.metadataState===X.Disconnected)),this.metadataState===X.Disconnected&&await this.hub.start())}async maybeJoin(){await this.maybeStart(),this.currentRoom!==this.lastRoom&&(await this.maybeLeave(),this.currentRoom&&this.isConnected&&(this.lastRoom=this.currentRoom,await this.hub.invoke("join",this.currentRoom)))}async maybeIdentify(){await this.maybeJoin(),this.currentUserID&&this.currentUserID!==this.lastUserID&&this.isConnected&&(this.lastUserID=this.currentUserID,await this.hub.invoke("identify",this.currentUserID))}async maybeLeave(){this.isConnected&&await this.hub.invoke("leave")}async maybeDisconnect(){this.metadataState===X.Disconnecting?await V((()=>this.metadataState===X.Disconnected)):(this.metadataState===X.Connecting&&await V((()=>this.metadataState===X.Connected)),this.metadataState===X.Connected&&await this.hub.stop())}async connect(){await this.maybeStart()}async join(e){this.currentRoom=e,await this.maybeJoin()}async identify(e){this.currentUserID=e,await this.maybeJoin(),await this.maybeIdentify()}async leave(){await this.maybeLeave(),this.currentUserID=this.lastUserID=this.currentRoom=this.lastRoom=null}async disconnect(){await this.maybeDisconnect(),this.currentUserID=this.lastUserID=this.currentRoom=this.lastRoom=null}async callInternal(e,t,...n){await this.maybeIdentify(),this.isConnected&&await this.hub.invoke(e,t,...n)}},e.addLogger=function(e,t){e.addEventListener(t,((...e)=>{le&&console.log(">== CALLA ==<",t,...e)}))},e.canChangeAudioOutput=n,e.version=pe,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=calla.min.js.map
