{"version":3,"file":"calla.js","sources":["../../Kudzu/typeChecks.ts","../audio/canChangeAudioOutput.ts","../signalr/TextMessageFormat.ts","../signalr/ILogger.ts","../signalr/Loggers.ts","../signalr/Utils.ts","../signalr/HandshakeProtocol.ts","../signalr/IHubProtocol.ts","../signalr/Subject.ts","../signalr/HubConnection.ts","../signalr/DefaultReconnectPolicy.ts","../signalr/Errors.ts","../signalr/HttpClient.ts","../signalr/FetchHttpClient.ts","../signalr/XhrHttpClient.ts","../signalr/DefaultHttpClient.ts","../signalr/ITransport.ts","../signalr/AbortController.ts","../signalr/LongPollingTransport.ts","../signalr/ServerSentEventsTransport.ts","../signalr/WebSocketTransport.ts","../signalr/HttpConnection.ts","../signalr/JsonHubProtocol.ts","../signalr/HubConnectionBuilder.ts","../../Kudzu/events/waitFor.ts","../../Kudzu/emoji/Emoji.ts","../CallaEvents.ts","../ConnectionState.ts","../../Kudzu/arrays/arrayRemoveAt.ts","../../Kudzu/events/EventBase.ts","../../Kudzu/events/sleep.ts","../meta/BaseMetadataClient.ts","../meta/signalr/SignalRMetadataClient.ts","../../Kudzu/arrays/arrayScan.ts","../tele/BaseTeleconferenceClient.ts","../audio/AudioActivityEvent.ts","../Calla.ts","../index.ts"],"sourcesContent":["function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n    return obj instanceof HTMLElement;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}","import { isFunction } from \"kudzu/typeChecks\";\r\n\r\n/**\r\n * Indicates whether or not the current browser can change the destination device for audio output.\r\n **/\r\nexport const canChangeAudioOutput = isFunction((HTMLAudioElement.prototype as any).setSinkId);","ï»¿// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n    content: string | ArrayBuffer, logMessageContent: boolean, withCredentials: boolean, defaultHeaders: MessageHeaders): Promise<void> {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    (headers as any)[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...defaultHeaders },\r\n        responseType,\r\n        withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public outputConsole: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n        this.outputConsole = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.outputConsole.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.outputConsole.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.outputConsole.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.outputConsole.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\nfunction getOsName(): string {\r\n    return navigator.platform;\r\n}\r\n\r\nfunction getRuntimeVersion(): string | undefined {\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    return \"Browser\";\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, (binaryData.slice(0, responseLength) as unknown) as number[]);\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private readonly reconnectPolicy?: IRetryPolicy;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private invocationId: number;\r\n\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectingCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectedCallbacks: Array<(connectionId?: string) => void>;\r\n\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private stopDuringStartError?: Error;\r\n\r\n    private connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private startPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private reconnectDelayHandle?: any;\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.reconnectPolicy = reconnectPolicy;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.reconnectingCallbacks = [];\r\n        this.reconnectedCallbacks = [];\r\n        this.invocationId = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this.startPromise = this.startWithStateTransitions();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startWithStateTransitions(): Promise<void> {\r\n        if (this.connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Connecting;\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this.startInternal();\r\n\r\n            this.connectionState = HubConnectionState.Connected;\r\n            this.connectionStarted = true;\r\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async startInternal() {\r\n        this.stopDuringStartError = undefined;\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this.protocol.name,\r\n                version: this.protocol.version,\r\n            };\r\n\r\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this.cleanupTimeout();\r\n            this.resetTimeoutPeriod();\r\n            this.resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this.stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this.stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this.cleanupTimeout();\r\n            this.cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this.startPromise;\r\n\r\n        this.stopPromise = this.stopInternal();\r\n        await this.stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private stopInternal(error?: Error): Promise<void> {\r\n        if (this.connectionState === HubConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise!;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this.reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this.reconnectDelayHandle);\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            this.completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this.launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private sendWithProtocol(message: any) {\r\n        return this.sendMessage(this.protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\r\n\r\n        this.launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this.launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this.reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this.stopPromise = this.stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(async () => {\r\n            if (this.connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this.sendMessage(this.cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this.cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this.stopPromise = this.stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this.handshakeResolver) {\r\n            this.handshakeResolver();\r\n        }\r\n\r\n        this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.completeClose(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.reconnect(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected) {\r\n            this.completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private completeClose(error?: Error) {\r\n        if (this.connectionStarted) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this.completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this.onreconnecting) {\r\n            try {\r\n                this.reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this.logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.startInternal();\r\n\r\n                this.connectionState = HubConnectionState.Connected;\r\n                this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this.onreconnected) {\r\n                    try {\r\n                        this.reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this.logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                    this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect attempt. Done reconnecting.\");\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this.logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this.completeClose();\r\n    }\r\n\r\n    private getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this.reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this.invocationId;\r\n            this.invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private launchStreams(streams: Array<IStreamResult<any>>, promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private replaceStreamingParams(args: any[]): [Array<IStreamResult<any>>, string[]] {\r\n        const streams: Array<IStreamResult<any>> = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this.isObservable(argument)) {\r\n                const streamId = this.invocationId;\r\n                this.invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this.invocationId;\r\n        this.invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly retryDelays: Array<number | null>;\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this.retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this.retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","ï»¿// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as tough from \"@types/tough-cookie\";\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly jar?: tough.CookieJar;\r\n\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this.jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this.fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this.fetchType = requireFunc(\"fetch-cookie\")(this.fetchType, this.jar);\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this.abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this.fetchType = fetch.bind(self);\r\n            this.abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this.abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this.fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"manual\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this.logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new HttpError(response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\") {\r\n            this.httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly pollAbort: AbortController;\r\n    private readonly headers: MessageHeaders;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.headers = headers;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            (headers as any)[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this.headers },\r\n                withCredentials: this.withCredentials,\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n    private headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n        this.headers = headers;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const headers: MessageHeaders = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials, headers: { ...headers, ...this.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: Event) => {\r\n                    const error = new Error((e as any).data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            let opened = false;\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this.close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this.isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startInternalPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private stopPromiseResolver!: (value?: PromiseLike<void>) => void;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n    private sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n\r\n        if (typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n\r\n        if (typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n        this.options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startInternalPromise = this.startInternal(transferFormat);\r\n        await this.startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this.connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this.stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this.connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this.logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this.connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this.sendQueue) {\r\n            this.sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise;\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnecting;\r\n\r\n        this.stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this.stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this.stopInternal(error);\r\n        await this.stopPromise;\r\n    }\r\n\r\n    private async stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this.stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n            this.stopConnection();\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnecting || this.connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this.connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers = {};\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                (headers as any)[`Authorization`] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        (headers as any)[name] = value;\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this.options.headers },\r\n                withCredentials: this.options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this.isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this.getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this.startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this.connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this.logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource, this.options.withCredentials!, this.options.headers || {});\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.withCredentials!, this.options.headers || {});\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this.stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this.constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n        this.stopError = undefined;\r\n\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Connecting) {\r\n            this.logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this.stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this.sendQueue) {\r\n            this.sendQueue.stop().catch((e) => {\r\n                this.logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this.sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.connectionStarted) {\r\n            this.connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private buffer: any[] = [];\r\n    private sendBufferedData: PromiseSource;\r\n    private executing: boolean = true;\r\n    private transportResult?: PromiseSource;\r\n    private sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly transport: ITransport) {\r\n        this.sendBufferedData = new PromiseSource();\r\n        this.transportResult = new PromiseSource();\r\n\r\n        this.sendLoopPromise = this.sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this.bufferData(data);\r\n        if (!this.transportResult) {\r\n            this.transportResult = new PromiseSource();\r\n        }\r\n        return this.transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.executing = false;\r\n        this.sendBufferedData.resolve();\r\n        return this.sendLoopPromise;\r\n    }\r\n\r\n    private bufferData(data: string | ArrayBuffer): void {\r\n        if (this.buffer.length && typeof(this.buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this.buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this.buffer.push(data);\r\n        this.sendBufferedData.resolve();\r\n    }\r\n\r\n    private async sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this.sendBufferedData.promise;\r\n\r\n            if (!this.executing) {\r\n                if (this.transportResult) {\r\n                    this.transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this.sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this.transportResult!;\r\n            this.transportResult = undefined;\r\n\r\n            const data = typeof(this.buffer[0]) === \"string\" ?\r\n                this.buffer.join(\"\") :\r\n                TransportSendQueue.concatBuffers(this.buffer);\r\n\r\n            this.buffer.length = 0;\r\n\r\n            try {\r\n                await this.transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private resolver?: () => void;\r\n    private rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this.resolver, this.rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this.resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this.rejecter!(reason);\r\n    }\r\n}\r\n","ï»¿// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = (LogLevelNameMapping as any)[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","ï»¿export function waitFor(test: () => boolean): Promise<void> {\r\n    return new Promise((resolve: () => void) => {\r\n        const handle = setInterval(() => {\r\n            if (test()) {\r\n                clearInterval(handle);\r\n                resolve();\r\n            }\r\n        }, 100);\r\n    });\r\n}\r\n","/**\r\n * Unicode-standardized pictograms.\r\n **/\r\nexport class Emoji {\r\n    props: any;\r\n\r\n    /**\r\n     * Creates a new Unicode-standardized pictograms.\r\n     * @param value - a Unicode sequence.\r\n     * @param desc - an English text description of the pictogram.\r\n     * @param props - an optional set of properties to store with the emoji.\r\n     */\r\n    constructor(public value: string, public desc: string, props: any = null) {\r\n        this.value = value;\r\n        this.desc = desc;\r\n        this.props = props || {};\r\n    }\r\n\r\n    /**\r\n     * Determines of the provided Emoji or EmojiGroup is a subset of\r\n     * this emoji.\r\n     */\r\n    contains(e: Emoji | string): boolean {\r\n        if (e instanceof Emoji) {\r\n            return this.contains(e.value);\r\n        }\r\n        else {\r\n            return this.value.indexOf(e) >= 0;\r\n        }\r\n    }\r\n}","import { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport type { AudioActivityEvent } from \"./audio/AudioActivityEvent\";\r\nimport type { InterpolatedPose } from \"./audio/positions/InterpolatedPose\";\r\nimport { AudioStreamSource } from \"./audio/sources/AudioStreamSource\";\r\n\r\nexport type CallaTeleconferenceEventType = \"serverConnected\"\r\n    | \"serverDisconnected\"\r\n    | \"serverFailed\"\r\n    | \"conferenceConnected\"\r\n    | \"conferenceJoined\"\r\n    | \"conferenceFailed\"\r\n    | \"conferenceRestored\"\r\n    | \"conferenceLeft\"\r\n    | \"participantJoined\"\r\n    | \"participantLeft\"\r\n    | \"userNameChanged\"\r\n    | \"audioMuteStatusChanged\"\r\n    | \"videoMuteStatusChanged\"\r\n    | \"audioActivity\"\r\n    | \"audioAdded\"\r\n    | \"audioRemoved\"\r\n    | \"videoAdded\"\r\n    | \"videoRemoved\";\r\n\r\nexport type CallaMetadataEventType = \"userPosed\"\r\n    | \"userPointer\"\r\n    | \"setAvatarEmoji\"\r\n    | \"avatarChanged\"\r\n    | \"emote\"\r\n    | \"chat\";\r\n\r\nexport type CallaEventType = CallaTeleconferenceEventType | CallaMetadataEventType;\r\n\r\nexport class CallaEvent<T extends CallaEventType> extends Event {\r\n    constructor(public eventType: T) {\r\n        super(eventType);\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerConnectedEvent\r\n    extends CallaEvent<\"serverConnected\"> {\r\n    constructor() {\r\n        super(\"serverConnected\");\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerDisconnectedEvent\r\n    extends CallaEvent<\"serverDisconnected\"> {\r\n    constructor() {\r\n        super(\"serverDisconnected\");\r\n    }\r\n}\r\n\r\nexport class CallaTeleconferenceServerFailedEvent\r\n    extends CallaEvent<\"serverFailed\"> {\r\n    constructor() {\r\n        super(\"serverFailed\");\r\n    }\r\n}\r\n\r\nexport class CallaUserEvent<T extends CallaEventType> extends CallaEvent<T> {\r\n    constructor(type: T, public id: string) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public displayName: string) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaUserNameChangedEvent extends CallaUserEvent<\"userNameChanged\"> {\r\n    constructor(id: string, public displayName: string) {\r\n        super(\"userNameChanged\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceJoinedEvent extends CallaUserEvent<\"conferenceJoined\"> {\r\n    constructor(id: string, public pose: InterpolatedPose) {\r\n        super(\"conferenceJoined\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceLeftEvent extends CallaUserEvent<\"conferenceLeft\"> {\r\n    constructor(id: string) {\r\n        super(\"conferenceLeft\", id);\r\n    }\r\n}\r\n\r\nexport class CallaConferenceConnectedEvent extends CallaEvent<\"conferenceConnected\"> {\r\n    constructor() {\r\n        super(\"conferenceConnected\");\r\n    }\r\n}\r\n\r\nexport class CallaConferenceFailedEvent extends CallaEvent<\"conferenceFailed\">{\r\n    constructor() {\r\n        super(\"conferenceFailed\");\r\n    }\r\n}\r\n\r\nexport class CallaConferenceRestoredEvent extends CallaEvent<\"conferenceRestored\">{\r\n    constructor() {\r\n        super(\"conferenceRestored\");\r\n    }\r\n}\r\n\r\nexport class CallaParticipantJoinedEvent extends CallaParticipantEvent<\"participantJoined\"> {\r\n    constructor(id: string, displayName: string, public source: AudioStreamSource) {\r\n        super(\"participantJoined\", id, displayName);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantLeftEvent extends CallaUserEvent<\"participantLeft\"> {\r\n    constructor(id: string) {\r\n        super(\"participantLeft\", id);\r\n    }\r\n}\r\n\r\nexport class CallaParticipantNameChangeEvent extends CallaParticipantEvent<\"userNameChanged\"> {\r\n    constructor(id: string, displayName: string) {\r\n        super(\"userNameChanged\", id, displayName);\r\n    }\r\n}\r\n\r\nexport class CallaUserMutedEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public muted: boolean) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaUserAudioMutedEvent extends CallaUserMutedEvent<\"audioMuteStatusChanged\"> {\r\n    constructor(id: string, muted: boolean) {\r\n        super(\"audioMuteStatusChanged\", id, muted);\r\n    }\r\n}\r\n\r\nexport class CallaUserVideoMutedEvent extends CallaUserMutedEvent<\"videoMuteStatusChanged\"> {\r\n    constructor(id: string, muted: boolean) {\r\n        super(\"videoMuteStatusChanged\", id, muted);\r\n    }\r\n}\r\n\r\nexport enum StreamType {\r\n    Audio = \"audio\",\r\n    Video = \"video\"\r\n}\r\n\r\nexport enum StreamOpType {\r\n    Added = \"added\",\r\n    Removed = \"removed\",\r\n    Changed = \"changed\"\r\n}\r\n\r\nexport class CallaStreamEvent<T extends CallaTeleconferenceEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, public kind: StreamType, public op: StreamOpType, id: string, public stream: MediaStream) {\r\n        super(type, id);\r\n    }\r\n}\r\n\r\nexport class CallaStreamAddedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Added, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaStreamRemovedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Removed, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaStreamChangedEvent<T extends CallaTeleconferenceEventType> extends CallaStreamEvent<T> {\r\n    constructor(type: T, kind: StreamType, id: string, stream: MediaStream) {\r\n        super(type, kind, StreamOpType.Changed, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaAudioStreamAddedEvent extends CallaStreamAddedEvent<\"audioAdded\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"audioAdded\", StreamType.Audio, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaAudioStreamRemovedEvent extends CallaStreamRemovedEvent<\"audioRemoved\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"audioRemoved\", StreamType.Audio, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaVideoStreamAddedEvent extends CallaStreamAddedEvent<\"videoAdded\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"videoAdded\", StreamType.Video, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaVideoStreamRemovedEvent extends CallaStreamRemovedEvent<\"videoRemoved\"> {\r\n    constructor(id: string, stream: MediaStream) {\r\n        super(\"videoRemoved\", StreamType.Video, id, stream);\r\n    }\r\n}\r\n\r\nexport class CallaPoseEvent<T extends CallaMetadataEventType> extends CallaUserEvent<T> {\r\n    constructor(type: T, id: string, public px: number, public py: number, public pz: number, public fx: number, public fy: number, public fz: number, public ux: number, public uy: number, public uz: number) {\r\n        super(type, id);\r\n    }\r\n\r\n    set(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        this.px = px;\r\n        this.py = py;\r\n        this.pz = pz;\r\n        this.fx = fx;\r\n        this.fy = fy;\r\n        this.fz = fz;\r\n        this.ux = ux;\r\n        this.uy = uy;\r\n        this.uz = uz;\r\n    }\r\n}\r\n\r\nexport class CallaUserPosedEvent extends CallaPoseEvent<\"userPosed\"> {\r\n    constructor(id: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        super(\"userPosed\", id, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n}\r\n\r\nexport class CallaUserPointerEvent extends CallaPoseEvent<\"userPointer\"> {\r\n    constructor(id: string, public name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) {\r\n        super(\"userPointer\", id, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n}\r\n\r\nexport class CallaEmojiEvent<T extends CallaMetadataEventType> extends CallaUserEvent<T> {\r\n    emoji: string;\r\n    constructor(type: T, id: string, emoji: Emoji | string) {\r\n        super(type, id);\r\n        if (emoji instanceof Emoji) {\r\n            this.emoji = emoji.value;\r\n        }\r\n        else {\r\n            this.emoji = emoji;\r\n        }\r\n    }\r\n}\r\n\r\nexport class CallaEmoteEvent extends CallaEmojiEvent<\"emote\"> {\r\n    constructor(id: string, emoji: Emoji | string) {\r\n        super(\"emote\", id, emoji);\r\n    }\r\n}\r\n\r\nexport class CallaEmojiAvatarEvent extends CallaEmojiEvent<\"setAvatarEmoji\"> {\r\n    constructor(id: string, emoji: Emoji | string) {\r\n        super(\"setAvatarEmoji\", id, emoji);\r\n    }\r\n}\r\n\r\nexport class CallaAvatarChangedEvent extends CallaUserEvent<\"avatarChanged\"> {\r\n    constructor(id: string, public url: string) {\r\n        super(\"avatarChanged\", id);\r\n    }\r\n}\r\n\r\nexport class CallaChatEvent extends CallaUserEvent<\"chat\"> {\r\n    constructor(id: string, public text: string) {\r\n        super(\"chat\", id);\r\n    }\r\n}\r\n\r\nexport interface CallaTeleconferenceEvents {\r\n    serverConnected: CallaTeleconferenceServerConnectedEvent;\r\n    serverDisconnected: CallaTeleconferenceServerDisconnectedEvent;\r\n    serverFailed: CallaTeleconferenceServerFailedEvent;\r\n    audioMuteStatusChanged: CallaUserAudioMutedEvent;\r\n    videoMuteStatusChanged: CallaUserVideoMutedEvent;\r\n    conferenceConnected: CallaConferenceConnectedEvent;\r\n    conferenceJoined: CallaConferenceJoinedEvent;\r\n    conferenceLeft: CallaConferenceLeftEvent;\r\n    conferenceFailed: CallaConferenceFailedEvent;\r\n    conferenceRestored: CallaConferenceRestoredEvent;\r\n    participantJoined: CallaParticipantJoinedEvent;\r\n    participantLeft: CallaParticipantLeftEvent;\r\n    userNameChanged: CallaUserNameChangedEvent;\r\n    audioActivity: AudioActivityEvent;\r\n    audioAdded: CallaAudioStreamAddedEvent;\r\n    videoAdded: CallaVideoStreamAddedEvent;\r\n    audioRemoved: CallaAudioStreamRemovedEvent;\r\n    videoRemoved: CallaVideoStreamRemovedEvent;\r\n}\r\n\r\nexport interface CallaMetadataEvents {\r\n    userPosed: CallaUserPosedEvent;\r\n    userPointer: CallaUserPointerEvent;\r\n    emote: CallaEmoteEvent;\r\n    setAvatarEmoji: CallaEmojiAvatarEvent;\r\n    avatarChanged: CallaAvatarChangedEvent;\r\n    chat: CallaChatEvent;\r\n}\r\n\r\nexport interface CallaClientEvents extends CallaTeleconferenceEvents, CallaMetadataEvents { }","export enum ConnectionState {\r\n    Disconnected = \"Disconnected\",\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnecting = \"Disconnecting\"\r\n}","/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}","import { arrayRemoveAt } from \"../arrays/arrayRemoveAt\";\r\nimport { isFunction } from \"../typeChecks\";\r\n\r\nexport class EventBase implements EventTarget {\r\n    private listeners = new Map<string, Function[]>();\r\n    private listenerOptions = new Map<Function, AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<Function>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find(c => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: Function[], callback: Function) {\r\n        const idx = listeners.findIndex(c => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (options && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private mappedCallbacks = new Map<Function, (evt: Event) => any>();\r\n\r\n    addEventListener<K extends string & keyof EventsT>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: AddEventListenerOptions): void {\r\n        let mappedCallback = this.mappedCallbacks.get(callback);\r\n        if (mappedCallback == null) {\r\n            mappedCallback = (evt: Event) => callback(evt as TypedEvent<K> & EventsT[K]);\r\n            this.mappedCallbacks.set(callback, mappedCallback);\r\n        }\r\n\r\n        super.addEventListener(type, mappedCallback, options);\r\n    }\r\n\r\n    removeEventListener<K extends string & keyof EventsT>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        const mappedCallback = this.mappedCallbacks.get(callback);\r\n        if (mappedCallback) {\r\n            super.removeEventListener(type, mappedCallback);\r\n        }\r\n    }\r\n}","export function sleep(dt: number) : Promise<void> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, dt);\r\n    });\r\n}\r\n","import type { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport { sleep } from \"kudzu/events/sleep\";\r\nimport type { CallaEventType, CallaMetadataEvents } from \"../CallaEvents\";\r\nimport { CallaUserEvent } from \"../CallaEvents\";\r\nimport { ConnectionState } from \"../ConnectionState\";\r\nimport type { IMetadataClientExt } from \"./IMetadataClient\";\r\n\r\n\r\nexport abstract class BaseMetadataClient\r\n    extends TypedEventBase<CallaMetadataEvents>\r\n    implements IMetadataClientExt {\r\n\r\n    private tasks = new Map<string, Promise<any>>();\r\n\r\n    constructor(private sleepTime: number) {\r\n        super();\r\n    }\r\n\r\n    async getNext<T extends keyof CallaMetadataEvents>(evtName: T, userID: string): Promise<CallaMetadataEvents[T]> {\r\n        return new Promise((resolve) => {\r\n            const getter = (evt: CallaMetadataEvents[T]) => {\r\n                if (evt instanceof CallaUserEvent\r\n                    && evt.id === userID) {\r\n                    this.removeEventListener(evtName, getter);\r\n                    resolve(evt);\r\n                }\r\n            };\r\n\r\n            this.addEventListener(evtName, getter);\r\n        });\r\n    }\r\n\r\n    abstract get metadataState(): ConnectionState;\r\n\r\n    get isConnected(): boolean {\r\n        return this.metadataState === ConnectionState.Connected;\r\n    }\r\n\r\n    protected abstract callInternal(command: CallaEventType, ...args: any[]): Promise<void>;\r\n\r\n    private async callThrottled(key: string, command: CallaEventType, ...args: any[]): Promise<void> {\r\n        if (!this.tasks.has(key)) {\r\n            const start = performance.now();\r\n            const task = this.callInternal(command, ...args);\r\n            this.tasks.set(key, task);\r\n            await task;\r\n            const delta = performance.now() - start;\r\n            const sleepTime = this.sleepTime - delta;\r\n            if (sleepTime > 0) {\r\n                await sleep(this.sleepTime);\r\n            }\r\n            this.tasks.delete(key);\r\n        }\r\n    }\r\n\r\n    private async callImmediate(command: CallaEventType, ...args: any[]): Promise<void> {\r\n        await this.callInternal(command, ...args);\r\n    }\r\n\r\n    setLocalPose(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callThrottled(\"userPosed\", \"userPosed\", px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPoseImmediate(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callImmediate(\"userPosed\", px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPointer(name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.callThrottled(\"userPointer\" + name, \"userPointer\", name, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setAvatarEmoji(emoji: Emoji): void {\r\n        this.callImmediate(\"setAvatarEmoji\", emoji);\r\n    }\r\n\r\n    setAvatarURL(url: string): void {\r\n        this.callImmediate(\"avatarChanged\", url);\r\n    }\r\n\r\n    emote(emoji: Emoji): void {\r\n        this.callImmediate(\"emote\", emoji);\r\n    }\r\n\r\n    chat(text: string): void {\r\n        this.callImmediate(\"chat\", text);\r\n    }\r\n\r\n    abstract connect(): Promise<void>;\r\n    abstract join(roomName: string): Promise<void>;\r\n    abstract identify(userNameOrID: string): Promise<void>;\r\n    abstract leave(): Promise<void>;\r\n    abstract disconnect(): Promise<void>;\r\n}\r\n","import { HubConnection, HubConnectionState } from \"../../signalr/HubConnection\";\r\nimport { HubConnectionBuilder } from \"../../signalr/HubConnectionBuilder\";\r\nimport { HttpTransportType } from \"../../signalr/ITransport\";\r\nimport type { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport { waitFor } from \"kudzu/events/waitFor\";\r\nimport { assertNever } from \"kudzu/typeChecks\";\r\nimport type { CallaEventType } from \"../../CallaEvents\";\r\nimport {\r\n    CallaAvatarChangedEvent,\r\n    CallaChatEvent,\r\n    CallaEmojiAvatarEvent,\r\n    CallaEmoteEvent,\r\n    CallaUserPointerEvent,\r\n    CallaUserPosedEvent\r\n} from \"../../CallaEvents\";\r\nimport { ConnectionState } from \"../../ConnectionState\";\r\nimport { BaseMetadataClient } from \"../BaseMetadataClient\";\r\n\r\nexport class SignalRMetadataClient\r\n    extends BaseMetadataClient {\r\n\r\n    private hub: HubConnection;\r\n    private lastRoom: string = null;\r\n    private lastUserID: string = null;\r\n    private currentRoom: string = null;\r\n    private currentUserID: string = null;\r\n\r\n    constructor(signalRPath: string) {\r\n        super(50);\r\n\r\n        this.hub = new HubConnectionBuilder()\r\n            .withUrl(signalRPath, HttpTransportType.WebSockets)\r\n            .build();\r\n\r\n        this.hub.onclose(() => {\r\n            this.lastRoom = null;\r\n            this.lastUserID = null;\r\n        });\r\n\r\n        this.hub.on(\"userPosed\",\r\n            (fromUserID: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) => {\r\n                this.dispatchEvent(new CallaUserPosedEvent(fromUserID, px, py, pz, fx, fy, fz, ux, uy, uz));\r\n            });\r\n\r\n        this.hub.on(\"userPointer\",\r\n            (fromUserID: string, name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number) => {\r\n                this.dispatchEvent(new CallaUserPointerEvent(fromUserID, name, px, py, pz, fx, fy, fz, ux, uy, uz));\r\n            });\r\n\r\n        this.hub.on(\"avatarChanged\",\r\n            (fromUserID: string, url: string) => {\r\n                this.dispatchEvent(new CallaAvatarChangedEvent(fromUserID, url));\r\n            });\r\n\r\n        this.hub.on(\"emote\",\r\n            (fromUserID: string, emoji: Emoji) => {\r\n                this.dispatchEvent(new CallaEmoteEvent(fromUserID, emoji));\r\n            });\r\n\r\n        this.hub.on(\"setAvatarEmoji\",\r\n            (fromUserID: string, emoji: Emoji) => {\r\n                this.dispatchEvent(new CallaEmojiAvatarEvent(fromUserID, emoji));\r\n            });\r\n\r\n        this.hub.on(\"chat\",\r\n            (fromUserID: string, text: string) => {\r\n                this.dispatchEvent(new CallaChatEvent(fromUserID, text));\r\n            });\r\n    }\r\n\r\n    get metadataState() {\r\n        switch (this.hub.state) {\r\n            case HubConnectionState.Connected: return ConnectionState.Connected;\r\n            case HubConnectionState.Connecting: case HubConnectionState.Reconnecting: return ConnectionState.Connecting;\r\n            case HubConnectionState.Disconnected: return ConnectionState.Disconnected;\r\n            case HubConnectionState.Disconnecting: return ConnectionState.Disconnecting;\r\n            default: assertNever(this.hub.state);\r\n        }\r\n    }\r\n\r\n    private async maybeStart(): Promise<void> {\r\n        if (this.metadataState === ConnectionState.Connecting) {\r\n            await waitFor(() => this.metadataState === ConnectionState.Connected);\r\n        }\r\n        else {\r\n            if (this.metadataState === ConnectionState.Disconnecting) {\r\n                await waitFor(() => this.metadataState === ConnectionState.Disconnected);\r\n            }\r\n\r\n            if (this.metadataState === ConnectionState.Disconnected) {\r\n                await this.hub.start();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async maybeJoin(): Promise<void> {\r\n        await this.maybeStart();\r\n\r\n        if (this.currentRoom !== this.lastRoom) {\r\n            await this.maybeLeave();\r\n\r\n            if (this.currentRoom && this.isConnected) {\r\n                this.lastRoom = this.currentRoom;\r\n                await this.hub.invoke(\"join\", this.currentRoom);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async maybeIdentify(): Promise<void> {\r\n        await this.maybeJoin();\r\n\r\n        if (this.currentUserID\r\n            && this.currentUserID !== this.lastUserID\r\n            && this.isConnected) {\r\n            this.lastUserID = this.currentUserID;\r\n            await this.hub.invoke(\"identify\", this.currentUserID);\r\n        }\r\n    }\r\n\r\n    private async maybeLeave(): Promise<void> {\r\n        if (this.isConnected) {\r\n            await this.hub.invoke(\"leave\");\r\n        }\r\n    }\r\n\r\n    private async maybeDisconnect() {\r\n        if (this.metadataState === ConnectionState.Disconnecting) {\r\n            await waitFor(() => this.metadataState === ConnectionState.Disconnected);\r\n        }\r\n        else {\r\n            if (this.metadataState === ConnectionState.Connecting) {\r\n                await waitFor(() => this.metadataState === ConnectionState.Connected);\r\n            }\r\n\r\n            if (this.metadataState === ConnectionState.Connected) {\r\n                await this.hub.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        await this.maybeStart();\r\n    }\r\n\r\n    async join(roomName: string): Promise<void> {\r\n        this.currentRoom = roomName;\r\n        await this.maybeJoin();\r\n    }\r\n\r\n    async identify(userID: string): Promise<void> {\r\n        this.currentUserID = userID;\r\n        await this.maybeJoin();\r\n        await this.maybeIdentify();\r\n    }\r\n\r\n    async leave(): Promise<void> {\r\n        await this.maybeLeave();\r\n        this.currentUserID\r\n            = this.lastUserID\r\n            = this.currentRoom\r\n            = this.lastRoom\r\n            = null;\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        await this.maybeDisconnect();\r\n        this.currentUserID\r\n            = this.lastUserID\r\n            = this.currentRoom\r\n            = this.lastRoom\r\n            = null;\r\n    }\r\n\r\n    protected async callInternal(command: CallaEventType, toUserID: string, ...args: any[]): Promise<void> {\r\n        await this.maybeIdentify();\r\n        if (this.isConnected) {\r\n            await this.hub.invoke(command, toUserID, ...args);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The first item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScan<T>(arr: T[], ...tests: ((val: T) => boolean)[]) {\r\n    for (const test of tests) {\r\n        for (const item of arr) {\r\n            if (test(item)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}","import { arrayScan } from \"kudzu/arrays/arrayScan\";\r\nimport type { ErsatzEventTarget } from \"kudzu/events/ErsatzEventTarget\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport { IFetcher } from \"kudzu/io/IFetcher\";\r\nimport { AudioManager } from \"../audio/AudioManager\";\r\nimport { canChangeAudioOutput } from \"../audio/canChangeAudioOutput\";\r\nimport type { MediaDeviceSet, MediaPermissionSet } from \"../Calla\";\r\nimport type { CallaTeleconferenceEvents } from \"../CallaEvents\";\r\nimport { CallaUserEvent } from \"../CallaEvents\";\r\nimport { ConnectionState } from \"../ConnectionState\";\r\nimport type { IMetadataClientExt } from \"../meta/IMetadataClient\";\r\nimport type { ITeleconferenceClientExt } from \"./ITeleconferenceClient\";\r\n\r\nexport function addLogger(obj: ErsatzEventTarget, evtName: string): void {\r\n    obj.addEventListener(evtName, (...rest: any[]) => {\r\n        if (loggingEnabled) {\r\n            console.log(\">== CALLA ==<\", evtName, ...rest);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction filterDeviceDuplicates(devices: MediaDeviceInfo[]) {\r\n    const filtered = [];\r\n    for (let i = 0; i < devices.length; ++i) {\r\n        const a = devices[i];\r\n        let found = false;\r\n        for (let j = 0; j < filtered.length && !found; ++j) {\r\n            const b = filtered[j];\r\n            found = a.kind === b.kind && b.label.indexOf(a.label) > 0;\r\n        }\r\n\r\n        if (!found) {\r\n            filtered.push(a);\r\n        }\r\n    }\r\n\r\n    return filtered;\r\n}\r\n\r\nconst PREFERRED_AUDIO_OUTPUT_ID_KEY = \"calla:preferredAudioOutputID\";\r\nconst PREFERRED_AUDIO_INPUT_ID_KEY = \"calla:preferredAudioInputID\";\r\nconst PREFERRED_VIDEO_INPUT_ID_KEY = \"calla:preferredVideoInputID\";\r\n\r\nexport const DEFAULT_LOCAL_USER_ID = \"local-user\";\r\n\r\nlet loggingEnabled = window.location.hostname === \"localhost\"\r\n    || /\\bdebug\\b/.test(window.location.search);\r\n\r\nexport abstract class BaseTeleconferenceClient\r\n    extends TypedEventBase<CallaTeleconferenceEvents>\r\n    implements ITeleconferenceClientExt {\r\n\r\n    toggleLogging() {\r\n        loggingEnabled = !loggingEnabled;\r\n    }\r\n\r\n    localUserID: string = null;\r\n    localUserName: string = null;\r\n    roomName: string = null;\r\n\r\n    protected fetcher: IFetcher;\r\n\r\n    audio: AudioManager;\r\n\r\n    private _connectionState = ConnectionState.Disconnected;\r\n    private _conferenceState = ConnectionState.Disconnected;\r\n\r\n    hasAudioPermission = false;\r\n    hasVideoPermission = false;\r\n\r\n    get connectionState(): ConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    private setConnectionState(state: ConnectionState): void {\r\n        this._connectionState = state;\r\n    }\r\n\r\n    get conferenceState(): ConnectionState {\r\n        return this._conferenceState;\r\n    }\r\n\r\n    private setConferenceState(state: ConnectionState): void {\r\n        this._conferenceState = state;\r\n    }\r\n\r\n    constructor(fetcher: IFetcher, audio: AudioManager, public needsAudioDevice = true, public needsVideoDevice = false) {\r\n        super();\r\n\r\n        this.fetcher = fetcher;\r\n\r\n        this.audio = audio;\r\n\r\n        this.addEventListener(\"serverConnected\", this.setConnectionState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"serverFailed\", this.setConnectionState.bind(this, ConnectionState.Disconnected));\r\n        this.addEventListener(\"serverDisconnected\", this.setConnectionState.bind(this, ConnectionState.Disconnected));\r\n\r\n        this.addEventListener(\"conferenceJoined\", this.setConferenceState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"conferenceFailed\", this.setConferenceState.bind(this, ConnectionState.Disconnected));\r\n        this.addEventListener(\"conferenceRestored\", this.setConferenceState.bind(this, ConnectionState.Connected));\r\n        this.addEventListener(\"conferenceLeft\", this.setConferenceState.bind(this, ConnectionState.Disconnected));\r\n    }\r\n\r\n    dispatchEvent<K extends string & keyof CallaTeleconferenceEvents>(evt: CallaTeleconferenceEvents[K] & Event): boolean {\r\n        if (evt instanceof CallaUserEvent\r\n            && (evt.id == null\r\n                || evt.id === \"local\")) {\r\n            if (this.localUserID === DEFAULT_LOCAL_USER_ID) {\r\n                evt.id = null;\r\n            }\r\n            else {\r\n                evt.id = this.localUserID;\r\n            }\r\n        }\r\n\r\n        return super.dispatchEvent(evt);\r\n    }\r\n\r\n    async getNext<T extends keyof CallaTeleconferenceEvents>(evtName: T, userID: string): Promise<CallaTeleconferenceEvents[T]> {\r\n        return new Promise((resolve) => {\r\n            const getter = (evt: CallaTeleconferenceEvents[T]) => {\r\n                if (evt instanceof CallaUserEvent\r\n                    && evt.id === userID) {\r\n                    this.removeEventListener(evtName, getter);\r\n                    resolve(evt);\r\n                }\r\n            };\r\n\r\n            this.addEventListener(evtName, getter);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    get preferredAudioInputID(): string {\r\n        return localStorage.getItem(PREFERRED_AUDIO_INPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredAudioInputID(v: string) {\r\n        localStorage.setItem(PREFERRED_AUDIO_INPUT_ID_KEY, v);\r\n    }\r\n\r\n    get preferredVideoInputID(): string {\r\n        return localStorage.getItem(PREFERRED_VIDEO_INPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredVideoInputID(v: string) {\r\n        localStorage.setItem(PREFERRED_VIDEO_INPUT_ID_KEY, v);\r\n    }\r\n\r\n    async setPreferredDevices(): Promise<void> {\r\n        await this.setPreferredAudioInput(true);\r\n        await this.setPreferredVideoInput(false);\r\n        await this.setPreferredAudioOutput(true);\r\n    }\r\n\r\n    async getPreferredAudioInput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getAudioInputDevices();\r\n        const device = arrayScan(\r\n            devices,\r\n            (d) => d.deviceId === this.preferredAudioInputID,\r\n            (d) => d.deviceId === \"communications\",\r\n            (d) => d.deviceId === \"default\",\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredAudioInput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredAudioInput(allowAny);\r\n        if (device) {\r\n            await this.setAudioInputDevice(device);\r\n        }\r\n    }\r\n\r\n    async getPreferredVideoInput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getVideoInputDevices();\r\n        const device = arrayScan(devices,\r\n            (d) => d.deviceId === this.preferredVideoInputID,\r\n            (d) => allowAny && d && /front/i.test(d.label),\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredVideoInput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredVideoInput(allowAny);\r\n        if (device) {\r\n            await this.setVideoInputDevice(device);\r\n        }\r\n    }\r\n\r\n    private async getDevices(): Promise<MediaDeviceInfo[]> {\r\n        let devices: MediaDeviceInfo[] = null;\r\n        for (let i = 0; i < 3; ++i) {\r\n            devices = await navigator.mediaDevices.enumerateDevices();\r\n            for (const device of devices) {\r\n                if (device.deviceId.length > 0) {\r\n                    this.hasAudioPermission = this.hasAudioPermission || device.kind === \"audioinput\" && device.label.length > 0;\r\n                    this.hasVideoPermission = this.hasVideoPermission || device.kind === \"videoinput\" && device.label.length > 0;\r\n                }\r\n            }\r\n\r\n            if (this.hasAudioPermission) {\r\n                break;\r\n            }\r\n\r\n            try {\r\n                await navigator.mediaDevices.getUserMedia({\r\n                    audio: this.needsAudioDevice && !this.hasAudioPermission,\r\n                    video: this.needsVideoDevice && !this.hasVideoPermission\r\n                });\r\n            }\r\n            catch (exp) {\r\n                console.warn(exp);\r\n            }\r\n        }\r\n\r\n        return devices || [];\r\n    }\r\n\r\n    async getMediaPermissions(): Promise<MediaPermissionSet> {\r\n        await this.getDevices();\r\n        return {\r\n            audio: this.hasAudioPermission,\r\n            video: this.hasVideoPermission\r\n        };\r\n    }\r\n\r\n    private async getAvailableDevices(filterDuplicates: boolean = false): Promise<MediaDeviceSet> {\r\n        let devices = await this.getDevices();\r\n\r\n        if (filterDuplicates) {\r\n            devices = filterDeviceDuplicates(devices);\r\n        }\r\n\r\n        return {\r\n            audioOutput: canChangeAudioOutput ? devices.filter(d => d.kind === \"audiooutput\") : [],\r\n            audioInput: devices.filter(d => d.kind === \"audioinput\"),\r\n            videoInput: devices.filter(d => d.kind === \"videoinput\")\r\n        };\r\n    }\r\n\r\n    async getAudioInputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.audioInput || [];\r\n    }\r\n\r\n    async getVideoInputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.videoInput || [];\r\n    }\r\n\r\n    async setAudioOutputDevice(device: MediaDeviceInfo) {\r\n        if (canChangeAudioOutput) {\r\n            this.preferredAudioOutputID = device && device.deviceId || null;\r\n        }\r\n    }\r\n\r\n    async getAudioOutputDevices(filterDuplicates: boolean = false): Promise<MediaDeviceInfo[]> {\r\n        if (!canChangeAudioOutput) {\r\n            return [];\r\n        }\r\n        const devices = await this.getAvailableDevices(filterDuplicates);\r\n        return devices && devices.audioOutput || [];\r\n    }\r\n\r\n    async getCurrentAudioOutputDevice() {\r\n        if (!canChangeAudioOutput) {\r\n            return null;\r\n        }\r\n        const curId = this.audio.getAudioOutputDeviceID(),\r\n            devices = await this.getAudioOutputDevices(),\r\n            device = devices.filter((d) => curId != null && d.deviceId === curId\r\n                || curId == null && d.deviceId === this.preferredAudioOutputID);\r\n        if (device.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return device[0];\r\n        }\r\n    }\r\n\r\n    get preferredAudioOutputID(): string {\r\n        return localStorage.getItem(PREFERRED_AUDIO_OUTPUT_ID_KEY);\r\n    }\r\n\r\n    set preferredAudioOutputID(v: string) {\r\n        localStorage.setItem(PREFERRED_AUDIO_OUTPUT_ID_KEY, v);\r\n    }\r\n\r\n\r\n    async getPreferredAudioOutput(allowAny: boolean): Promise<MediaDeviceInfo> {\r\n        const devices = await this.getAudioOutputDevices();\r\n        const device = arrayScan(\r\n            devices,\r\n            (d) => d.deviceId === this.preferredAudioOutputID,\r\n            (d) => d.deviceId === \"communications\",\r\n            (d) => d.deviceId === \"default\",\r\n            (d) => allowAny && d.deviceId.length > 0);\r\n        return device;\r\n    }\r\n\r\n    async setPreferredAudioOutput(allowAny: boolean): Promise<void> {\r\n        const device = await this.getPreferredAudioOutput(allowAny);\r\n        if (device) {\r\n            await this.setAudioOutputDevice(device);\r\n        }\r\n    }\r\n\r\n    async setAudioInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        this.preferredAudioInputID = device && device.deviceId || null;\r\n    }\r\n\r\n    async setVideoInputDevice(device: MediaDeviceInfo) {\r\n        this.preferredVideoInputID = device && device.deviceId || null;\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        this.setConnectionState(ConnectionState.Connecting);\r\n    }\r\n\r\n    async join(_roomName: string, _password?: string): Promise<void> {\r\n        this.setConferenceState(ConnectionState.Connecting);\r\n    }\r\n\r\n    async leave(): Promise<void> {\r\n        this.setConferenceState(ConnectionState.Disconnecting);\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        this.setConnectionState(ConnectionState.Disconnecting);\r\n    }\r\n\r\n    abstract userExists(id: string): boolean;\r\n    abstract getUserNames(): string[][];\r\n    abstract identify(userNameOrID: string): Promise<void>;\r\n    abstract getCurrentAudioInputDevice(): Promise<MediaDeviceInfo>;\r\n    abstract getCurrentVideoInputDevice(): Promise<MediaDeviceInfo>;\r\n    abstract toggleAudioMuted(): Promise<boolean>;\r\n    abstract toggleVideoMuted(): Promise<boolean>;\r\n    abstract getAudioMuted(): Promise<boolean>;\r\n    abstract getVideoMuted(): Promise<boolean>;\r\n    abstract getDefaultMetadataClient(): IMetadataClientExt;\r\n}\r\n","/**\r\n * An Event class for tracking changes to audio activity.\r\n **/\r\nexport class AudioActivityEvent extends Event {\r\n    id: string = null;\r\n    isActive: boolean = false;\r\n\r\n    /** Creates a new \"audioActivity\" event */\r\n    constructor() {\r\n        super(\"audioActivity\");\r\n        Object.seal(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the current state of the event\r\n     * @param id - the user for which the activity changed\r\n     * @param isActive - the new state of the activity\r\n     */\r\n    set(id: string, isActive: boolean): void {\r\n        this.id = id;\r\n        this.isActive = isActive;\r\n    }\r\n}\r\n","import type { Emoji } from \"kudzu/emoji/Emoji\";\r\nimport { TypedEventBase } from \"kudzu/events/EventBase\";\r\nimport type { IFetcher } from \"kudzu/io/IFetcher\";\r\nimport type { IDisposable } from \"kudzu/using\";\r\nimport { AudioActivityEvent } from \"./audio/AudioActivityEvent\";\r\nimport type { AudioManager } from \"./audio/AudioManager\";\r\nimport { canChangeAudioOutput } from \"./audio/canChangeAudioOutput\";\r\nimport type {\r\n    CallaAudioStreamAddedEvent,\r\n    CallaAudioStreamRemovedEvent,\r\n    CallaClientEvents,\r\n    CallaConferenceJoinedEvent,\r\n    CallaConferenceLeftEvent,\r\n    CallaParticipantJoinedEvent,\r\n    CallaParticipantLeftEvent,\r\n    CallaUserPointerEvent,\r\n    CallaUserPosedEvent\r\n} from \"./CallaEvents\";\r\nimport { ConnectionState } from \"./ConnectionState\";\r\nimport type { ICombinedClient } from \"./ICombinedClient\";\r\nimport type { IMetadataClient, IMetadataClientExt } from \"./meta/IMetadataClient\";\r\nimport type { ITeleconferenceClient, ITeleconferenceClientExt } from \"./tele/ITeleconferenceClient\";\r\n\r\nexport interface MediaPermissionSet {\r\n    audio: boolean;\r\n    video: boolean;\r\n}\r\n\r\nexport interface MediaDeviceSet {\r\n    audioInput: MediaDeviceInfo[];\r\n    videoInput: MediaDeviceInfo[];\r\n    audioOutput: MediaDeviceInfo[];\r\n}\r\n\r\nexport enum ClientState {\r\n    InConference = \"in-conference\",\r\n    JoiningConference = \"joining-conference\",\r\n    Connected = \"connected\",\r\n    Connecting = \"connecting\",\r\n    Prepaired = \"prepaired\",\r\n    Prepairing = \"prepairing\",\r\n    Unprepared = \"unprepaired\"\r\n}\r\n\r\nconst audioActivityEvt = new AudioActivityEvent();\r\n\r\nexport class Calla\r\n    extends TypedEventBase<CallaClientEvents>\r\n    implements ICombinedClient, IDisposable {\r\n\r\n    isAudioMuted: boolean = null;\r\n    isVideoMuted: boolean = null;\r\n\r\n    constructor(\r\n        private _fetcher: IFetcher,\r\n        private _tele: ITeleconferenceClientExt,\r\n        private _meta: IMetadataClientExt) {\r\n        super();\r\n\r\n        const fwd = this.dispatchEvent.bind(this);\r\n\r\n        this._tele.addEventListener(\"serverConnected\", fwd);\r\n        this._tele.addEventListener(\"serverDisconnected\", fwd);\r\n        this._tele.addEventListener(\"serverFailed\", fwd);\r\n        this._tele.addEventListener(\"conferenceFailed\", fwd);\r\n        this._tele.addEventListener(\"conferenceRestored\", fwd);\r\n\r\n        this._tele.addEventListener(\"audioMuteStatusChanged\", fwd);\r\n        this._tele.addEventListener(\"videoMuteStatusChanged\", fwd);\r\n\r\n        this._tele.addEventListener(\"conferenceJoined\", async (evt: CallaConferenceJoinedEvent) => {\r\n            const user = this.audio.setLocalUserID(evt.id);\r\n            evt.pose = user.pose;\r\n            this.dispatchEvent(evt);\r\n            await this.setPreferredDevices();\r\n        });\r\n\r\n        this._tele.addEventListener(\"conferenceLeft\", (evt: CallaConferenceLeftEvent) => {\r\n            this.audio.setLocalUserID(evt.id);\r\n            this.dispatchEvent(evt);\r\n        });\r\n\r\n        this._tele.addEventListener(\"participantJoined\", async (joinEvt: CallaParticipantJoinedEvent) => {\r\n            joinEvt.source = this.audio.createUser(joinEvt.id);\r\n            this.dispatchEvent(joinEvt);\r\n        });\r\n\r\n        this._tele.addEventListener(\"participantLeft\", (evt: CallaParticipantLeftEvent) => {\r\n            this.dispatchEvent(evt);\r\n            this.audio.removeUser(evt.id);\r\n        });\r\n\r\n        this._tele.addEventListener(\"userNameChanged\", fwd);\r\n        this._tele.addEventListener(\"videoAdded\", fwd);\r\n        this._tele.addEventListener(\"videoRemoved\", fwd);\r\n\r\n        this._tele.addEventListener(\"audioAdded\", (evt: CallaAudioStreamAddedEvent) => {\r\n            const user = this.audio.getUser(evt.id);\r\n            if (user) {\r\n                let stream = user.streams.get(evt.kind);\r\n                if (stream) {\r\n                    user.streams.delete(evt.kind);\r\n                }\r\n\r\n                stream = evt.stream;\r\n                user.streams.set(evt.kind, stream);\r\n\r\n                if (evt.id !== this._tele.localUserID) {\r\n                    this.audio.setUserStream(evt.id, stream);\r\n                }\r\n\r\n                this.dispatchEvent(evt);\r\n            }\r\n        });\r\n\r\n        this._tele.addEventListener(\"audioRemoved\", (evt: CallaAudioStreamRemovedEvent) => {\r\n            const user = this.audio.getUser(evt.id);\r\n            if (user && user.streams.has(evt.kind)) {\r\n                user.streams.delete(evt.kind);\r\n            }\r\n\r\n            if (evt.id !== this._tele.localUserID) {\r\n                this.audio.setUserStream(evt.id, null);\r\n            }\r\n\r\n            this.dispatchEvent(evt);\r\n        });\r\n\r\n        this._meta.addEventListener(\"avatarChanged\", fwd);\r\n        this._meta.addEventListener(\"chat\", fwd);\r\n        this._meta.addEventListener(\"emote\", fwd);\r\n        this._meta.addEventListener(\"setAvatarEmoji\", fwd);\r\n\r\n        const offsetEvt = (poseEvt: CallaUserPointerEvent | CallaUserPosedEvent): void => {\r\n            const O = this.audio.getUserOffset(poseEvt.id);\r\n            if (O) {\r\n                poseEvt.px += O[0];\r\n                poseEvt.py += O[1];\r\n                poseEvt.pz += O[2];\r\n            }\r\n            this.dispatchEvent(poseEvt);\r\n        };\r\n\r\n        this._meta.addEventListener(\"userPointer\", offsetEvt);\r\n\r\n        this._meta.addEventListener(\"userPosed\", (evt: CallaUserPosedEvent) => {\r\n            this.audio.setUserPose(\r\n                evt.id,\r\n                evt.px, evt.py, evt.pz,\r\n                evt.fx, evt.fy, evt.fz,\r\n                evt.ux, evt.uy, evt.uz);\r\n            offsetEvt(evt);\r\n        });\r\n\r\n        this.audio.addEventListener(\"audioActivity\", (evt: AudioActivityEvent) => {\r\n            audioActivityEvt.id = evt.id;\r\n            audioActivityEvt.isActive = evt.isActive;\r\n            this.dispatchEvent(audioActivityEvt);\r\n        });\r\n\r\n        const dispose = this.dispose.bind(this);\r\n        window.addEventListener(\"beforeunload\", dispose);\r\n        window.addEventListener(\"unload\", dispose);\r\n        window.addEventListener(\"pagehide\", dispose);\r\n\r\n        Object.seal(this);\r\n    }\r\n\r\n    get connectionState(): ConnectionState {\r\n        return this._tele.connectionState;\r\n    }\r\n\r\n    get conferenceState(): ConnectionState {\r\n        return this._tele.conferenceState;\r\n    }\r\n\r\n    get fetcher(): IFetcher {\r\n        return this._fetcher;\r\n    }\r\n\r\n    get tele(): ITeleconferenceClient {\r\n        return this._tele;\r\n    }\r\n\r\n    get meta(): IMetadataClient {\r\n        return this._meta;\r\n    }\r\n\r\n    get audio(): AudioManager {\r\n        return this._tele.audio;\r\n    }\r\n\r\n    get preferredAudioOutputID(): string {\r\n        return this._tele.preferredAudioOutputID;\r\n    }\r\n\r\n    set preferredAudioOutputID(v: string) {\r\n        this._tele.preferredAudioOutputID = v;\r\n    }\r\n\r\n    get preferredAudioInputID(): string {\r\n        return this._tele.preferredAudioInputID;\r\n    }\r\n\r\n    set preferredAudioInputID(v: string) {\r\n        this._tele.preferredAudioInputID = v;\r\n    }\r\n\r\n    get preferredVideoInputID(): string {\r\n        return this._tele.preferredVideoInputID;\r\n    }\r\n\r\n    set preferredVideoInputID(v: string) {\r\n        this._tele.preferredVideoInputID = v;\r\n    }\r\n\r\n    async getCurrentAudioOutputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentAudioOutputDevice();\r\n    }\r\n\r\n    async getMediaPermissions(): Promise<MediaPermissionSet> {\r\n        return await this._tele.getMediaPermissions();\r\n    }\r\n\r\n    async getAudioOutputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getAudioOutputDevices(filterDuplicates);\r\n    }\r\n\r\n    async getAudioInputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getAudioInputDevices(filterDuplicates);\r\n    }\r\n\r\n    async getVideoInputDevices(filterDuplicates: boolean): Promise<MediaDeviceInfo[]> {\r\n        return await this._tele.getVideoInputDevices(filterDuplicates);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.leave();\r\n        this.disconnect();\r\n    }\r\n\r\n    get offsetRadius(): number {\r\n        return this.audio.offsetRadius;\r\n    }\r\n\r\n    set offsetRadius(v: number) {\r\n        this.audio.offsetRadius = v;\r\n    }\r\n\r\n    setLocalPose(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.audio.setUserPose(this.localUserID, px, py, pz, fx, fy, fz, ux, uy, uz, 0);\r\n        this._meta.setLocalPose(px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPoseImmediate(px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this.audio.setUserPose(this.localUserID, px, py, pz, fx, fy, fz, ux, uy, uz, 0);\r\n        this._meta.setLocalPoseImmediate(px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setLocalPointer(name: string, px: number, py: number, pz: number, fx: number, fy: number, fz: number, ux: number, uy: number, uz: number): void {\r\n        this._meta.setLocalPointer(name, px, py, pz, fx, fy, fz, ux, uy, uz);\r\n    }\r\n\r\n    setAvatarEmoji(emoji: Emoji): void {\r\n        this._meta.setAvatarEmoji(emoji);\r\n    }\r\n\r\n    setAvatarURL(url: string): void {\r\n        this._meta.setAvatarURL(url);\r\n    }\r\n\r\n    emote(emoji: Emoji): void {\r\n        this._meta.emote(emoji);\r\n    }\r\n\r\n    chat(text: string): void {\r\n        this._meta.chat(text);\r\n    }\r\n\r\n    async setPreferredDevices(): Promise<void> {\r\n        await this._tele.setPreferredDevices();\r\n    }\r\n\r\n    async setAudioInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        await this._tele.setAudioInputDevice(device);\r\n    }\r\n\r\n    async setVideoInputDevice(device: MediaDeviceInfo): Promise<void> {\r\n        await this._tele.setVideoInputDevice(device);\r\n    }\r\n\r\n    async getCurrentAudioInputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentAudioInputDevice();\r\n    }\r\n\r\n    async getCurrentVideoInputDevice(): Promise<MediaDeviceInfo> {\r\n        return await this._tele.getCurrentVideoInputDevice();\r\n    }\r\n\r\n    async toggleAudioMuted(): Promise<boolean> {\r\n        return await this._tele.toggleAudioMuted();\r\n    }\r\n\r\n    async toggleVideoMuted(): Promise<boolean> {\r\n        return await this._tele.toggleVideoMuted();\r\n    }\r\n\r\n    async getAudioMuted(): Promise<boolean> {\r\n        return await this._tele.getAudioMuted();\r\n    }\r\n\r\n    async getVideoMuted(): Promise<boolean> {\r\n        return await this._tele.getVideoMuted();\r\n    }\r\n\r\n    get metadataState(): ConnectionState {\r\n        return this._meta.metadataState;\r\n    }\r\n\r\n    get localUserID() {\r\n        return this._tele.localUserID;\r\n    }\r\n\r\n    get localUserName() {\r\n        return this._tele.localUserName;\r\n    }\r\n\r\n    get roomName() {\r\n        return this._tele.roomName;\r\n    }\r\n\r\n    userExists(id: string): boolean {\r\n        return this._tele.userExists(id);\r\n    }\r\n\r\n    getUserNames(): string[][] {\r\n        return this._tele.getUserNames();\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        await this._tele.connect();\r\n        if (this._tele.connectionState === ConnectionState.Connected) {\r\n            await this._meta.connect();\r\n        }\r\n    }\r\n\r\n    async join(roomName: string): Promise<void> {\r\n        await this._tele.join(roomName);\r\n        if (this._tele.conferenceState === ConnectionState.Connected) {\r\n            await this._meta.join(roomName);\r\n        }\r\n    }\r\n\r\n    async identify(userName: string): Promise<void> {\r\n        await this._tele.identify(userName);\r\n        await this._meta.identify(this.localUserID);\r\n    }\r\n\r\n    async leave(): Promise<void> {\r\n        await this._meta.leave();\r\n        await this._tele.leave();\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        await this._meta.disconnect();\r\n        await this._tele.disconnect();\r\n    }\r\n\r\n    update(): void {\r\n        this.audio.update();\r\n    }\r\n\r\n    async setAudioOutputDevice(device: MediaDeviceInfo) {\r\n        this._tele.setAudioOutputDevice(device);\r\n        if (canChangeAudioOutput) {\r\n            await this.audio.setAudioOutputDeviceID(this._tele.preferredAudioOutputID);\r\n        }\r\n    }\r\n\r\n    async setAudioMuted(muted: boolean) {\r\n        let isMuted = this.isAudioMuted;\r\n        if (muted !== isMuted) {\r\n            isMuted = await this.toggleAudioMuted();\r\n        }\r\n        return isMuted;\r\n    }\r\n\r\n    async setVideoMuted(muted: boolean) {\r\n        let isMuted = this.isVideoMuted;\r\n        if (muted !== isMuted) {\r\n            isMuted = await this.toggleVideoMuted();\r\n        }\r\n        return isMuted;\r\n    }\r\n\r\n}","export * from \"./audio/canChangeAudioOutput\";\r\nexport * from \"./meta/signalr/SignalRMetadataClient\";\r\nexport * from \"./meta/BaseMetadataClient\";\r\nexport * from \"./tele/BaseTeleconferenceClient\";\r\nexport { Calla as Client } from \"./Calla\";\r\nexport {\r\n    CallaTeleconferenceEventType as TeleconferenceEvents,\r\n    CallaMetadataEventType as MetadataEvents\r\n} from \"./CallaEvents\";\r\n\r\nimport { version } from \"./package.json\";\r\nconsole.info(`Calla v${version}.`);\r\n\r\nexport { version };"],"names":["AbortController"],"mappings":";;;IAAA,SAAS,CAAC,CAAC,CAAM,EAAE,CAAS,EAAE,CAAW;QACrC,OAAO,OAAO,CAAC,KAAK,CAAC;eACd,CAAC,YAAY,CAAC,CAAC;IAC1B,CAAC;aAEe,UAAU,CAAC,GAAQ;QAC/B,OAAO,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;aA8Be,WAAW,CAAC,CAAQ,EAAE,GAAY;QAC9C,MAAM,IAAI,KAAK,CAAC,CAAC,GAAG,IAAI,qBAAqB,IAAI,CAAC,CAAC,CAAC;IACxD;;ICrCA;;;UAGa,oBAAoB,GAAG,UAAU,CAAE,gBAAgB,CAAC,SAAiB,CAAC,SAAS;;ICL5F;IACA;IAEA;IACA;UACa,iBAAiB;QAInB,OAAO,KAAK,CAAC,MAAc;YAC9B,OAAO,GAAG,MAAM,GAAG,iBAAiB,CAAC,eAAe,EAAE,CAAC;SAC1D;QAEM,OAAO,KAAK,CAAC,KAAa;YAC7B,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,iBAAiB,CAAC,eAAe,EAAE;gBAC/D,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC7C;YAED,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAChE,QAAQ,CAAC,GAAG,EAAE,CAAC;YACf,OAAO,QAAQ,CAAC;SACnB;;IAfa,qCAAmB,GAAG,IAAI,CAAC;IAC3B,iCAAe,GAAG,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;;ICP9F;IACA;IAEA;IACA;;;;IAIA,IAAY,QAeX;IAfD,WAAY,QAAQ;;QAEhB,yCAAS,CAAA;;QAET,yCAAS,CAAA;;QAET,qDAAe,CAAA;;QAEf,6CAAW,CAAA;;QAEX,yCAAS,CAAA;;QAET,+CAAY,CAAA;;QAEZ,uCAAQ,CAAA;IACZ,CAAC,EAfW,QAAQ,KAAR,QAAQ;;ICRpB;IACA;IAIA;UACa,UAAU;QAInB,iBAAwB;;;QAIjB,GAAG,CAAC,SAAmB,EAAE,QAAgB;SAC/C;;IARD;IACc,mBAAQ,GAAY,IAAI,UAAU,EAAE;;ICRtD;IAUA;IACA;IACO,MAAM,OAAO,GAAW,iBAAiB,CAAC;IAEjD;UACa,GAAG;QACL,OAAO,UAAU,CAAC,GAAQ,EAAE,IAAY;YAC3C,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,yBAAyB,CAAC,CAAC;aAC1D;SACJ;QACM,OAAO,UAAU,CAAC,GAAW,EAAE,IAAY;YAC9C,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,QAAQ,IAAI,iCAAiC,CAAC,CAAC;aAClE;SACJ;QAEM,OAAO,IAAI,CAAC,GAAQ,EAAE,MAAW,EAAE,IAAY;;YAElD,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,WAAW,IAAI,WAAW,GAAG,GAAG,CAAC,CAAC;aACrD;SACJ;KACJ;IAED;UACa,QAAQ;QACV,WAAW,SAAS;YACvB,OAAO,OAAO,MAAM,KAAK,QAAQ,CAAC;SACrC;QAEM,WAAW,WAAW;YACzB,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,eAAe,IAAI,IAAI,CAAC;SAC9D;KACJ;IAED;aACgB,aAAa,CAAC,IAAS,EAAE,cAAuB;QAC5D,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;YACrB,MAAM,GAAG,yBAAyB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpD,IAAI,cAAc,EAAE;gBAChB,MAAM,IAAI,eAAe,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC;aACvD;SACJ;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACjC,MAAM,GAAG,yBAAyB,IAAI,CAAC,MAAM,EAAE,CAAC;YAChD,IAAI,cAAc,EAAE;gBAChB,MAAM,IAAI,eAAe,IAAI,GAAG,CAAC;aACpC;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;aACgB,iBAAiB,CAAC,IAAiB;QAC/C,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;;QAGlC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG;YACb,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;YAChC,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC;SACzC,CAAC,CAAC;;QAGH,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzC,CAAC;IAED;IACA;aACgB,aAAa,CAAC,GAAQ;QAClC,OAAO,GAAG,IAAI,OAAO,WAAW,KAAK,WAAW;aAC3C,GAAG,YAAY,WAAW;;iBAEtB,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;IACO,eAAe,WAAW,CAAC,MAAe,EAAE,aAAqB,EAAE,UAAsB,EAAE,GAAW,EAAE,kBAAgE,EAC3K,OAA6B,EAAE,iBAA0B,EAAE,eAAwB,EAAE,cAA8B;QACnH,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,kBAAkB,EAAE;YACpB,MAAM,KAAK,GAAG,MAAM,kBAAkB,EAAE,CAAC;YACzC,IAAI,KAAK,EAAE;gBACP,OAAO,GAAG;oBACN,CAAC,eAAe,GAAG,UAAU,KAAK,EAAE;iBACvC,CAAC;aACL;SACJ;QAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,kBAAkB,EAAE,CAAC;QAC1C,OAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAE/B,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,aAAa,6BAA6B,aAAa,CAAC,OAAO,EAAE,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAEvH,MAAM,YAAY,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,aAAa,GAAG,MAAM,CAAC;QACrE,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE;YACxC,OAAO;YACP,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,cAAc,EAAE;YAC1C,YAAY;YACZ,eAAe;SAClB,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,aAAa,kDAAkD,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;IAC1H,CAAC;IAED;aACgB,YAAY,CAAC,MAA2B;QACpD,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,OAAO,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;SAClD;QAED,IAAI,MAAM,KAAK,IAAI,EAAE;YACjB,OAAO,UAAU,CAAC,QAAQ,CAAC;SAC9B;QAED,IAAK,MAAkB,CAAC,GAAG,EAAE;YACzB,OAAO,MAAiB,CAAC;SAC5B;QAED,OAAO,IAAI,aAAa,CAAC,MAAkB,CAAC,CAAC;IACjD,CAAC;IAED;UACa,mBAAmB;QAI5B,YAAY,OAAmB,EAAE,QAA8B;YAC3D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QAEM,OAAO;YACV,MAAM,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACZ,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC3C;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;gBACpE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aACnD;SACJ;KACJ;IAED;UACa,aAAa;QAWtB,YAAY,eAAyB;YACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;SAChC;QAEM,GAAG,CAAC,QAAkB,EAAE,OAAe;YAC1C,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;gBAClC,QAAQ,QAAQ;oBACZ,KAAK,QAAQ,CAAC,QAAQ,CAAC;oBACvB,KAAK,QAAQ,CAAC,KAAK;wBACf,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;wBAC5F,MAAM;oBACV,KAAK,QAAQ,CAAC,OAAO;wBACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;wBAC3F,MAAM;oBACV,KAAK,QAAQ,CAAC,WAAW;wBACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;wBAC3F,MAAM;oBACV;;wBAEI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;wBAC1F,MAAM;iBACb;aACJ;SACJ;KACJ;IAED;aACgB,kBAAkB;QAC9B,IAAI,mBAAmB,GAAG,sBAAsB,CAAC;QACjD,OAAO,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAC9G,CAAC;IAED;aACgB,kBAAkB,CAAC,OAAe,EAAE,EAAU,EAAE,OAAe,EAAE,cAAkC;;QAE/G,IAAI,SAAS,GAAW,oBAAoB,CAAC;QAE7C,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzC,SAAS,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;QACvD,SAAS,IAAI,KAAK,OAAO,IAAI,CAAC;QAE9B,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YACjB,SAAS,IAAI,GAAG,EAAE,IAAI,CAAC;SAC1B;aAAM;YACH,SAAS,IAAI,cAAc,CAAC;SAC/B;QAED,SAAS,IAAI,GAAG,OAAO,EAAE,CAAC;QAE1B,IAAI,cAAc,EAAE;YAChB,SAAS,IAAI,KAAK,cAAc,EAAE,CAAC;SACtC;aAAM;YACH,SAAS,IAAI,2BAA2B,CAAC;SAC5C;QAED,SAAS,IAAI,GAAG,CAAC;QACjB,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,SAAS,SAAS;QACd,OAAO,SAAS,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED,SAAS,iBAAiB;QACtB,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,SAAS,UAAU;QACf,OAAO,SAAS,CAAC;IACrB;;IC7OA;IAkBA;UACa,iBAAiB;;QAEnB,qBAAqB,CAAC,gBAAyC;YAClE,OAAO,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACpE;QAEM,sBAAsB,CAAC,IAAS;YACnC,IAAI,eAAyC,CAAC;YAC9C,IAAI,WAAmB,CAAC;YACxB,IAAI,aAAkB,CAAC;YAEvB,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;;gBAErB,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;gBACxC,MAAM,cAAc,GAAG,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;gBACjF,IAAI,cAAc,KAAK,CAAC,CAAC,EAAE;oBACvB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC7C;;;gBAID,MAAM,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;gBAC1C,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAyB,CAAC,CAAC;gBAC5G,aAAa,GAAG,CAAC,UAAU,CAAC,UAAU,GAAG,cAAc,IAAI,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;aAC7G;iBAAM;gBACH,MAAM,QAAQ,GAAW,IAAI,CAAC;gBAC9B,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;gBAC3E,IAAI,cAAc,KAAK,CAAC,CAAC,EAAE;oBACvB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC7C;;;gBAID,MAAM,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;gBAC1C,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;gBACpD,aAAa,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,IAAI,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;aAClG;;YAGD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,QAAQ,CAAC,IAAI,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;aACrE;YACD,eAAe,GAAG,QAAQ,CAAC;;;YAI3B,OAAO,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;SAC3C;;;ICpEL;IACA;IAKA;IACA,IAAY,WAeX;IAfD,WAAY,WAAW;;QAEnB,yDAAc,CAAA;;QAEd,yDAAc,CAAA;;QAEd,yDAAc,CAAA;;QAEd,qEAAoB,CAAA;;QAEpB,qEAAoB,CAAA;;QAEpB,6CAAQ,CAAA;;QAER,+CAAS,CAAA;IACb,CAAC,EAfW,WAAW,KAAX,WAAW;;ICPvB;IAMA;UACa,OAAO;QAOhB;YACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;SACvB;QAEM,IAAI,CAAC,IAAO;YACf,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ;QAEM,KAAK,CAAC,GAAQ;YACjB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACnC,IAAI,QAAQ,CAAC,KAAK,EAAE;oBAChB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACvB;aACJ;SACJ;QAEM,QAAQ;YACX,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACnC,IAAI,QAAQ,CAAC,QAAQ,EAAE;oBACnB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACvB;aACJ;SACJ;QAEM,SAAS,CAAC,QAA8B;YAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO,IAAI,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAClD;;;IC3CL;IAYA,MAAM,qBAAqB,GAAW,EAAE,GAAG,IAAI,CAAC;IAChD,MAAM,2BAA2B,GAAW,EAAE,GAAG,IAAI,CAAC;IAEtD;IACA,IAAY,kBAWX;IAXD,WAAY,kBAAkB;;QAE1B,mDAA6B,CAAA;;QAE7B,+CAAyB,CAAA;;QAEzB,6CAAuB,CAAA;;QAEvB,qDAA+B,CAAA;;QAE/B,mDAA6B,CAAA;IACjC,CAAC,EAXW,kBAAkB,KAAlB,kBAAkB,QAW7B;IAED;UACa,aAAa;QAyDtB,YAAoB,UAAuB,EAAE,MAAe,EAAE,QAAsB,EAAE,eAA8B;YAChH,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YACzC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACjC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAErC,IAAI,CAAC,2BAA2B,GAAG,qBAAqB,CAAC;YACzD,IAAI,CAAC,+BAA+B,GAAG,2BAA2B,CAAC;YAEnE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;YAEjD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,IAAS,KAAK,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC1E,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,KAAa,KAAK,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAE1E,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;YAChC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;YACvC,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC;YACvD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAE/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;SACnF;;;;;;QAhCM,OAAO,MAAM,CAAC,UAAuB,EAAE,MAAe,EAAE,QAAsB,EAAE,eAA8B;YACjH,OAAO,IAAI,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;SAC3E;;QAiCD,IAAI,KAAK;YACL,OAAO,IAAI,CAAC,eAAe,CAAC;SAC/B;;;;QAKD,IAAI,YAAY;YACZ,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC;SAC1E;;QAGD,IAAI,OAAO;YACP,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC;SACxC;;;;;;QAOD,IAAI,OAAO,CAAC,GAAW;YACnB,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;gBACtH,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;aAC7G;YAED,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aACjE;YAED,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,GAAG,CAAC;SACjC;;;;;QAMM,KAAK;YACR,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACrD,OAAO,IAAI,CAAC,YAAY,CAAC;SAC5B;QAEO,MAAM,yBAAyB;YACnC,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;gBAC1D,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC,CAAC;aAC7G;YAED,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,UAAU,CAAC;YACrD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;YAE3D,IAAI;gBACA,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAE3B,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,SAAS,CAAC;gBACpD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uCAAuC,CAAC,CAAC;aAC5E;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC;gBACvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,gEAAgE,CAAC,IAAI,CAAC,CAAC;gBACvG,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC5B;SACJ;QAEO,MAAM,aAAa;YACvB,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;YACtC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;;YAEvC,MAAM,gBAAgB,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;gBACjD,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;gBACjC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;aACnC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAE1D,IAAI;gBACA,MAAM,gBAAgB,GAA4B;oBAC9C,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;oBAC5B,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;iBACjC,CAAC;gBAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,4BAA4B,CAAC,CAAC;gBAE9D,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAEvF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,sBAAsB,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC;;gBAGpF,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAE9B,MAAM,gBAAgB,CAAC;;;;gBAKvB,IAAI,IAAI,CAAC,oBAAoB,EAAE;;;;oBAI3B,MAAM,IAAI,CAAC,oBAAoB,CAAC;iBACnC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,2CAA2C,CAAC,CAAC;gBAElH,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;;;gBAIxB,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,CAAC;aACX;SACJ;;;;;QAMM,MAAM,IAAI;;YAEb,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YAEvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACvC,MAAM,IAAI,CAAC,WAAW,CAAC;YAEvB,IAAI;;gBAEA,MAAM,YAAY,CAAC;aACtB;YAAC,OAAO,CAAC,EAAE;;aAEX;SACJ;QAEO,YAAY,CAAC,KAAa;YAC9B,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;gBAC1D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,8BAA8B,KAAK,4DAA4D,CAAC,CAAC;gBACjI,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,aAAa,EAAE;gBAC3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,+BAA+B,KAAK,yEAAyE,CAAC,CAAC;gBAC/I,OAAO,IAAI,CAAC,WAAY,CAAC;aAC5B;YAED,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,aAAa,CAAC;YAExD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;YAE3D,IAAI,IAAI,CAAC,oBAAoB,EAAE;;;;gBAI3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,+DAA+D,CAAC,CAAC;gBAEjG,YAAY,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBACxC,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;gBAEtC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,oBAAoB,GAAG,KAAK,IAAI,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;;;;YAKtH,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtC;;;;;;;;QASM,MAAM,CAAU,UAAkB,EAAE,GAAG,IAAW;YACrD,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAC/D,MAAM,oBAAoB,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;YAEtF,IAAI,YAA2B,CAAC;YAChC,MAAM,OAAO,GAAG,IAAI,OAAO,EAAK,CAAC;YACjC,OAAO,CAAC,cAAc,GAAG;gBACrB,MAAM,gBAAgB,GAA4B,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;gBAEjH,OAAO,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;gBAEzD,OAAO,YAAY,CAAC,IAAI,CAAC;oBACrB,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;iBAClD,CAAC,CAAC;aACN,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,CAAC,eAA6D,EAAE,KAAa;gBAC7H,IAAI,KAAK,EAAE;oBACP,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,OAAO;iBACV;qBAAM,IAAI,eAAe,EAAE;;oBAExB,IAAI,eAAe,CAAC,IAAI,KAAK,WAAW,CAAC,UAAU,EAAE;wBACjD,IAAI,eAAe,CAAC,KAAK,EAAE;4BACvB,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;yBACnD;6BAAM;4BACH,OAAO,CAAC,QAAQ,EAAE,CAAC;yBACtB;qBACJ;yBAAM;wBACH,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,EAAO,CAAC;qBAC7C;iBACJ;aACJ,CAAC;YAEF,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC;iBACrD,KAAK,CAAC,CAAC,CAAC;gBACL,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,OAAO,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;aAC5D,CAAC,CAAC;YAEP,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1C,OAAO,OAAO,CAAC;SAClB;QAEO,WAAW,CAAC,OAAY;YAC5B,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxC;;;;;QAMO,gBAAgB,CAAC,OAAY;YACjC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;SAChE;;;;;;;;;;QAWM,IAAI,CAAC,UAAkB,EAAE,GAAG,IAAW;YAC1C,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAC/D,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;YAEpG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAEzC,OAAO,WAAW,CAAC;SACtB;;;;;;;;;;;;QAaM,MAAM,CAAU,UAAkB,EAAE,GAAG,IAAW;YACrD,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAC/D,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YAEvF,MAAM,CAAC,GAAG,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM;;gBAEvC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAa,CAAC,GAAG,CAAC,eAA6D,EAAE,KAAa;oBAC9H,IAAI,KAAK,EAAE;wBACP,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;qBACV;yBAAM,IAAI,eAAe,EAAE;;wBAExB,IAAI,eAAe,CAAC,IAAI,KAAK,WAAW,CAAC,UAAU,EAAE;4BACjD,IAAI,eAAe,CAAC,KAAK,EAAE;gCACvB,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;6BAC5C;iCAAM;gCACH,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;6BACnC;yBACJ;6BAAM;4BACH,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA4B,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;yBACzE;qBACJ;iBACJ,CAAC;gBAEF,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC;qBAC3D,KAAK,CAAC,CAAC,CAAC;oBACL,MAAM,CAAC,CAAC,CAAC,CAAC;;oBAEV,OAAO,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAa,CAAC,CAAC;iBAC7D,CAAC,CAAC;gBAEP,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;aAC7C,CAAC,CAAC;YAEH,OAAO,CAAC,CAAC;SACZ;;;;;;QAOM,EAAE,CAAC,UAAkB,EAAE,SAAmC;YAC7D,IAAI,CAAC,UAAU,IAAI,CAAC,SAAS,EAAE;gBAC3B,OAAO;aACV;YAED,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC3B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;aACjC;;YAGD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;gBACpD,OAAO;aACV;YAED,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;QAiBM,GAAG,CAAC,UAAkB,EAAE,MAAiC;YAC5D,IAAI,CAAC,UAAU,EAAE;gBACb,OAAO;aACV;YAED,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC1C,IAAI,CAAC,QAAQ,EAAE;gBACX,OAAO;aACV;YACD,IAAI,MAAM,EAAE;gBACR,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;oBAClB,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;oBAC9B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;wBACvB,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;qBACnC;iBACJ;aACJ;iBAAM;gBACH,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACnC;SAEJ;;;;;QAMM,OAAO,CAAC,QAAiC;YAC5C,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACvC;SACJ;;;;;QAMM,cAAc,CAAC,QAAiC;YACnD,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7C;SACJ;;;;;QAMM,aAAa,CAAC,QAAyC;YAC1D,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5C;SACJ;QAEO,mBAAmB,CAAC,IAAS;YACjC,IAAI,CAAC,cAAc,EAAE,CAAC;YAEtB,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACjC,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;aACzC;;YAGD,IAAI,IAAI,EAAE;;gBAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEhE,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;oBAC5B,QAAQ,OAAO,CAAC,IAAI;wBAChB,KAAK,WAAW,CAAC,UAAU;4BACvB,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;4BACjC,MAAM;wBACV,KAAK,WAAW,CAAC,UAAU,CAAC;wBAC5B,KAAK,WAAW,CAAC,UAAU;4BACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;4BACtD,IAAI,QAAQ,EAAE;gCACV,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,UAAU,EAAE;oCACzC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;iCAC/C;gCACD,QAAQ,CAAC,OAAO,CAAC,CAAC;6BACrB;4BACD,MAAM;wBACV,KAAK,WAAW,CAAC,IAAI;;4BAEjB,MAAM;wBACV,KAAK,WAAW,CAAC,KAAK;4BAClB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,qCAAqC,CAAC,CAAC;4BAE7E,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,qCAAqC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;4BAE3G,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,EAAE;;;;gCAKjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;6BAC/B;iCAAM;;gCAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;6BAC/C;4BAED,MAAM;wBACV;4BACI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,yBAAyB,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;4BAC5E,MAAM;qBACb;iBACJ;aACJ;YAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAEO,wBAAwB,CAAC,IAAS;YACtC,IAAI,eAAyC,CAAC;YAC9C,IAAI,aAAkB,CAAC;YAEvB,IAAI;gBACA,CAAC,aAAa,EAAE,eAAe,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;aAC1F;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,OAAO,GAAG,oCAAoC,GAAG,CAAC,CAAC;gBACzD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAEzC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAC9B,MAAM,KAAK,CAAC;aACf;YACD,IAAI,eAAe,CAAC,KAAK,EAAE;gBACvB,MAAM,OAAO,GAAG,mCAAmC,GAAG,eAAe,CAAC,KAAK,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAEzC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAC9B,MAAM,KAAK,CAAC;aACf;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,4BAA4B,CAAC,CAAC;aACjE;YAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,OAAO,aAAa,CAAC;SACxB;QAEO,sBAAsB;YAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,EAAE;gBAC5C,OAAO;aACV;YAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;gBAC/B,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,SAAS,EAAE;oBACvD,IAAI;wBACA,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;qBAClD;oBAAC,MAAM;;;wBAGJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBAC3B;iBACJ;aACJ,EAAE,IAAI,CAAC,+BAA+B,CAAC,CAAC;SAC5C;QAEO,kBAAkB;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,EAAE;;gBAE1E,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,MAAM,IAAI,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,2BAA2B,CAAC,CAAC;aACjG;SACJ;QAEO,aAAa;;;;YAIjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC,CAAC;SAC1G;QAEO,kBAAkB,CAAC,iBAAoC;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;YACrE,IAAI,OAAO,EAAE;gBACT,IAAI;oBACA,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;iBACtE;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,6BAA6B,iBAAiB,CAAC,MAAM,CAAC,WAAW,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC;iBAC9H;gBAED,IAAI,iBAAiB,CAAC,YAAY,EAAE;;oBAEhC,MAAM,OAAO,GAAG,oFAAoF,CAAC;oBACrG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;oBAGzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC5D;aACJ;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,mCAAmC,iBAAiB,CAAC,MAAM,UAAU,CAAC,CAAC;aAC5G;SACJ;QAEO,gBAAgB,CAAC,KAAa;YAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,kCAAkC,KAAK,2BAA2B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;;YAG3H,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;;;YAI7J,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;YAED,IAAI,CAAC,wBAAwB,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC,CAAC;YAExH,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,aAAa,EAAE;gBAC3D,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC7B;iBAAM,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,EAAE;;gBAEtF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACzB;iBAAM,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,SAAS,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC7B;;;;;;SAOJ;QAEO,aAAa,CAAC,KAAa;YAC/B,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACxB,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC;gBACvD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAE/B,IAAI;oBACA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC/D;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,0CAA0C,KAAK,kBAAkB,CAAC,IAAI,CAAC,CAAC;iBAC3G;aACJ;SACJ;QAEO,MAAM,SAAS,CAAC,KAAa;YACjC,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACtC,IAAI,yBAAyB,GAAG,CAAC,CAAC;YAClC,IAAI,UAAU,GAAG,KAAK,KAAK,SAAS,GAAG,KAAK,GAAG,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;YAE5G,IAAI,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;YAExF,IAAI,cAAc,KAAK,IAAI,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oGAAoG,CAAC,CAAC;gBACtI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC1B,OAAO;aACV;YAED,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,YAAY,CAAC;YAEvD,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,6CAA6C,KAAK,IAAI,CAAC,CAAC;aACjG;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;aACrE;YAED,IAAI,IAAI,CAAC,cAAc,EAAE;gBACrB,IAAI;oBACA,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACrE;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,iDAAiD,KAAK,kBAAkB,CAAC,IAAI,CAAC,CAAC;iBAClH;;gBAGD,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;oBAC1D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uFAAuF,CAAC,CAAC;oBACzH,OAAO;iBACV;aACJ;YAED,OAAO,cAAc,KAAK,IAAI,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,4BAA4B,yBAAyB,kBAAkB,cAAc,MAAM,CAAC,CAAC;gBAEnI,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO;oBACtB,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC,OAAO,EAAE,cAAe,CAAC,CAAC;iBACpE,CAAC,CAAC;gBACH,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;gBAEtC,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;oBAC1D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,mFAAmF,CAAC,CAAC;oBACrH,OAAO;iBACV;gBAED,IAAI;oBACA,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;oBAE3B,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,SAAS,CAAC;oBACpD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,yCAAyC,CAAC,CAAC;oBAEjF,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,IAAI;4BACA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;yBAC3F;wBAAC,OAAO,CAAC,EAAE;4BACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uDAAuD,IAAI,CAAC,UAAU,CAAC,YAAY,kBAAkB,CAAC,IAAI,CAAC,CAAC;yBAC/I;qBACJ;oBAED,OAAO;iBACV;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,8CAA8C,CAAC,IAAI,CAAC,CAAC;oBAE3F,IAAI,IAAI,CAAC,eAAe,KAAK,kBAAkB,CAAC,YAAY,EAAE;wBAC1D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qFAAqF,CAAC,CAAC;wBACvH,OAAO;qBACV;oBAED,UAAU,GAAG,CAAC,YAAY,KAAK,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC9D,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,kBAAkB,EAAE,UAAU,CAAC,CAAC;iBACrH;aACJ;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,+CAA+C,IAAI,CAAC,GAAG,EAAE,GAAG,kBAAkB,WAAW,yBAAyB,6CAA6C,CAAC,CAAC;YAEvM,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;QAEO,iBAAiB,CAAC,kBAA0B,EAAE,mBAA2B,EAAE,WAAkB;YACjG,IAAI;gBACA,OAAO,IAAI,CAAC,eAAgB,CAAC,4BAA4B,CAAC;oBACtD,mBAAmB;oBACnB,kBAAkB;oBAClB,WAAW;iBACd,CAAC,CAAC;aACN;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,6CAA6C,kBAAkB,KAAK,mBAAmB,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAChJ,OAAO,IAAI,CAAC;aACf;SACJ;QAEO,wBAAwB,CAAC,KAAY;YACzC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YAEpB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;iBACjB,OAAO,CAAC,CAAC,GAAG;gBACT,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;gBAChC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACzB,CAAC,CAAC;SACV;QAEO,gBAAgB;YACpB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACvC;SACJ;QAEO,cAAc;YAClB,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aACpC;SACJ;QAEO,gBAAgB,CAAC,UAAkB,EAAE,IAAW,EAAE,WAAoB,EAAE,SAAmB;YAC/F,IAAI,WAAW,EAAE;gBACb,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,OAAO;wBACH,SAAS,EAAE,IAAI;wBACf,SAAS;wBACT,MAAM,EAAE,UAAU;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU;qBAC/B,CAAC;iBACL;qBAAM;oBACH,OAAO;wBACH,SAAS,EAAE,IAAI;wBACf,MAAM,EAAE,UAAU;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU;qBAC/B,CAAC;iBACL;aACJ;iBAAM;gBACH,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvC,IAAI,CAAC,YAAY,EAAE,CAAC;gBAEpB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,OAAO;wBACH,SAAS,EAAE,IAAI;wBACf,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;wBACrC,SAAS;wBACT,MAAM,EAAE,UAAU;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU;qBAC/B,CAAC;iBACL;qBAAM;oBACH,OAAO;wBACH,SAAS,EAAE,IAAI;wBACf,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;wBACrC,MAAM,EAAE,UAAU;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU;qBAC/B,CAAC;iBACL;aACJ;SACJ;QAEO,aAAa,CAAC,OAAkC,EAAE,YAA2B;YACjF,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,OAAO;aACV;;YAGD,IAAI,CAAC,YAAY,EAAE;gBACf,YAAY,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;aACpC;;;YAID,KAAK,MAAM,QAAQ,IAAI,OAAO,EAAE;gBAC5B,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;oBACxB,QAAQ,EAAE;wBACN,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;qBACzG;oBACD,KAAK,EAAE,CAAC,GAAG;wBACP,IAAI,OAAe,CAAC;wBACpB,IAAI,GAAG,YAAY,KAAK,EAAE;4BACtB,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;yBACzB;6BAAM,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE;4BAC5B,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;yBAC5B;6BAAM;4BACH,OAAO,GAAG,eAAe,CAAC;yBAC7B;wBAED,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;qBAClH;oBACD,IAAI,EAAE,CAAC,IAAI;wBACP,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC/G;iBACJ,CAAC,CAAC;aACN;SACJ;QAEO,sBAAsB,CAAC,IAAW;YACtC,MAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,MAAM,SAAS,GAAa,EAAE,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;oBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;oBACnC,IAAI,CAAC,YAAY,EAAE,CAAC;;oBAEpB,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oBAC7B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;;oBAGpC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACrB;aACJ;YAED,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SAC/B;QAEO,YAAY,CAAC,GAAQ;;YAEzB,OAAO,GAAG,IAAI,GAAG,CAAC,SAAS,IAAI,OAAO,GAAG,CAAC,SAAS,KAAK,UAAU,CAAC;SACtE;QAEO,sBAAsB,CAAC,UAAkB,EAAE,IAAW,EAAE,SAAmB;YAC/E,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,OAAO;oBACH,SAAS,EAAE,IAAI;oBACf,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;oBACrC,SAAS;oBACT,MAAM,EAAE,UAAU;oBAClB,IAAI,EAAE,WAAW,CAAC,gBAAgB;iBACrC,CAAC;aACL;iBAAM;gBACH,OAAO;oBACH,SAAS,EAAE,IAAI;oBACf,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;oBACrC,MAAM,EAAE,UAAU;oBAClB,IAAI,EAAE,WAAW,CAAC,gBAAgB;iBACrC,CAAC;aACL;SACJ;QAEO,sBAAsB,CAAC,EAAU;YACrC,OAAO;gBACH,YAAY,EAAE,EAAE;gBAChB,IAAI,EAAE,WAAW,CAAC,gBAAgB;aACrC,CAAC;SACL;QAEO,uBAAuB,CAAC,EAAU,EAAE,IAAS;YACjD,OAAO;gBACH,YAAY,EAAE,EAAE;gBAChB,IAAI;gBACJ,IAAI,EAAE,WAAW,CAAC,UAAU;aAC/B,CAAC;SACL;QAEO,uBAAuB,CAAC,EAAU,EAAE,KAAW,EAAE,MAAY;YACjE,IAAI,KAAK,EAAE;gBACP,OAAO;oBACH,KAAK;oBACL,YAAY,EAAE,EAAE;oBAChB,IAAI,EAAE,WAAW,CAAC,UAAU;iBAC/B,CAAC;aACL;YAED,OAAO;gBACH,YAAY,EAAE,EAAE;gBAChB,MAAM;gBACN,IAAI,EAAE,WAAW,CAAC,UAAU;aAC/B,CAAC;SACL;;;ICz8BL;IACA;IAIA;IACA,MAAM,oCAAoC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAE3E;UACa,sBAAsB;QAG/B,YAAY,WAAsB;YAC9B,IAAI,CAAC,WAAW,GAAG,WAAW,KAAK,SAAS,GAAG,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,GAAG,oCAAoC,CAAC;SAChH;QAEM,4BAA4B,CAAC,YAA0B;YAC1D,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;SAC5D;;;IClBL;IACA;IAEA;UACa,SAAU,SAAQ,KAAK;;;;;;QAahC,YAAY,YAAoB,EAAE,UAAkB;YAChD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;YACvC,KAAK,CAAC,YAAY,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;;;YAI7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;KACJ;IAED;UACa,YAAa,SAAQ,KAAK;;;;;QASnC,YAAY,eAAuB,qBAAqB;YACpD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;YACvC,KAAK,CAAC,YAAY,CAAC,CAAC;;;YAIpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;KACJ;IAED;UACa,UAAW,SAAQ,KAAK;;;;;QASjC,YAAY,eAAuB,oBAAoB;YACnD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;YACvC,KAAK,CAAC,YAAY,CAAC,CAAC;;;YAIpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;;;ICjEL;IACA;IAgCA;UACa,YAAY;QAqCrB,YACoB,UAAkB,EAClB,UAAmB,EACnB,OAA8B;YAF9B,eAAU,GAAV,UAAU,CAAQ;YAClB,eAAU,GAAV,UAAU,CAAS;YACnB,YAAO,GAAP,OAAO,CAAuB;SACjD;KACJ;IAED;;;;UAIsB,UAAU;QAerB,GAAG,CAAC,GAAW,EAAE,OAAqB;YACzC,OAAO,IAAI,CAAC,IAAI,CAAC;gBACb,GAAG,OAAO;gBACV,MAAM,EAAE,KAAK;gBACb,GAAG;aACN,CAAC,CAAC;SACN;QAgBM,IAAI,CAAC,GAAW,EAAE,OAAqB;YAC1C,OAAO,IAAI,CAAC,IAAI,CAAC;gBACb,GAAG,OAAO;gBACV,MAAM,EAAE,MAAM;gBACd,GAAG;aACN,CAAC,CAAC;SACN;QAgBM,MAAM,CAAC,GAAW,EAAE,OAAqB;YAC5C,OAAO,IAAI,CAAC,IAAI,CAAC;gBACb,GAAG,OAAO;gBACV,MAAM,EAAE,QAAQ;gBAChB,GAAG;aACN,CAAC,CAAC;SACN;;;ICnJL;UAUa,eAAgB,SAAQ,UAAU;QAO3C,YAAmB,MAAe;YAC9B,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;;;gBAG9B,MAAM,WAAW,GAAG,OAAO,mBAAmB,KAAK,UAAU,GAAG,uBAAuB,GAAG,OAAO,CAAC;;gBAGlG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,CAAC;gBACzD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;;;gBAI3C,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;;gBAGvE,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC;aAC9D;iBAAM;gBACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;aAC9C;SACJ;;QAGM,MAAM,IAAI,CAAC,OAAoB;;YAElC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;gBACpD,MAAM,IAAI,UAAU,EAAE,CAAC;aAC1B;YAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACtC;YAED,MAAM,eAAe,GAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAEvD,IAAI,KAAU,CAAC;;YAEf,IAAI,OAAO,CAAC,WAAW,EAAE;gBACrB,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG;oBAC1B,eAAe,CAAC,KAAK,EAAE,CAAC;oBACxB,KAAK,GAAG,IAAI,UAAU,EAAE,CAAC;iBAC5B,CAAC;aACL;;;YAID,IAAI,SAAS,GAAQ,IAAI,CAAC;YAC1B,IAAI,OAAO,CAAC,OAAO,EAAE;gBACjB,MAAM,SAAS,GAAG,OAAO,CAAC,OAAQ,CAAC;gBACnC,SAAS,GAAG,UAAU,CAAC;oBACnB,eAAe,CAAC,KAAK,EAAE,CAAC;oBACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;oBAChE,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;iBAC9B,EAAE,SAAS,CAAC,CAAC;aACjB;YAED,IAAI,QAAkB,CAAC;YACvB,IAAI;gBACA,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAI,EAAE;oBAC1C,IAAI,EAAE,OAAO,CAAC,OAAQ;oBACtB,KAAK,EAAE,UAAU;oBACjB,WAAW,EAAE,OAAO,CAAC,eAAe,KAAK,IAAI,GAAG,SAAS,GAAG,aAAa;oBACzE,OAAO,EAAE;wBACL,cAAc,EAAE,0BAA0B;wBAC1C,kBAAkB,EAAE,gBAAgB;wBACpC,GAAG,OAAO,CAAC,OAAO;qBACrB;oBACD,MAAM,EAAE,OAAO,CAAC,MAAO;oBACvB,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,eAAe,CAAC,MAAM;iBACjC,CAAC,CAAC;aACN;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,KAAK,EAAE;oBACP,MAAM,KAAK,CAAC;iBACf;gBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CACX,QAAQ,CAAC,OAAO,EAChB,4BAA4B,CAAC,GAAG,CACnC,CAAC;gBACF,MAAM,CAAC,CAAC;aACX;oBAAS;gBACN,IAAI,SAAS,EAAE;oBACX,YAAY,CAAC,SAAS,CAAC,CAAC;iBAC3B;gBACD,IAAI,OAAO,CAAC,WAAW,EAAE;oBACrB,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;iBACtC;aACJ;YAED,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gBACd,MAAM,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC7D;YAED,MAAM,OAAO,GAAG,kBAAkB,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;YACnE,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC;YAE9B,OAAO,IAAI,YAAY,CACnB,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,UAAU,EACnB,OAAO,CACV,CAAC;SACL;KACJ;IAED,SAAS,kBAAkB,CAAC,QAAkB,EAAE,YAAyC;QACrF,IAAI,OAAO,CAAC;QACZ,QAAQ,YAAY;YAChB,KAAK,aAAa;gBACd,OAAO,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;gBACjC,MAAM;YACV,KAAK,MAAM;gBACP,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC1B,MAAM;YACV,KAAK,MAAM,CAAC;YACZ,KAAK,UAAU,CAAC;YAChB,KAAK,MAAM;gBACP,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,oBAAoB,CAAC,CAAC;YACzD;gBACI,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC1B,MAAM;SACb;QAED,OAAO,OAAO,CAAC;IACnB;;ICnJA;UAOa,aAAc,SAAQ,UAAU;QAGzC,YAAmB,MAAe;YAC9B,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACxB;;QAGM,IAAI,CAAC,OAAoB;;YAE5B,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;gBACpD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;aAC1D;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBACd,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;aACvD;YAED,OAAO,IAAI,OAAO,CAAe,CAAC,OAAO,EAAE,MAAM;gBAC7C,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;gBAEjC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAO,EAAE,OAAO,CAAC,GAAI,EAAE,IAAI,CAAC,CAAC;gBAC9C,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,KAAK,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC;gBAC7F,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;;gBAE3D,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,0BAA0B,CAAC,CAAC;gBAEjE,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;gBAChC,IAAI,OAAO,EAAE;oBACT,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;yBACf,OAAO,CAAC,CAAC,MAAM;wBACZ,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;qBACjD,CAAC,CAAC;iBACV;gBAED,IAAI,OAAO,CAAC,YAAY,EAAE;oBACtB,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;iBAC3C;gBAED,IAAI,OAAO,CAAC,WAAW,EAAE;oBACrB,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG;wBAC1B,GAAG,CAAC,KAAK,EAAE,CAAC;wBACZ,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;qBAC5B,CAAC;iBACL;gBAED,IAAI,OAAO,CAAC,OAAO,EAAE;oBACjB,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;iBACjC;gBAED,GAAG,CAAC,MAAM,GAAG;oBACT,IAAI,OAAO,CAAC,WAAW,EAAE;wBACrB,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;qBACtC;oBAED,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;wBACvC,OAAO,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;qBAC3F;yBAAM;wBACH,MAAM,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;qBACrD;iBACJ,CAAC;gBAEF,GAAG,CAAC,OAAO,GAAG;oBACV,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,4BAA4B,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;oBAChG,MAAM,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrD,CAAC;gBAEF,GAAG,CAAC,SAAS,GAAG;oBACZ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;oBAChE,MAAM,CAAC,IAAI,YAAY,EAAE,CAAC,CAAC;iBAC9B,CAAC;gBAEF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;aACnC,CAAC,CAAC;SACN;;;ICrFL;IASA;UACa,iBAAkB,SAAQ,UAAU;;QAI7C,YAAmB,MAAe;YAC9B,KAAK,EAAE,CAAC;YAER,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;aACjD;iBAAM,IAAI,OAAO,cAAc,KAAK,WAAW,EAAE;gBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;aAC/C;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAClD;SACJ;;QAGM,IAAI,CAAC,OAAoB;;YAE5B,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;gBACpD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;aAC1D;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBACd,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;aACvD;YAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxC;;;ICzCL;IACA;IAEA;IACA;IACA,IAAY,iBASX;IATD,WAAY,iBAAiB;;QAEzB,yDAAQ,CAAA;;QAER,qEAAc,CAAA;;QAEd,iFAAoB,CAAA;;QAEpB,uEAAe,CAAA;IACnB,CAAC,EATW,iBAAiB,KAAjB,iBAAiB,QAS5B;IAED;IACA,IAAY,cAKX;IALD,WAAY,cAAc;;QAEtB,mDAAQ,CAAA;;QAER,uDAAU,CAAA;IACd,CAAC,EALW,cAAc,KAAd,cAAc;;ICjB1B;IACA;IAEA;IACA;IACA;IAEA;IACA;UACaA,iBAAe;QAA5B;YACY,cAAS,GAAY,KAAK,CAAC;YAC5B,YAAO,GAAwB,IAAI,CAAC;SAkB9C;QAhBU,KAAK;YACR,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,IAAI,CAAC,OAAO,EAAE,CAAC;iBAClB;aACJ;SACJ;QAED,IAAI,MAAM;YACN,OAAO,IAAI,CAAC;SACf;QAED,IAAI,OAAO;YACP,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;IC5BL;IAWA;IACA;UACa,oBAAoB;QAsB7B,YAAY,UAAsB,EAAE,kBAAgE,EAAE,MAAe,EAAE,iBAA0B,EAAE,eAAwB,EAAE,OAAuB;YAChM,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;YAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,SAAS,GAAG,IAAIA,iBAAe,EAAE,CAAC;YACvC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAC3C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;;QAjBD,IAAW,WAAW;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SACjC;QAiBM,MAAM,OAAO,CAAC,GAAW,EAAE,cAA8B;YAC5D,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,GAAG,CAAC,UAAU,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YACjD,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAE3D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YAEf,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qCAAqC,CAAC,CAAC;;YAGvE,IAAI,cAAc,KAAK,cAAc,CAAC,MAAM;iBACvC,OAAO,cAAc,KAAK,WAAW,IAAI,OAAO,IAAI,cAAc,EAAE,CAAC,YAAY,KAAK,QAAQ,CAAC,EAAE;gBAClG,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;aACjH;YAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,kBAAkB,EAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,EAAE,CAAC,IAAI,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAEnD,MAAM,WAAW,GAAgB;gBAC7B,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM;gBAClC,OAAO;gBACP,OAAO,EAAE,MAAM;gBACf,eAAe,EAAE,IAAI,CAAC,eAAe;aACxC,CAAC;YAEF,IAAI,cAAc,KAAK,cAAc,CAAC,MAAM,EAAE;gBAC1C,WAAW,CAAC,YAAY,GAAG,aAAa,CAAC;aAC5C;YAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1C,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;;;YAI3C,MAAM,OAAO,GAAG,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oCAAoC,OAAO,GAAG,CAAC,CAAC;YAChF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YACjE,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;gBAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qDAAqD,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;;gBAG7G,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,IAAI,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAChF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;YAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;SACrD;QAEO,MAAM,cAAc;YACxB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,OAAO,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC1C;YAED,OAAO,IAAI,CAAC;SACf;QAEO,iBAAiB,CAAC,OAAoB,EAAE,KAAoB;YAChE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAClB,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;aACxB;YACD,IAAI,KAAK,EAAE;;gBAEP,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,KAAK,EAAE,CAAC;gBACrD,OAAO;aACV;;YAED,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;;gBAElC,OAAO,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;aAC3C;SACJ;QAEO,MAAM,IAAI,CAAC,GAAW,EAAE,WAAwB;YACpD,IAAI;gBACA,OAAO,IAAI,CAAC,OAAO,EAAE;;oBAEjB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC1C,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;oBAE3C,IAAI;wBACA,MAAM,OAAO,GAAG,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;wBACzC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oCAAoC,OAAO,GAAG,CAAC,CAAC;wBAChF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;wBAEjE,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;4BAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,oDAAoD,CAAC,CAAC;4BAE5F,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;yBACxB;6BAAM,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;4BACpC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qDAAqD,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;;4BAG7G,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,IAAI,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAChF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;yBACxB;6BAAM;;4BAEH,IAAI,QAAQ,CAAC,OAAO,EAAE;gCAClB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,0CAA0C,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gCACtI,IAAI,IAAI,CAAC,SAAS,EAAE;oCAChB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;iCACpC;6BACJ;iCAAM;;gCAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oDAAoD,CAAC,CAAC;6BACzF;yBACJ;qBACJ;oBAAC,OAAO,CAAC,EAAE;wBACR,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;4BAEf,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,wDAAwD,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;yBACxG;6BAAM;4BACH,IAAI,CAAC,YAAY,YAAY,EAAE;;gCAE3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oDAAoD,CAAC,CAAC;6BACzF;iCAAM;;gCAEH,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gCACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;6BACxB;yBACJ;qBACJ;iBACJ;aACJ;oBAAS;gBACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,2CAA2C,CAAC,CAAC;;;gBAI7E,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;oBACnB,IAAI,CAAC,YAAY,EAAE,CAAC;iBACvB;aACJ;SACJ;QAEM,MAAM,IAAI,CAAC,IAAS;YACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC,CAAC;aACpF;YACD,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,GAAI,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACzK;QAEM,MAAM,IAAI;YACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,2CAA2C,CAAC,CAAC;;YAG7E,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAEvB,IAAI;gBACA,MAAM,IAAI,CAAC,SAAS,CAAC;;gBAGrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,qDAAqD,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBAElG,MAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,kBAAkB,EAAE,CAAC;gBAC1C,OAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;gBAE/B,MAAM,aAAa,GAAgB;oBAC/B,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE;oBACxC,eAAe,EAAE,IAAI,CAAC,eAAe;iBACxC,CAAC;gBACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC1C,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBAC7C,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAI,EAAE,aAAa,CAAC,CAAC;gBAEvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,8CAA8C,CAAC,CAAC;aACnF;oBAAS;gBACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,wCAAwC,CAAC,CAAC;;;gBAI1E,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;SACJ;QAEO,YAAY;YAChB,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,UAAU,GAAG,+CAA+C,CAAC;gBACjE,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,UAAU,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;iBAC9C;gBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACjC;SACJ;;;IC5OL;IAUA;UACa,yBAAyB;QAclC,YAAY,UAAsB,EAAE,kBAAgE,EAAE,MAAe,EACzG,iBAA0B,EAAE,sBAA8C,EAAE,eAAwB,EAAE,OAAuB;YACrI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;YAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAC3C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;YACrD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAEM,MAAM,OAAO,CAAC,GAAW,EAAE,cAA8B;YAC5D,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,GAAG,CAAC,UAAU,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YACjD,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAE3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,6BAA6B,CAAC,CAAC;;YAG/D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YAEf,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9C,IAAI,KAAK,EAAE;oBACP,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,gBAAgB,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;iBAC3F;aACJ;YAED,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,MAAM,GAAG,KAAK,CAAC;gBACnB,IAAI,cAAc,KAAK,cAAc,CAAC,IAAI,EAAE;oBACxC,MAAM,CAAC,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC,CAAC;oBAC/F,OAAO;iBACV;gBAED,IAAI,WAAwB,CAAC;gBAC7B,IAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,WAAW,EAAE;oBAC5C,WAAW,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;iBACjG;qBAAM;;oBAEH,MAAM,OAAO,GAAmB,EAAE,CAAC;oBACnC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,kBAAkB,EAAE,CAAC;oBAC3C,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;oBAEtB,WAAW,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAC,EAAqB,CAAC,CAAC;iBAC7J;gBAED,IAAI;oBACA,WAAW,CAAC,SAAS,GAAG,CAAC,CAAe;wBACpC,IAAI,IAAI,CAAC,SAAS,EAAE;4BAChB,IAAI;gCACA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,kCAAkC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gCACpH,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;6BAC1B;4BAAC,OAAO,KAAK,EAAE;gCACZ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gCAClB,OAAO;6BACV;yBACJ;qBACJ,CAAC;oBAEF,WAAW,CAAC,OAAO,GAAG,CAAC,CAAQ;wBAC3B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAE,CAAS,CAAC,IAAI,IAAI,gBAAgB,CAAC,CAAC;wBAC7D,IAAI,MAAM,EAAE;4BACR,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;yBACrB;6BAAM;4BACH,MAAM,CAAC,KAAK,CAAC,CAAC;yBACjB;qBACJ,CAAC;oBAEF,WAAW,CAAC,MAAM,GAAG;wBACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,oBAAoB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;wBACtE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;wBAC/B,MAAM,GAAG,IAAI,CAAC;wBACd,OAAO,EAAE,CAAC;qBACb,CAAC;iBACL;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,CAAC,CAAC,CAAC;oBACV,OAAO;iBACV;aACJ,CAAC,CAAC;SACN;QAEM,MAAM,IAAI,CAAC,IAAS;YACvB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACnB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC,CAAC;aACpF;YACD,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,GAAI,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACjK;QAEM,IAAI;YACP,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAEO,KAAK,CAAC,CAAS;YACnB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;gBAE7B,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACnB;aACJ;SACJ;;;ICnIL;IAQA;UACa,kBAAkB;QAU3B,YAAY,kBAAgE,EAAE,MAAe,EACjF,iBAA0B,EAAE,oBAA0C;YAC9E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;YAC7C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAC3C,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;YAEjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAEM,MAAM,OAAO,CAAC,GAAW,EAAE,cAA8B;YAC5D,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,GAAG,CAAC,UAAU,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YACjD,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;YAEtE,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9C,IAAI,KAAK,EAAE;oBACP,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,gBAAgB,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;iBAC3F;aACJ;YAED,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;gBACrC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACjC,IAAI,SAAgC,CAAC;gBACrC,IAAI,MAAM,GAAG,KAAK,CAAC;gBAEnB,IAAI,CAAC,SAAS,EAAE;;oBAEZ,SAAS,GAAG,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;iBAClD;gBAED,IAAI,cAAc,KAAK,cAAc,CAAC,MAAM,EAAE;oBAC1C,SAAS,CAAC,UAAU,GAAG,aAAa,CAAC;iBACxC;;gBAGD,SAAS,CAAC,MAAM,GAAG,CAAC,MAAa;oBAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,0BAA0B,GAAG,GAAG,CAAC,CAAC;oBACxE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,MAAM,GAAG,IAAI,CAAC;oBACd,OAAO,EAAE,CAAC;iBACb,CAAC;gBAEF,SAAS,CAAC,OAAO,GAAG,CAAC,KAAY;oBAC7B,IAAI,KAAK,GAAQ,IAAI,CAAC;;oBAEtB,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,KAAK,YAAY,UAAU,EAAE;wBAClE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;qBACvB;yBAAM;wBACH,KAAK,GAAG,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;qBAC/D;oBAED,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjB,CAAC;gBAEF,SAAS,CAAC,SAAS,GAAG,CAAC,OAAqB;oBACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,yCAAyC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;oBACjI,IAAI,IAAI,CAAC,SAAS,EAAE;wBAChB,IAAI;4BACA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;yBAChC;wBAAC,OAAO,KAAK,EAAE;4BACZ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;4BAClB,OAAO;yBACV;qBACJ;iBACJ,CAAC;gBAEF,SAAS,CAAC,OAAO,GAAG,CAAC,KAAiB;;;oBAGlC,IAAI,MAAM,EAAE;wBACR,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACrB;yBAAM;wBACH,IAAI,KAAK,GAAQ,IAAI,CAAC;;wBAEtB,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,KAAK,YAAY,UAAU,EAAE;4BAClE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;yBACvB;6BAAM;4BACH,KAAK,GAAG,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;yBAC/D;wBAED,MAAM,CAAC,KAAK,CAAC,CAAC;qBACjB;iBACJ,CAAC;aACL,CAAC,CAAC;SACN;QAEM,IAAI,CAAC,IAAS;YACjB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,KAAK,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE;gBAChF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,wCAAwC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBACxH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC;SAC/D;QAEM,IAAI;YACP,IAAI,IAAI,CAAC,SAAS,EAAE;;;gBAGhB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aACzB;YAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAEO,KAAK,CAAC,KAA0B;;YAEpC,IAAI,IAAI,CAAC,SAAS,EAAE;;gBAEhB,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,SAAQ,CAAC;gBAClC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAQ,CAAC;gBACpC,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,SAAQ,CAAC;gBAClC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC9B;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uCAAuC,CAAC,CAAC;YACzE,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,QAAQ,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;oBAC/E,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,sCAAsC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;iBAClG;qBAAM,IAAI,KAAK,YAAY,KAAK,EAAE;oBAC/B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACvB;qBAAM;oBACH,IAAI,CAAC,OAAO,EAAE,CAAC;iBAClB;aACJ;SACJ;QAEO,YAAY,CAAC,KAAW;YAC5B,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC;SACzF;;;IC1JL;IAuCA,MAAM,aAAa,GAAG,GAAG,CAAC;IAE1B;UACa,cAAc;QAwBvB,YAAY,GAAW,EAAE,UAAkC,EAAE;YAR7C,aAAQ,GAAQ,EAAE,CAAC;YAMlB,qBAAgB,GAAW,CAAC,CAAC;YAG1C,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAE3B,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAEpC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;YACxB,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,KAAK,SAAS,GAAG,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACxG,IAAI,OAAO,OAAO,CAAC,eAAe,KAAK,SAAS,IAAI,OAAO,CAAC,eAAe,KAAK,SAAS,EAAE;gBACvF,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,KAAK,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC;aACpG;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;aACtF;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBACxD,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;aACjC;YAED,IAAI,OAAO,WAAW,KAAK,WAAW,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;gBAC5D,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;aACrC;YAED,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3E,IAAI,CAAC,eAAe,qCAAgC;YACpD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAIM,MAAM,KAAK,CAAC,cAA+B;YAC9C,cAAc,GAAG,cAAc,IAAI,cAAc,CAAC,MAAM,CAAC;YAEzD,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAE3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,6CAA6C,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAEjH,IAAI,IAAI,CAAC,eAAe,wCAAmC;gBACvD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC,CAAC;aAC/G;YAED,IAAI,CAAC,eAAe,iCAA8B;YAElD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YAC/D,MAAM,IAAI,CAAC,oBAAoB,CAAC;;YAGhC,IAAI,IAAI,CAAC,eAAsB,0CAAoC;;gBAE/D,MAAM,OAAO,GAAG,8DAA8D,CAAC;gBAC/E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;gBAGzC,MAAM,IAAI,CAAC,WAAW,CAAC;gBAEvB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7C;iBAAM,IAAI,IAAI,CAAC,eAAsB,kCAAgC;;gBAElE,MAAM,OAAO,GAAG,6GAA6G,CAAC;gBAC9H,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACzC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7C;YAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;QAEM,IAAI,CAAC,IAA0B;YAClC,IAAI,IAAI,CAAC,eAAe,kCAAgC;gBACpD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC,CAAC;aAC3G;YAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,SAAU,CAAC,CAAC;aAC5D;;YAGD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpC;QAEM,MAAM,IAAI,CAAC,KAAa;YAC3B,IAAI,IAAI,CAAC,eAAe,wCAAmC;gBACvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,+BAA+B,KAAK,wEAAwE,CAAC,CAAC;gBAC9I,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,IAAI,IAAI,CAAC,eAAe,0CAAoC;gBACxD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,+BAA+B,KAAK,yEAAyE,CAAC,CAAC;gBAC/I,OAAO,IAAI,CAAC,WAAW,CAAC;aAC3B;YAED,IAAI,CAAC,eAAe,uCAAiC;YAErD,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO;;gBAEnC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;aACtC,CAAC,CAAC;;YAGH,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,IAAI,CAAC,WAAW,CAAC;SAC1B;QAEO,MAAM,YAAY,CAAC,KAAa;;;;YAIpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAEvB,IAAI;gBACA,MAAM,IAAI,CAAC,oBAAoB,CAAC;aACnC;YAAC,OAAO,CAAC,EAAE;;aAEX;;;;YAKD,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,IAAI;oBACA,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;iBAC/B;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,gDAAgD,CAAC,IAAI,CAAC,CAAC;oBACvF,IAAI,CAAC,cAAc,EAAE,CAAC;iBACzB;gBAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC9B;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,wFAAwF,CAAC,CAAC;gBAC1H,IAAI,CAAC,cAAc,EAAE,CAAC;aACzB;SACJ;QAEO,MAAM,aAAa,CAAC,cAA8B;;;YAGtD,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;YAE1D,IAAI;gBACA,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;oBAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,iBAAiB,CAAC,UAAU,EAAE;;wBAEzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;;;wBAGvE,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;qBAClD;yBAAM;wBACH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;qBACnG;iBACJ;qBAAM;oBACH,IAAI,iBAAiB,GAA8B,IAAI,CAAC;oBACxD,IAAI,SAAS,GAAG,CAAC,CAAC;oBAElB,GAAG;wBACC,iBAAiB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;;wBAE3D,IAAI,IAAI,CAAC,eAAe,4CAAsC,IAAI,CAAC,eAAe,wCAAmC;4BACjH,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;yBACrE;wBAED,IAAI,iBAAiB,CAAC,KAAK,EAAE;4BACzB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;yBAC5C;wBAED,IAAK,iBAAyB,CAAC,eAAe,EAAE;4BAC5C,MAAM,IAAI,KAAK,CAAC,8LAA8L,CAAC,CAAC;yBACnN;wBAED,IAAI,iBAAiB,CAAC,GAAG,EAAE;4BACvB,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC;yBAC/B;wBAED,IAAI,iBAAiB,CAAC,WAAW,EAAE;;;4BAG/B,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;4BAClD,IAAI,CAAC,kBAAkB,GAAG,MAAM,WAAW,CAAC;yBAC/C;wBAED,SAAS,EAAE,CAAC;qBACf,QACM,iBAAiB,CAAC,GAAG,IAAI,SAAS,GAAG,aAAa,EAAE;oBAE3D,IAAI,SAAS,KAAK,aAAa,IAAI,iBAAiB,CAAC,GAAG,EAAE;wBACtD,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;qBAC5D;oBAED,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC;iBAC9F;gBAED,IAAI,IAAI,CAAC,SAAS,YAAY,oBAAoB,EAAE;oBAChD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,IAAI,CAAC;iBAC1C;gBAED,IAAI,IAAI,CAAC,eAAe,oCAAiC;;;oBAGrD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,4CAA4C,CAAC,CAAC;oBAC9E,IAAI,CAAC,eAAe,+BAA6B;iBACpD;;;;aAKJ;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,kCAAkC,GAAG,CAAC,CAAC,CAAC;gBACxE,IAAI,CAAC,eAAe,qCAAgC;gBACpD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC5B;SACJ;QAEO,MAAM,sBAAsB,CAAC,GAAW;YAC5C,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9C,IAAI,KAAK,EAAE;oBACN,OAAe,CAAC,eAAe,CAAC,GAAG,UAAU,KAAK,EAAE,CAAC;iBACzD;aACJ;YAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,kBAAkB,EAAE,CAAC;YAC1C,OAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YAE/B,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,gCAAgC,YAAY,GAAG,CAAC,CAAC;YACjF,IAAI;gBACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE;oBACtD,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;oBAChD,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;iBAChD,CAAC,CAAC;gBAEH,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;oBAC7B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,mDAAmD,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;iBAC/G;gBAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAiB,CAAuB,CAAC;gBACvF,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,IAAI,iBAAiB,CAAC,gBAAgB,GAAG,CAAC,EAAE;;;oBAG/E,iBAAiB,CAAC,eAAe,GAAG,iBAAiB,CAAC,YAAY,CAAC;iBACtE;gBACD,OAAO,iBAAiB,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,kDAAkD,GAAG,CAAC,CAAC,CAAC;gBACxF,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC5B;SACJ;QAEO,gBAAgB,CAAC,GAAW,EAAE,eAA0C;YAC5E,IAAI,CAAC,eAAe,EAAE;gBAClB,OAAO,GAAG,CAAC;aACd;YAED,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,MAAM,eAAe,EAAE,CAAC;SAChF;QAEO,MAAM,eAAe,CAAC,GAAW,EAAE,kBAA8D,EAAE,iBAAqC,EAAE,uBAAuC;YACrL,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAC/E,IAAI,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,EAAE;gBACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,yEAAyE,CAAC,CAAC;gBAC3G,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC;gBACpC,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;gBAE/D,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC;gBACnD,OAAO;aACV;YAED,MAAM,mBAAmB,GAAU,EAAE,CAAC;YACtC,MAAM,UAAU,GAAG,iBAAiB,CAAC,mBAAmB,IAAI,EAAE,CAAC;YAC/D,IAAI,SAAS,GAAmC,iBAAiB,CAAC;YAClE,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE;gBAC/B,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;gBAC7G,IAAI,gBAAgB,YAAY,KAAK,EAAE;;oBAEnC,mBAAmB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,YAAY,gBAAgB,EAAE,CAAC,CAAC;iBACjF;qBAAM,IAAI,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE;oBAC5C,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;oBAClC,IAAI,CAAC,SAAS,EAAE;wBACZ,IAAI;4BACA,SAAS,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;yBACtD;wBAAC,OAAO,EAAE,EAAE;4BACT,OAAO,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;yBAC7B;wBACD,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;qBACtE;oBACD,IAAI;wBACA,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;wBAC/D,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;wBAC3C,OAAO;qBACV;oBAAC,OAAO,EAAE,EAAE;wBACT,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,kCAAkC,QAAQ,CAAC,SAAS,MAAM,EAAE,EAAE,CAAC,CAAC;wBAChG,SAAS,GAAG,SAAS,CAAC;wBACtB,mBAAmB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,YAAY,EAAE,EAAE,CAAC,CAAC;wBAEhE,IAAI,IAAI,CAAC,eAAe,oCAAiC;4BACrD,MAAM,OAAO,GAAG,sDAAsD,CAAC;4BACvE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;4BACzC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;yBAC7C;qBACJ;iBACJ;aACJ;YAED,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,yEAAyE,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;aAC9I;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC,CAAC;SACnH;QAEO,kBAAkB,CAAC,SAA4B;YACnD,QAAQ,SAAS;gBACb,KAAK,iBAAiB,CAAC,UAAU;oBAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;wBACzB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;qBACxE;oBACD,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBACzI,KAAK,iBAAiB,CAAC,gBAAgB;oBACnC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;wBAC3B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;qBAC1E;oBACD,OAAO,IAAI,yBAAyB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,eAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;gBAC9N,KAAK,iBAAiB,CAAC,WAAW;oBAC9B,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,eAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;gBAC/L;oBACI,MAAM,IAAI,KAAK,CAAC,sBAAsB,SAAS,GAAG,CAAC,CAAC;aAC3D;SACJ;QAEO,cAAc,CAAC,GAAW,EAAE,cAA8B;YAC9D,IAAI,CAAC,SAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAC3C,IAAI,CAAC,SAAU,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC,SAAU,CAAC,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;SACvD;QAEO,uBAAuB,CAAC,QAA6B,EAAE,kBAAiD,EAAE,uBAAuC;YACrJ,MAAM,SAAS,GAAG,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACxD,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uBAAuB,QAAQ,CAAC,SAAS,+CAA+C,CAAC,CAAC;gBAC1H,OAAO,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,SAAS,+CAA+C,CAAC,CAAC;aAC9G;iBAAM;gBACH,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,SAAS,CAAC,EAAE;oBACjD,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/E,IAAI,eAAe,CAAC,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE;wBACvD,IAAI,CAAC,SAAS,KAAK,iBAAiB,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;6BACrE,SAAS,KAAK,iBAAiB,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;4BACjF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uBAAuB,iBAAiB,CAAC,SAAS,CAAC,qDAAqD,CAAC,CAAC;4BAC1I,OAAO,IAAI,KAAK,CAAC,IAAI,iBAAiB,CAAC,SAAS,CAAC,yCAAyC,CAAC,CAAC;yBAC/F;6BAAM;4BACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,wBAAwB,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;4BAC1F,IAAI;gCACA,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;6BAC7C;4BAAC,OAAO,EAAE,EAAE;gCACT,OAAO,EAAE,CAAC;6BACb;yBACJ;qBACJ;yBAAM;wBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uBAAuB,iBAAiB,CAAC,SAAS,CAAC,gEAAgE,cAAc,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;wBAChM,OAAO,IAAI,KAAK,CAAC,IAAI,iBAAiB,CAAC,SAAS,CAAC,sBAAsB,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACtH;iBACJ;qBAAM;oBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uBAAuB,iBAAiB,CAAC,SAAS,CAAC,0CAA0C,CAAC,CAAC;oBAC/H,OAAO,IAAI,KAAK,CAAC,IAAI,iBAAiB,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;iBACpF;aACJ;SACJ;QAEO,YAAY,CAAC,SAAc;YAC/B,OAAO,SAAS,IAAI,QAAQ,SAAS,CAAC,KAAK,QAAQ,IAAI,SAAS,IAAI,SAAS,CAAC;SACjF;QAEO,cAAc,CAAC,KAAa;YAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,iCAAiC,KAAK,2BAA2B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YAE1H,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;YAG3B,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAE3B,IAAI,IAAI,CAAC,eAAe,wCAAmC;gBACvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,yCAAyC,KAAK,4EAA4E,CAAC,CAAC;gBAC5J,OAAO;aACV;YAED,IAAI,IAAI,CAAC,eAAe,oCAAiC;gBACrD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,yCAAyC,KAAK,wEAAwE,CAAC,CAAC;gBAC1J,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,qEAAqE,CAAC,CAAC;aAChI;YAED,IAAI,IAAI,CAAC,eAAe,0CAAoC;;;gBAGxD,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC9B;YAED,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,uCAAuC,KAAK,IAAI,CAAC,CAAC;aACrF;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;aACrE;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,0CAA0C,CAAC,IAAI,CAAC,CAAC;iBACpF,CAAC,CAAC;gBACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC9B;YAED,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAC9B,IAAI,CAAC,eAAe,qCAAgC;YAEpD,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACxB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI;oBACA,IAAI,IAAI,CAAC,OAAO,EAAE;wBACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qBACvB;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,0BAA0B,KAAK,kBAAkB,CAAC,IAAI,CAAC,CAAC;iBAC3F;aACJ;SACJ;QAEO,UAAU,CAAC,GAAW;;YAE1B,IAAI,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC7E,OAAO,GAAG,CAAC;aACd;YAED,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAC;aAC/C;;;;;;YAOD,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAEhB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,gBAAgB,GAAG,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;YACjF,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;QAEO,mBAAmB,CAAC,GAAW;YACnC,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YACvE,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC/C,YAAY,IAAI,GAAG,CAAC;aACvB;YACD,YAAY,IAAI,WAAW,CAAC;YAC5B,YAAY,IAAI,KAAK,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAEzD,IAAI,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;gBACjD,YAAY,IAAI,KAAK,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;gBACzC,YAAY,IAAI,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC;aAC/D;YACD,OAAO,YAAY,CAAC;SACvB;KACJ;IAED,SAAS,gBAAgB,CAAC,kBAAiD,EAAE,eAAkC;QAC3G,OAAO,CAAC,kBAAkB,KAAK,CAAC,eAAe,GAAG,kBAAkB,MAAM,CAAC,CAAC,CAAC;IACjF,CAAC;IAED;UACa,kBAAkB;QAO3B,YAA6B,SAAqB;YAArB,cAAS,GAAT,SAAS,CAAY;YAN1C,WAAM,GAAU,EAAE,CAAC;YAEnB,cAAS,GAAY,IAAI,CAAC;YAK9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC;YAC5C,IAAI,CAAC,eAAe,GAAG,IAAI,aAAa,EAAE,CAAC;YAE3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;SAC1C;QAEM,IAAI,CAAC,IAA0B;YAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACvB,IAAI,CAAC,eAAe,GAAG,IAAI,aAAa,EAAE,CAAC;aAC9C;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;SACvC;QAEM,IAAI;YACP,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC,eAAe,CAAC;SAC/B;QAEO,UAAU,CAAC,IAA0B;YACzC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,QAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,QAAO,IAAI,CAAC,EAAE;gBAC/D,MAAM,IAAI,KAAK,CAAC,+BAA+B,QAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,QAAO,IAAI,CAAC,EAAE,CAAC,CAAC;aACzG;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;SACnC;QAEO,MAAM,QAAQ;YAClB,OAAO,IAAI,EAAE;gBACT,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;gBAEpC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACjB,IAAI,IAAI,CAAC,eAAe,EAAE;wBACtB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;qBACtD;oBAED,MAAM;iBACT;gBAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC;gBAE5C,MAAM,eAAe,GAAG,IAAI,CAAC,eAAgB,CAAC;gBAC9C,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;gBAEjC,MAAM,IAAI,GAAG,QAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ;oBAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;oBACpB,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAElD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEvB,IAAI;oBACA,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAChC,eAAe,CAAC,OAAO,EAAE,CAAC;iBAC7B;gBAAC,OAAO,KAAK,EAAE;oBACZ,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjC;aACJ;SACJ;QAEO,OAAO,aAAa,CAAC,YAA2B;YACpD,MAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAClF,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;YAC3C,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;gBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;gBACzC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC;aAC7B;YAED,OAAO,MAAM,CAAC,MAAM,CAAC;SACxB;KACJ;IAED,MAAM,aAAa;QAKf;YACI,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;SACvG;QAEM,OAAO;YACV,IAAI,CAAC,QAAS,EAAE,CAAC;SACpB;QAEM,MAAM,CAAC,MAAY;YACtB,IAAI,CAAC,QAAS,CAAC,MAAM,CAAC,CAAC;SAC1B;;;IC3nBL;IASA,MAAM,sBAAsB,GAAW,MAAM,CAAC;IAE9C;UACa,eAAe;QAA5B;;YAGoB,SAAI,GAAW,sBAAsB,CAAC;;YAEtC,YAAO,GAAW,CAAC,CAAC;;YAGpB,mBAAc,GAAmB,cAAc,CAAC,IAAI,CAAC;SAmGxE;;;;;;QA5FU,aAAa,CAAC,KAAa,EAAE,MAAe;;YAE/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;aAC9E;YAED,IAAI,CAAC,KAAK,EAAE;gBACR,OAAO,EAAE,CAAC;aACb;YAED,IAAI,MAAM,KAAK,IAAI,EAAE;gBACjB,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC;aAChC;;YAGD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEhD,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC5B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAe,CAAC;gBACxD,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,EAAE;oBACxC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;iBACvC;gBACD,QAAQ,aAAa,CAAC,IAAI;oBACtB,KAAK,WAAW,CAAC,UAAU;wBACvB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;wBACxC,MAAM;oBACV,KAAK,WAAW,CAAC,UAAU;wBACvB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;wBACxC,MAAM;oBACV,KAAK,WAAW,CAAC,UAAU;wBACvB,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;wBACxC,MAAM;oBACV,KAAK,WAAW,CAAC,IAAI;;wBAEjB,MAAM;oBACV,KAAK,WAAW,CAAC,KAAK;;wBAElB,MAAM;oBACV;;wBAEI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,wBAAwB,GAAG,aAAa,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC;wBAC/F,SAAS;iBAChB;gBACD,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aACnC;YAED,OAAO,WAAW,CAAC;SACtB;;;;;;QAOM,YAAY,CAAC,OAAmB;YACnC,OAAO,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SAC3D;QAEO,mBAAmB,CAAC,OAA0B;YAClD,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAM,EAAE,yCAAyC,CAAC,CAAC;YAErF,IAAI,OAAO,CAAC,YAAY,KAAK,SAAS,EAAE;gBACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,YAAY,EAAE,yCAAyC,CAAC,CAAC;aAC9F;SACJ;QAEO,mBAAmB,CAAC,OAA0B;YAClD,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,YAAY,EAAE,yCAAyC,CAAC,CAAC;YAE3F,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC9D;SACJ;QAEO,mBAAmB,CAAC,OAA0B;YAClD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;gBAClC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAC;aACvF;YAED,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,YAAY,EAAE,yCAAyC,CAAC,CAAC;SAC9F;QAEO,oBAAoB,CAAC,KAAU,EAAE,YAAoB;YACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,EAAE,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;aACjC;SACJ;;;ICtHL;IAeA;IACA,MAAM,mBAAmB,GAAG;QACxB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,IAAI,EAAE,QAAQ,CAAC,WAAW;QAC1B,WAAW,EAAE,QAAQ,CAAC,WAAW;QACjC,IAAI,EAAE,QAAQ,CAAC,OAAO;QACtB,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;QAC3B,IAAI,EAAE,QAAQ,CAAC,IAAI;KACtB,CAAC;IAEF,SAAS,aAAa,CAAC,IAAY;;;;QAI/B,MAAM,OAAO,GAAI,mBAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACjE,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAChC,OAAO,OAAO,CAAC;SAClB;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;SACjD;IACL,CAAC;IAED;UACa,oBAAoB;QA0CtB,gBAAgB,CAAC,OAAoC;YACxD,GAAG,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAEnC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACnB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;aACzB;iBAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBACpC,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;gBACxC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;aAC7C;iBAAM;gBACH,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5C;YAED,OAAO,IAAI,CAAC;SACf;QA0BM,OAAO,CAAC,GAAW,EAAE,sBAAmE;YAC3F,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAE3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;;YAIf,IAAI,OAAO,sBAAsB,KAAK,QAAQ,EAAE;gBAC5C,IAAI,CAAC,qBAAqB,GAAG,EAAE,GAAG,IAAI,CAAC,qBAAqB,EAAE,GAAG,sBAAsB,EAAE,CAAC;aAC7F;iBAAM;gBACH,IAAI,CAAC,qBAAqB,GAAG;oBACzB,GAAG,IAAI,CAAC,qBAAqB;oBAC7B,SAAS,EAAE,sBAAsB;iBACpC,CAAC;aACL;YAED,OAAO,IAAI,CAAC;SACf;;;;;QAMM,eAAe,CAAC,QAAsB;YACzC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAErC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,OAAO,IAAI,CAAC;SACf;QAmBM,sBAAsB,CAAC,4BAAsD;YAChF,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,4BAA4B,EAAE;gBAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,sBAAsB,EAAE,CAAC;aACvD;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,4BAA4B,CAAC,EAAE;gBACpD,IAAI,CAAC,eAAe,GAAG,IAAI,sBAAsB,CAAC,4BAA4B,CAAC,CAAC;aACnF;iBAAM;gBACH,IAAI,CAAC,eAAe,GAAG,4BAA4B,CAAC;aACvD;YAED,OAAO,IAAI,CAAC;SACf;;;;;QAMM,KAAK;;;YAGR,MAAM,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC;;YAG/D,IAAI,qBAAqB,CAAC,MAAM,KAAK,SAAS,EAAE;;gBAE5C,qBAAqB,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;aAC9C;;YAGD,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACX,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAC;aAC/G;YACD,MAAM,UAAU,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;YAEvE,OAAO,aAAa,CAAC,MAAM,CACvB,UAAU,EACV,IAAI,CAAC,MAAM,IAAI,UAAU,CAAC,QAAQ,EAClC,IAAI,CAAC,QAAQ,IAAI,IAAI,eAAe,EAAE,EACtC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC7B;KACJ;IAED,SAAS,QAAQ,CAAC,MAAW;QACzB,OAAO,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;IACpC;;aCzNgB,OAAO,CAAC,IAAmB;QACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAmB;YACnC,MAAM,MAAM,GAAG,WAAW,CAAC;gBACvB,IAAI,IAAI,EAAE,EAAE;oBACR,aAAa,CAAC,MAAM,CAAC,CAAC;oBACtB,OAAO,EAAE,CAAC;iBACb;aACJ,EAAE,GAAG,CAAC,CAAC;SACX,CAAC,CAAC;IACP;;ICTA;;;UAGa,KAAK;;;;;;;QASd,YAAmB,KAAa,EAAS,IAAY,EAAE,QAAa,IAAI;YAArD,UAAK,GAAL,KAAK,CAAQ;YAAS,SAAI,GAAJ,IAAI,CAAQ;YACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;SAC5B;;;;;QAMD,QAAQ,CAAC,CAAiB;YACtB,IAAI,CAAC,YAAY,KAAK,EAAE;gBACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACjC;iBACI;gBACD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACrC;SACJ;;;UCIQ,UAAqC,SAAQ,KAAK;QAC3D,YAAmB,SAAY;YAC3B,KAAK,CAAC,SAAS,CAAC,CAAC;YADF,cAAS,GAAT,SAAS,CAAG;SAE9B;KACJ;UAuBY,cAAyC,SAAQ,UAAa;QACvE,YAAY,IAAO,EAAS,EAAU;YAClC,KAAK,CAAC,IAAI,CAAC,CAAC;YADY,OAAE,GAAF,EAAE,CAAQ;SAErC;KACJ;IAgFD,IAAY,UAGX;IAHD,WAAY,UAAU;QAClB,6BAAe,CAAA;QACf,6BAAe,CAAA;IACnB,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;IAED,IAAY,YAIX;IAJD,WAAY,YAAY;QACpB,+BAAe,CAAA;QACf,mCAAmB,CAAA;QACnB,mCAAmB,CAAA;IACvB,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;UAkDY,cAAiD,SAAQ,cAAiB;QACnF,YAAY,IAAO,EAAE,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU,EAAS,EAAU;YACtM,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YADoB,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;YAAS,OAAE,GAAF,EAAE,CAAQ;SAEzM;QAED,GAAG,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YAC1G,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;SAChB;KACJ;UAEY,mBAAoB,SAAQ,cAA2B;QAChE,YAAY,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YAC9H,KAAK,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SAC9D;KACJ;UAEY,qBAAsB,SAAQ,cAA6B;QACpE,YAAY,EAAU,EAAS,IAAY,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YACnJ,KAAK,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YADlC,SAAI,GAAJ,IAAI,CAAQ;SAE1C;KACJ;UAEY,eAAkD,SAAQ,cAAiB;QAEpF,YAAY,IAAO,EAAE,EAAU,EAAE,KAAqB;YAClD,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAChB,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aAC5B;iBACI;gBACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACtB;SACJ;KACJ;UAEY,eAAgB,SAAQ,eAAwB;QACzD,YAAY,EAAU,EAAE,KAAqB;YACzC,KAAK,CAAC,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SAC7B;KACJ;UAEY,qBAAsB,SAAQ,eAAiC;QACxE,YAAY,EAAU,EAAE,KAAqB;YACzC,KAAK,CAAC,gBAAgB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACtC;KACJ;UAEY,uBAAwB,SAAQ,cAA+B;QACxE,YAAY,EAAU,EAAS,GAAW;YACtC,KAAK,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YADA,QAAG,GAAH,GAAG,CAAQ;SAEzC;KACJ;UAEY,cAAe,SAAQ,cAAsB;QACtD,YAAY,EAAU,EAAS,IAAY;YACvC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YADS,SAAI,GAAJ,IAAI,CAAQ;SAE1C;;;IC3QL,IAAY,eAKX;IALD,WAAY,eAAe;QACvB,gDAA6B,CAAA;QAC7B,4CAAyB,CAAA;QACzB,0CAAuB,CAAA;QACvB,kDAA+B,CAAA;IACnC,CAAC,EALW,eAAe,KAAf,eAAe;;ICA3B;;;aAGgB,aAAa,CAAI,GAAQ,EAAE,GAAW;QAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC;;UCFa,SAAS;QAAtB;YACY,cAAS,GAAG,IAAI,GAAG,EAAsB,CAAC;YAC1C,oBAAe,GAAG,IAAI,GAAG,EAAqC,CAAC;SAqD1E;QAnDG,gBAAgB,CAAC,IAAY,EAAE,QAA6B,EAAE,OAAiC;YAC3F,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACtB,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,EAAE;oBACZ,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;oBAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;iBACvC;gBAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,EAAE;oBACtC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAEzB,IAAI,OAAO,EAAE;wBACT,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;qBAC/C;iBACJ;aACJ;SACJ;QAED,mBAAmB,CAAC,IAAY,EAAE,QAA6B;YAC3D,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACtB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;iBAC5C;aACJ;SACJ;QAEO,cAAc,CAAC,SAAqB,EAAE,QAAkB;YAC5D,MAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC;YACrD,IAAI,GAAG,IAAI,CAAC,EAAE;gBACV,aAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACpC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBACzC;aACJ;SACJ;QAED,aAAa,CAAC,GAAU;YACpB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,SAAS,EAAE;gBACX,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACnD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;wBACzB,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;qBAC5C;oBAED,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAC5B;aACJ;YACD,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;SAChC;KACJ;UAQY,cAAwB,SAAQ,SAAS;QAAtD;;YACY,oBAAe,GAAG,IAAI,GAAG,EAAiC,CAAC;SAkBtE;QAhBG,gBAAgB,CAAmC,IAAO,EAAE,QAAkD,EAAE,OAAiC;YAC7I,IAAI,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,cAAc,IAAI,IAAI,EAAE;gBACxB,cAAc,GAAG,CAAC,GAAU,KAAK,QAAQ,CAAC,GAAiC,CAAC,CAAC;gBAC7E,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;aACtD;YAED,KAAK,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;SACzD;QAED,mBAAmB,CAAmC,IAAO,EAAE,QAAkD;YAC7G,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1D,IAAI,cAAc,EAAE;gBAChB,KAAK,CAAC,mBAAmB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;aACnD;SACJ;;;aCpFW,KAAK,CAAC,EAAU;QAC5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO;YACvB,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;SAC3B,CAAC,CAAC;IACP;;UCKsB,kBAClB,SAAQ,cAAmC;QAK3C,YAAoB,SAAiB;YACjC,KAAK,EAAE,CAAC;YADQ,cAAS,GAAT,SAAS,CAAQ;YAF7B,UAAK,GAAG,IAAI,GAAG,EAAwB,CAAC;SAI/C;QAED,MAAM,OAAO,CAAsC,OAAU,EAAE,MAAc;YACzE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO;gBACvB,MAAM,MAAM,GAAG,CAAC,GAA2B;oBACvC,IAAI,GAAG,YAAY,cAAc;2BAC1B,GAAG,CAAC,EAAE,KAAK,MAAM,EAAE;wBACtB,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC1C,OAAO,CAAC,GAAG,CAAC,CAAC;qBAChB;iBACJ,CAAC;gBAEF,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAC1C,CAAC,CAAC;SACN;QAID,IAAI,WAAW;YACX,OAAO,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,SAAS,CAAC;SAC3D;QAIO,MAAM,aAAa,CAAC,GAAW,EAAE,OAAuB,EAAE,GAAG,IAAW;YAC5E,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACtB,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAChC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,IAAI,CAAC;gBACX,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;gBACxC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACzC,IAAI,SAAS,GAAG,CAAC,EAAE;oBACf,MAAM,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC1B;SACJ;QAEO,MAAM,aAAa,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC/D,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SAC7C;QAED,YAAY,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YACnH,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACpF;QAED,qBAAqB,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YAC5H,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACvE;QAED,eAAe,CAAC,IAAY,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YACpI,IAAI,CAAC,aAAa,CAAC,aAAa,GAAG,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACrG;QAED,cAAc,CAAC,KAAY;YACvB,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;SAC/C;QAED,YAAY,CAAC,GAAW;YACpB,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;SAC5C;QAED,KAAK,CAAC,KAAY;YACd,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,IAAY;YACb,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACpC;;;UCpEQ,qBACT,SAAQ,kBAAkB;QAQ1B,YAAY,WAAmB;YAC3B,KAAK,CAAC,EAAE,CAAC,CAAC;YANN,aAAQ,GAAW,IAAI,CAAC;YACxB,eAAU,GAAW,IAAI,CAAC;YAC1B,gBAAW,GAAW,IAAI,CAAC;YAC3B,kBAAa,GAAW,IAAI,CAAC;YAKjC,IAAI,CAAC,GAAG,GAAG,IAAI,oBAAoB,EAAE;iBAChC,OAAO,CAAC,WAAW,EAAE,iBAAiB,CAAC,UAAU,CAAC;iBAClD,KAAK,EAAE,CAAC;YAEb,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;gBACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B,CAAC,CAAC;YAEH,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,EACnB,CAAC,UAAkB,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBAC3H,IAAI,CAAC,aAAa,CAAC,IAAI,mBAAmB,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC/F,CAAC,CAAC;YAEP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,EACrB,CAAC,UAAkB,EAAE,IAAY,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBACzI,IAAI,CAAC,aAAa,CAAC,IAAI,qBAAqB,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aACvG,CAAC,CAAC;YAEP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,EACvB,CAAC,UAAkB,EAAE,GAAW;gBAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,uBAAuB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;aACpE,CAAC,CAAC;YAEP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EACf,CAAC,UAAkB,EAAE,KAAY;gBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,eAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;aAC9D,CAAC,CAAC;YAEP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,gBAAgB,EACxB,CAAC,UAAkB,EAAE,KAAY;gBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,qBAAqB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;aACpE,CAAC,CAAC;YAEP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EACd,CAAC,UAAkB,EAAE,IAAY;gBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;aAC5D,CAAC,CAAC;SACV;QAED,IAAI,aAAa;YACb,QAAQ,IAAI,CAAC,GAAG,CAAC,KAAK;gBAClB,KAAK,kBAAkB,CAAC,SAAS,EAAE,OAAO,eAAe,CAAC,SAAS,CAAC;gBACpE,KAAK,kBAAkB,CAAC,UAAU,CAAC;gBAAC,KAAK,kBAAkB,CAAC,YAAY,EAAE,OAAO,eAAe,CAAC,UAAU,CAAC;gBAC5G,KAAK,kBAAkB,CAAC,YAAY,EAAE,OAAO,eAAe,CAAC,YAAY,CAAC;gBAC1E,KAAK,kBAAkB,CAAC,aAAa,EAAE,OAAO,eAAe,CAAC,aAAa,CAAC;gBAC5E,SAAS,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;QAEO,MAAM,UAAU;YACpB,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,UAAU,EAAE;gBACnD,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,SAAS,CAAC,CAAC;aACzE;iBACI;gBACD,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,aAAa,EAAE;oBACtD,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,YAAY,CAAC,CAAC;iBAC5E;gBAED,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,YAAY,EAAE;oBACrD,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;iBAC1B;aACJ;SACJ;QAEO,MAAM,SAAS;YACnB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAExB,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,EAAE;gBACpC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAExB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,EAAE;oBACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;oBACjC,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBACnD;aACJ;SACJ;QAEO,MAAM,aAAa;YACvB,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YAEvB,IAAI,IAAI,CAAC,aAAa;mBACf,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,UAAU;mBACtC,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC;gBACrC,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;aACzD;SACJ;QAEO,MAAM,UAAU;YACpB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAClC;SACJ;QAEO,MAAM,eAAe;YACzB,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,aAAa,EAAE;gBACtD,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,YAAY,CAAC,CAAC;aAC5E;iBACI;gBACD,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,UAAU,EAAE;oBACnD,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,SAAS,CAAC,CAAC;iBACzE;gBAED,IAAI,IAAI,CAAC,aAAa,KAAK,eAAe,CAAC,SAAS,EAAE;oBAClD,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;iBACzB;aACJ;SACJ;QAED,MAAM,OAAO;YACT,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;SAC3B;QAED,MAAM,IAAI,CAAC,QAAgB;YACvB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;YAC5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;SAC1B;QAED,MAAM,QAAQ,CAAC,MAAc;YACzB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;YAC5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACvB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;SAC9B;QAED,MAAM,KAAK;YACP,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,IAAI,CAAC,aAAa;kBACZ,IAAI,CAAC,UAAU;sBACf,IAAI,CAAC,WAAW;0BAChB,IAAI,CAAC,QAAQ;8BACb,IAAI,CAAC;SACd;QAED,MAAM,UAAU;YACZ,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7B,IAAI,CAAC,aAAa;kBACZ,IAAI,CAAC,UAAU;sBACf,IAAI,CAAC,WAAW;0BAChB,IAAI,CAAC,QAAQ;8BACb,IAAI,CAAC;SACd;QAES,MAAM,YAAY,CAAC,OAAuB,EAAE,QAAgB,EAAE,GAAG,IAAW;YAClF,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3B,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;aACrD;SACJ;;;IClLL;;;;;aAKgB,SAAS,CAAI,GAAQ,EAAE,GAAG,KAA8B;QACpE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,KAAK,MAAM,IAAI,IAAI,GAAG,EAAE;gBACpB,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;oBACZ,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QAED,OAAO,IAAI,CAAC;IAChB;;aCFgB,SAAS,CAAC,GAAsB,EAAE,OAAe;QAC7D,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,GAAG,IAAW;YACzC,IAAI,cAAc,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;aAClD;SACJ,CAAC,CAAC;IACP,CAAC;IAGD,SAAS,sBAAsB,CAAC,OAA0B;QACtD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;gBAChD,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC7D;YAED,IAAI,CAAC,KAAK,EAAE;gBACR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACpB;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,MAAM,6BAA6B,GAAG,8BAA8B,CAAC;IACrE,MAAM,4BAA4B,GAAG,6BAA6B,CAAC;IACnE,MAAM,4BAA4B,GAAG,6BAA6B,CAAC;UAEtD,qBAAqB,GAAG,aAAa;IAElD,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,WAAW;WACtD,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;UAE1B,wBAClB,SAAQ,cAAyC;QAqCjD,YAAY,OAAiB,EAAE,KAAmB,EAAS,mBAAmB,IAAI,EAAS,mBAAmB,KAAK;YAC/G,KAAK,EAAE,CAAC;YAD+C,qBAAgB,GAAhB,gBAAgB,CAAO;YAAS,qBAAgB,GAAhB,gBAAgB,CAAQ;YA9BnH,gBAAW,GAAW,IAAI,CAAC;YAC3B,kBAAa,GAAW,IAAI,CAAC;YAC7B,aAAQ,GAAW,IAAI,CAAC;YAMhB,qBAAgB,GAAG,eAAe,CAAC,YAAY,CAAC;YAChD,qBAAgB,GAAG,eAAe,CAAC,YAAY,CAAC;YAExD,uBAAkB,GAAG,KAAK,CAAC;YAC3B,uBAAkB,GAAG,KAAK,CAAC;YAqBvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAEnB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;YACxG,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;YACxG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;YAE9G,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;YACzG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;YAC5G,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3G,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;SAC7G;QAjDD,aAAa;YACT,cAAc,GAAG,CAAC,cAAc,CAAC;SACpC;QAgBD,IAAI,eAAe;YACf,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAChC;QAEO,kBAAkB,CAAC,KAAsB;YAC7C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SACjC;QAED,IAAI,eAAe;YACf,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAChC;QAEO,kBAAkB,CAAC,KAAsB;YAC7C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SACjC;QAmBD,aAAa,CAAqD,GAAyC;YACvG,IAAI,GAAG,YAAY,cAAc;oBACzB,GAAG,CAAC,EAAE,IAAI,IAAI;uBACX,GAAG,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE;gBAC5B,IAAI,IAAI,CAAC,WAAW,KAAK,qBAAqB,EAAE;oBAC5C,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC;iBACjB;qBACI;oBACD,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;iBAC7B;aACJ;YAED,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SACnC;QAED,MAAM,OAAO,CAA4C,OAAU,EAAE,MAAc;YAC/E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO;gBACvB,MAAM,MAAM,GAAG,CAAC,GAAiC;oBAC7C,IAAI,GAAG,YAAY,cAAc;2BAC1B,GAAG,CAAC,EAAE,KAAK,MAAM,EAAE;wBACtB,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC1C,OAAO,CAAC,GAAG,CAAC,CAAC;qBAChB;iBACJ,CAAC;gBAEF,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAC1C,CAAC,CAAC;SACN;QAID,IAAI,qBAAqB;YACrB,OAAO,YAAY,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;SAC7D;QAED,IAAI,qBAAqB,CAAC,CAAS;YAC/B,YAAY,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;SACzD;QAED,IAAI,qBAAqB;YACrB,OAAO,YAAY,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;SAC7D;QAED,IAAI,qBAAqB,CAAC,CAAS;YAC/B,YAAY,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;SACzD;QAED,MAAM,mBAAmB;YACrB,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;SAC5C;QAED,MAAM,sBAAsB,CAAC,QAAiB;YAC1C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClD,MAAM,MAAM,GAAG,SAAS,CACpB,OAAO,EACP,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,qBAAqB,EAChD,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,gBAAgB,EACtC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,SAAS,EAC/B,CAAC,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,sBAAsB,CAAC,QAAiB;YAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,MAAM,EAAE;gBACR,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAC1C;SACJ;QAED,MAAM,sBAAsB,CAAC,QAAiB;YAC1C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClD,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,EAC5B,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,qBAAqB,EAChD,CAAC,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAC9C,CAAC,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,sBAAsB,CAAC,QAAiB;YAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,MAAM,EAAE;gBACR,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAC1C;SACJ;QAEO,MAAM,UAAU;YACpB,IAAI,OAAO,GAAsB,IAAI,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;gBACxB,OAAO,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;gBAC1D,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC1B,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC7G,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;qBAChH;iBACJ;gBAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,MAAM;iBACT;gBAED,IAAI;oBACA,MAAM,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;wBACtC,KAAK,EAAE,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,kBAAkB;wBACxD,KAAK,EAAE,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,kBAAkB;qBAC3D,CAAC,CAAC;iBACN;gBACD,OAAO,GAAG,EAAE;oBACR,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACrB;aACJ;YAED,OAAO,OAAO,IAAI,EAAE,CAAC;SACxB;QAED,MAAM,mBAAmB;YACrB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,OAAO;gBACH,KAAK,EAAE,IAAI,CAAC,kBAAkB;gBAC9B,KAAK,EAAE,IAAI,CAAC,kBAAkB;aACjC,CAAC;SACL;QAEO,MAAM,mBAAmB,CAAC,mBAA4B,KAAK;YAC/D,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAEtC,IAAI,gBAAgB,EAAE;gBAClB,OAAO,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;aAC7C;YAED,OAAO;gBACH,WAAW,EAAE,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,GAAG,EAAE;gBACtF,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC;gBACxD,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC;aAC3D,CAAC;SACL;QAED,MAAM,oBAAoB,CAAC,mBAA4B,KAAK;YACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YACjE,OAAO,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;SAC9C;QAED,MAAM,oBAAoB,CAAC,mBAA4B,KAAK;YACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YACjE,OAAO,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;SAC9C;QAED,MAAM,oBAAoB,CAAC,MAAuB;YAC9C,IAAI,oBAAoB,EAAE;gBACtB,IAAI,CAAC,sBAAsB,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC;aACnE;SACJ;QAED,MAAM,qBAAqB,CAAC,mBAA4B,KAAK;YACzD,IAAI,CAAC,oBAAoB,EAAE;gBACvB,OAAO,EAAE,CAAC;aACb;YACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YACjE,OAAO,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;SAC/C;QAED,MAAM,2BAA2B;YAC7B,IAAI,CAAC,oBAAoB,EAAE;gBACvB,OAAO,IAAI,CAAC;aACf;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,EAC7C,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,EAC5C,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,QAAQ,KAAK,KAAK;mBAC7D,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACxE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrB,OAAO,IAAI,CAAC;aACf;iBACI;gBACD,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;aACpB;SACJ;QAED,IAAI,sBAAsB;YACtB,OAAO,YAAY,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;SAC9D;QAED,IAAI,sBAAsB,CAAC,CAAS;YAChC,YAAY,CAAC,OAAO,CAAC,6BAA6B,EAAE,CAAC,CAAC,CAAC;SAC1D;QAGD,MAAM,uBAAuB,CAAC,QAAiB;YAC3C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACnD,MAAM,MAAM,GAAG,SAAS,CACpB,OAAO,EACP,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,sBAAsB,EACjD,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,gBAAgB,EACtC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,SAAS,EAC/B,CAAC,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,uBAAuB,CAAC,QAAiB;YAC3C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC5D,IAAI,MAAM,EAAE;gBACR,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;aAC3C;SACJ;QAED,MAAM,mBAAmB,CAAC,MAAuB;YAC7C,IAAI,CAAC,qBAAqB,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC;SAClE;QAED,MAAM,mBAAmB,CAAC,MAAuB;YAC7C,IAAI,CAAC,qBAAqB,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC;SAClE;QAED,MAAM,OAAO;YACT,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,CAAC,SAAiB,EAAE,SAAkB;YAC5C,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;SACvD;QAED,MAAM,KAAK;YACP,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SAC1D;QAED,MAAM,UAAU;YACZ,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SAC1D;;;IC3UL;;;UAGa,kBAAmB,SAAQ,KAAK;;QAKzC;YACI,KAAK,CAAC,eAAe,CAAC,CAAC;YAL3B,OAAE,GAAW,IAAI,CAAC;YAClB,aAAQ,GAAY,KAAK,CAAC;YAKtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;;;;;;QAOD,GAAG,CAAC,EAAU,EAAE,QAAiB;YAC7B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;;;ICaL,IAAY,WAQX;IARD,WAAY,WAAW;QACnB,6CAA8B,CAAA;QAC9B,uDAAwC,CAAA;QACxC,sCAAuB,CAAA;QACvB,wCAAyB,CAAA;QACzB,sCAAuB,CAAA;QACvB,wCAAyB,CAAA;QACzB,yCAA0B,CAAA;IAC9B,CAAC,EARW,WAAW,KAAX,WAAW,QAQtB;IAED,MAAM,gBAAgB,GAAG,IAAI,kBAAkB,EAAE,CAAC;UAErC,KACT,SAAQ,cAAiC;QAMzC,YACY,QAAkB,EAClB,KAA+B,EAC/B,KAAyB;YACjC,KAAK,EAAE,CAAC;YAHA,aAAQ,GAAR,QAAQ,CAAU;YAClB,UAAK,GAAL,KAAK,CAA0B;YAC/B,UAAK,GAAL,KAAK,CAAoB;YANrC,iBAAY,GAAY,IAAI,CAAC;YAC7B,iBAAY,GAAY,IAAI,CAAC;YAQzB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1C,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;YAEvD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;YAC3D,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;YAE3D,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,GAA+B;gBAClF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC/C,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACxB,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACpC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,GAA6B;gBACxE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;aAC3B,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,OAAoC;gBACxF,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACnD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC/B,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,GAA8B;gBAC1E,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;aACjC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAEjD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,GAA+B;gBACtE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACxC,IAAI,IAAI,EAAE;oBACN,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACxC,IAAI,MAAM,EAAE;wBACR,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBACjC;oBAED,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAEnC,IAAI,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;wBACnC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;qBAC5C;oBAED,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;iBAC3B;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,GAAiC;gBAC1E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACxC,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBACpC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;iBACjC;gBAED,IAAI,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;oBACnC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;iBAC1C;gBAED,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;aAC3B,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;YAClD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YAEnD,MAAM,SAAS,GAAG,CAAC,OAAoD;gBACnE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC/C,IAAI,CAAC,EAAE;oBACH,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnB,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnB,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtB;gBACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC/B,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YAEtD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAwB;gBAC9D,IAAI,CAAC,KAAK,CAAC,WAAW,CAClB,GAAG,CAAC,EAAE,EACN,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EACtB,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EACtB,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC5B,SAAS,CAAC,GAAG,CAAC,CAAC;aAClB,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC,GAAuB;gBACjE,gBAAgB,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;gBAC7B,gBAAgB,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;gBACzC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;aACxC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,gBAAgB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACjD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC3C,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAE7C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;QAED,IAAI,eAAe;YACf,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;SACrC;QAED,IAAI,eAAe;YACf,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;SACrC;QAED,IAAI,OAAO;YACP,OAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;QAED,IAAI,IAAI;YACJ,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;QAED,IAAI,IAAI;YACJ,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;QAED,IAAI,KAAK;YACL,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;SAC3B;QAED,IAAI,sBAAsB;YACtB,OAAO,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;SAC5C;QAED,IAAI,sBAAsB,CAAC,CAAS;YAChC,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAG,CAAC,CAAC;SACzC;QAED,IAAI,qBAAqB;YACrB,OAAO,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;SAC3C;QAED,IAAI,qBAAqB,CAAC,CAAS;YAC/B,IAAI,CAAC,KAAK,CAAC,qBAAqB,GAAG,CAAC,CAAC;SACxC;QAED,IAAI,qBAAqB;YACrB,OAAO,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;SAC3C;QAED,IAAI,qBAAqB,CAAC,CAAS;YAC/B,IAAI,CAAC,KAAK,CAAC,qBAAqB,GAAG,CAAC,CAAC;SACxC;QAED,MAAM,2BAA2B;YAC7B,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC;SACzD;QAED,MAAM,mBAAmB;YACrB,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;SACjD;QAED,MAAM,qBAAqB,CAAC,gBAAyB;YACjD,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;SACnE;QAED,MAAM,oBAAoB,CAAC,gBAAyB;YAChD,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;SAClE;QAED,MAAM,oBAAoB,CAAC,gBAAyB;YAChD,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;SAClE;QAED,OAAO;YACH,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;QAED,IAAI,YAAY;YACZ,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;SAClC;QAED,IAAI,YAAY,CAAC,CAAS;YACtB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;SAC/B;QAED,YAAY,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YACnH,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SAC/D;QAED,qBAAqB,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YAC5H,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACxE;QAED,eAAe,CAAC,IAAY,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;YACpI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACxE;QAED,cAAc,CAAC,KAAY;YACvB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,YAAY,CAAC,GAAW;YACpB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAChC;QAED,KAAK,CAAC,KAAY;YACd,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,IAAY;YACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;QAED,MAAM,mBAAmB;YACrB,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;SAC1C;QAED,MAAM,mBAAmB,CAAC,MAAuB;YAC7C,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;SAChD;QAED,MAAM,mBAAmB,CAAC,MAAuB;YAC7C,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;SAChD;QAED,MAAM,0BAA0B;YAC5B,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC;SACxD;QAED,MAAM,0BAA0B;YAC5B,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC;SACxD;QAED,MAAM,gBAAgB;YAClB,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;SAC9C;QAED,MAAM,gBAAgB;YAClB,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;SAC9C;QAED,MAAM,aAAa;YACf,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;SAC3C;QAED,MAAM,aAAa;YACf,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;SAC3C;QAED,IAAI,aAAa;YACb,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;SACnC;QAED,IAAI,WAAW;YACX,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;SACjC;QAED,IAAI,aAAa;YACb,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;SACnC;QAED,IAAI,QAAQ;YACR,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;SAC9B;QAED,UAAU,CAAC,EAAU;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SACpC;QAED,YAAY;YACR,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;SACpC;QAED,MAAM,OAAO;YACT,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,eAAe,CAAC,SAAS,EAAE;gBAC1D,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;aAC9B;SACJ;QAED,MAAM,IAAI,CAAC,QAAgB;YACvB,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,eAAe,CAAC,SAAS,EAAE;gBAC1D,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACnC;SACJ;QAED,MAAM,QAAQ,CAAC,QAAgB;YAC3B,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;QAED,MAAM,KAAK;YACP,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;SAC5B;QAED,MAAM,UAAU;YACZ,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;YAC9B,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;SACjC;QAED,MAAM;YACF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;SACvB;QAED,MAAM,oBAAoB,CAAC,MAAuB;YAC9C,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,oBAAoB,EAAE;gBACtB,MAAM,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;aAC9E;SACJ;QAED,MAAM,aAAa,CAAC,KAAc;YAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;YAChC,IAAI,KAAK,KAAK,OAAO,EAAE;gBACnB,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAC3C;YACD,OAAO,OAAO,CAAC;SAClB;QAED,MAAM,aAAa,CAAC,KAAc;YAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;YAChC,IAAI,KAAK,KAAK,OAAO,EAAE;gBACnB,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAC3C;YACD,OAAO,OAAO,CAAC;SAClB;;;;;IC9XL,OAAO,CAAC,IAAI,CAAC,UAAU,OAAO,GAAG,CAAC;;;;;;;;;;;;;;;;;;;"}