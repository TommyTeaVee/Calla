import type { ErsatzEventTarget } from "kudzu/events/ErsatzEventTarget";
import { TypedEventBase } from "kudzu/events/EventBase";
import type { IFetcher } from "kudzu/io/IFetcher";
import { AudioManager } from "../audio/AudioManager";
import type { CallaTeleconferenceEvents } from "../CallaEvents";
import { ConnectionState } from "../ConnectionState";
import type { DeviceManagerInputsChangedEvent } from "../devices/DeviceManager";
import { DeviceManager } from "../devices/DeviceManager";
import type { ITeleconferenceClientExt } from "./ITeleconferenceClient";
export declare function addLogger(obj: ErsatzEventTarget, evtName: string): void;
export declare const DEFAULT_LOCAL_USER_ID = "local-user";
export declare abstract class BaseTeleconferenceClient extends TypedEventBase<CallaTeleconferenceEvents> implements ITeleconferenceClientExt {
    private _audio;
    needsVideoDevice: boolean;
    toggleLogging(): void;
    localUserID: string;
    localUserName: string;
    roomName: string;
    protected fetcher: IFetcher;
    private _connectionState;
    private _conferenceState;
    hasAudioPermission: boolean;
    hasVideoPermission: boolean;
    get connectionState(): ConnectionState;
    private setConnectionState;
    get conferenceState(): ConnectionState;
    private setConferenceState;
    constructor(fetcher: IFetcher, _audio: AudioManager, needsVideoDevice?: boolean);
    get audio(): AudioManager;
    get devices(): DeviceManager;
    protected onDispatching<T extends Event>(evt: T): void;
    getNext<T extends keyof CallaTeleconferenceEvents>(evtName: T, userID: string): Promise<CallaTeleconferenceEvents[T]>;
    connect(): Promise<void>;
    join(_roomName: string, _enableTeleconference: boolean): Promise<void>;
    leave(): Promise<void>;
    disconnect(): Promise<void>;
    abstract userExists(id: string): boolean;
    abstract getUserNames(): string[][];
    abstract identify(userNameOrID: string): Promise<void>;
    protected abstract onInputsChanged(evt: DeviceManagerInputsChangedEvent): Promise<void>;
    abstract toggleAudioMuted(): Promise<boolean>;
    abstract toggleVideoMuted(): Promise<boolean>;
    abstract getAudioMuted(): Promise<boolean>;
    abstract getVideoMuted(): Promise<boolean>;
}
