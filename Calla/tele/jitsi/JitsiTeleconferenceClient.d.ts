import { IFetcher } from "kudzu/io/IFetcher";
import type { AudioManager } from "../../audio/AudioManager";
import type { DeviceManagerInputsChangedEvent } from "../../devices/DeviceManager";
import type JitsiConference from "../../lib-jitsi-meet/JitsiConference";
import { BaseTeleconferenceClient } from "../BaseTeleconferenceClient";
export declare class JitsiTeleconferenceClient extends BaseTeleconferenceClient {
    private host;
    private bridgeHost;
    private bridgeMUC;
    useDefaultMetadataClient: boolean;
    private enableTeleconference;
    private connection;
    conference: JitsiConference;
    private tracks;
    private listenersForObjs;
    constructor(fetcher: IFetcher, audio: AudioManager, host: string, bridgeHost: string, bridgeMUC: string);
    private _on;
    private _off;
    connect(): Promise<void>;
    join(roomName: string, enableTeleconference: boolean): Promise<void>;
    identify(userName: string): Promise<void>;
    private tryRemoveTrack;
    leave(): Promise<void>;
    disconnect(): Promise<void>;
    userExists(id: string): boolean;
    getUserNames(): string[][];
    private getCurrentMediaTrack;
    protected onInputsChanged(evt: DeviceManagerInputsChangedEvent): Promise<void>;
    toggleAudioMuted(): Promise<boolean>;
    toggleVideoMuted(): Promise<boolean>;
    private isMediaMuted;
    getAudioMuted(): Promise<boolean>;
    getVideoMuted(): Promise<boolean>;
    get localAudioInput(): GainNode;
    get useHalfDuplex(): boolean;
    set useHalfDuplex(_v: boolean);
    get halfDuplexMin(): number;
    set halfDuplexMin(_v: number);
    get halfDuplexMax(): number;
    set halfDuplexMax(_v: number);
    get halfDuplexThreshold(): number;
    set halfDuplexThreshold(_v: number);
    get halfDuplexDelay(): number;
    set halfDuplexDelay(_v: number);
    get halfDuplexSustain(): number;
    set halfDuplexSustain(_v: number);
    get halfDuplexLevel(): number;
    get remoteActivityLevel(): number;
}
