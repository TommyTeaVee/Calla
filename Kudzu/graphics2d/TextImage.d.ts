import { TypedEvent } from "../events/EventBase";
import { Context2D } from "../html/canvas";
import { CanvasImage } from "./CanvasImage";
export interface PaddingRect {
    top: number;
    right: number;
    bottom: number;
    left: number;
}
export interface TextImageOptions {
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    scale: number;
    bgFillColor: string;
    bgStrokeColor: string;
    bgStrokeSize: number;
    textStrokeColor: string;
    textStrokeSize: number;
    textFillColor: string;
    textDirection: string;
    wrapWords: boolean;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;
    fontFamily: string;
    fontSize: number;
    padding: PaddingRect;
    value: string;
}
export declare class TextImage extends CanvasImage<{
    notready: TypedEvent<"notready">;
}> {
    private _minWidth;
    private _maxWidth;
    private _minHeight;
    private _maxHeight;
    private _scale;
    private _bgFillColor;
    private _bgStrokeColor;
    private _bgStrokeSize;
    private _textStrokeColor;
    private _textStrokeSize;
    private _textFillColor;
    private _textDirection;
    private _wrapWords;
    private _fontStyle;
    private _fontVariant;
    private _fontWeight;
    private _fontFamily;
    private _fontSize;
    private _padding;
    private _value;
    private notReadyEvt;
    constructor(options?: Partial<TextImageOptions>);
    get scale(): number;
    set scale(v: number);
    get minWidth(): number;
    set minWidth(v: number);
    get maxWidth(): number;
    set maxWidth(v: number);
    get minHeight(): number;
    set minHeight(v: number);
    get maxHeight(): number;
    set maxHeight(v: number);
    get width(): number;
    get height(): number;
    get padding(): PaddingRect;
    set padding(v: PaddingRect);
    get wrapWords(): boolean;
    set wrapWords(v: boolean);
    get textDirection(): string;
    set textDirection(v: string);
    get fontStyle(): string;
    set fontStyle(v: string);
    get fontVariant(): string;
    set fontVariant(v: string);
    get fontWeight(): string;
    set fontWeight(v: string);
    get fontSize(): number;
    set fontSize(v: number);
    get fontFamily(): string;
    set fontFamily(v: string);
    get textFillColor(): string;
    set textFillColor(v: string);
    get textStrokeColor(): string;
    set textStrokeColor(v: string);
    get textStrokeSize(): number;
    set textStrokeSize(v: number);
    get bgFillColor(): string;
    set bgFillColor(v: string);
    get bgStrokeColor(): string;
    set bgStrokeColor(v: string);
    get bgStrokeSize(): number;
    set bgStrokeSize(v: number);
    get value(): string;
    set value(v: string);
    draw(g: Context2D, x: number, y: number): void;
    private split;
    protected onRedraw(): boolean;
}
