import { CanvasTypes } from "../html/canvas";
import type { progressCallback } from "../tasks/progressCallback";
import { Fetcher } from "./Fetcher";
import { IImageFetcher } from "./IImageFetcher";
export declare class ImageFetcher extends Fetcher implements IImageFetcher {
    constructor();
    private readFileImage;
    protected _getImageBitmap(path: string, headers?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<ImageBitmap>;
    getImageBitmap(path: string): Promise<ImageBitmap>;
    getImageBitmap(path: string, onProgress?: progressCallback): Promise<ImageBitmap>;
    getImageBitmap(path: string, headers?: Map<string, string>): Promise<ImageBitmap>;
    getImageBitmap(path: string, headers?: Map<string, string>, onProgress?: progressCallback): Promise<ImageBitmap>;
    protected _getImage(path: string, headers?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<HTMLImageElement>;
    getImage(path: string): Promise<HTMLImageElement>;
    getImage(path: string, onProgress?: progressCallback): Promise<HTMLImageElement>;
    getImage(path: string, headers?: Map<string, string>): Promise<HTMLImageElement>;
    getImage(path: string, headers?: Map<string, string>, onProgress?: progressCallback): Promise<HTMLImageElement>;
    protected _postObjectForImageBitmap<T>(path: string, obj: T, contentType: string, headers?: progressCallback | Map<string, string>, onProgress?: progressCallback): Promise<ImageBitmap>;
    postObjectForImageBitmap<T>(path: string, obj: T, contentType: string): Promise<ImageBitmap>;
    postObjectForImageBitmap<T>(path: string, obj: T, contentType: string, onProgress?: progressCallback): Promise<ImageBitmap>;
    postObjectForImageBitmap<T>(path: string, obj: T, contentType: string, headers?: Map<string, string>): Promise<ImageBitmap>;
    postObjectForImageBitmap<T>(path: string, obj: T, contentType: string, headers?: Map<string, string>, onProgress?: progressCallback): Promise<ImageBitmap>;
    protected _postObjectForImage<T>(path: string, obj: T, contentType: string, headers?: progressCallback | Map<string, string>, onProgress?: progressCallback): Promise<HTMLImageElement>;
    postObjectForImage<T>(path: string, obj: T, contentType: string): Promise<HTMLImageElement>;
    postObjectForImage<T>(path: string, obj: T, contentType: string, onProgress?: progressCallback): Promise<HTMLImageElement>;
    postObjectForImage<T>(path: string, obj: T, contentType: string, headers?: Map<string, string>): Promise<HTMLImageElement>;
    postObjectForImage<T>(path: string, obj: T, contentType: string, headers?: Map<string, string>, onProgress?: progressCallback): Promise<HTMLImageElement>;
    private _getCanvasViaImageBitmap;
    private _getCanvasViaImage;
    private __getCanvas;
    protected _getCanvas(path: string, headers?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<CanvasTypes>;
    getCanvas(path: string): Promise<CanvasTypes>;
    getCanvas(path: string, onProgress?: progressCallback): Promise<CanvasTypes>;
    getCanvas(path: string, headers?: Map<string, string>): Promise<CanvasTypes>;
    getCanvas(path: string, headers?: Map<string, string>, onProgress?: progressCallback): Promise<CanvasTypes>;
}
