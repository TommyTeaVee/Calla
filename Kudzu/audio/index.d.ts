export declare type AudioVertex = AudioNodeType | AudioParam;
export declare function nameVertex<T>(name: string, node: T & AudioNode): T;
export declare function nameVertex<T>(name: string, param: T & AudioParam): T;
export declare function connect(a: AudioNodeType, destinationNode: AudioNodeType, output?: number, input?: number): boolean;
export declare function connect(a: AudioNodeType, destinationParam: AudioParam, output?: number): boolean;
export declare function disconnect(a: AudioNodeType): boolean;
export declare function disconnect(a: AudioNodeType, output: number): boolean;
export declare function disconnect(a: AudioNodeType, destinationNode: AudioNodeType, output: number, input: number): boolean;
export declare function disconnect(a: AudioNodeType, destinationNode: AudioNodeType, output: number): boolean;
export declare function disconnect(a: AudioNodeType, destinationNode: AudioNodeType): boolean;
export declare function disconnect(a: AudioNodeType, destinationParam: AudioParam, output: number): boolean;
export declare function disconnect(a: AudioNodeType, destinationParam: AudioParam): boolean;
export declare function print(): void;
export declare const hasAudioContext: boolean;
export declare const hasAudioListener: boolean;
export declare const hasOldAudioListener: boolean;
export declare const hasNewAudioListener: boolean;
export declare const audioCtx: AudioContext;
export declare const audioReady: Promise<void>;
export interface ErsatzAudioNode {
    input: AudioNode;
    output: AudioNode;
}
export declare type AudioNodeType = AudioNode | ErsatzAudioNode;
export declare function isErsatzAudioNode(value: any): value is ErsatzAudioNode;
export declare class AudioInit<ValueT> {
    private readonly fieldName;
    private readonly value;
    private readonly types;
    constructor(fieldName: string, value: ValueT, ...types: Function[]);
    apply(node: AudioNode): void;
}
declare type AudioNodeParam<ValueT> = AudioNodeType | [number, AudioNodeType | AudioParam] | [number, number, AudioNodeType] | AudioInit<ValueT>;
export declare function decodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer>;
export declare function Buffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;
export declare function PeriodicWave(real: number[] | Float32Array, imag: number[] | Float32Array, constraints?: PeriodicWaveConstraints): PeriodicWave;
declare type BaseAudioNodeParamType = number | ChannelCountMode | ChannelInterpretation;
export declare function Analyser(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): AnalyserNode;
export declare function BiquadFilter(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType | BiquadFilterType>[]): BiquadFilterNode;
export declare function BufferSource(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType | boolean | AudioBuffer>[]): AudioBufferSourceNode;
export declare function ChannelMerger(name: string, numberOfInputs?: number, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): ChannelMergerNode;
export declare function ChannelSplitter(name: string, numberOfOutputs?: number, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): ChannelSplitterNode;
export declare function ConstantSource(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): ConstantSourceNode;
export declare function Convolver(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType | boolean>[]): ConvolverNode;
export declare function Delay(name: string, maxDelayTime?: number, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): DelayNode;
export declare function DynamicsCompressor(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): DynamicsCompressorNode;
export declare function Gain(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): GainNode;
export declare function IIRFilter(name: string, feedforward: number[], feedback: number[], ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): IIRFilterNode;
export declare function MediaElementSource(name: string, mediaElement: HTMLMediaElement, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): MediaElementAudioSourceNode;
export declare function MediaStreamDestination(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): MediaStreamAudioDestinationNode;
export declare function MediaStreamSource(name: string, mediaStream: MediaStream, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): MediaStreamAudioSourceNode;
export declare function MediaStreamTrackSource(name: string, mediaStreamTrack: MediaStreamTrack, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): MediaStreamTrackAudioSourceNode;
export declare function Oscillator(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): OscillatorNode;
export declare function Panner(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType | PanningModelType | DistanceModelType>[]): PannerNode;
export declare function ScriptProcessor(name: string, bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): ScriptProcessorNode;
export declare function StereoPanner(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): StereoPannerNode;
export declare function WaveShaper(name: string, ...rest: AudioNodeParam<BaseAudioNodeParamType>[]): WaveShaperNode;
export declare function attack(value: number): AudioInit<number>;
export declare function biquadFilterType(value: BiquadFilterType): AudioInit<BiquadFilterType>;
export declare function buffer(value: AudioBuffer): AudioInit<AudioBuffer>;
export declare function channelCount(value: number): AudioInit<number>;
export declare function channelCountMode(value: ChannelCountMode): AudioInit<ChannelCountMode>;
export declare function channelInterpretation(value: ChannelInterpretation): AudioInit<ChannelInterpretation>;
export declare function coneInnerAngle(value: number): AudioInit<number>;
export declare function coneOuterAngle(value: number): AudioInit<number>;
export declare function coneOuterGain(value: number): AudioInit<number>;
export declare function curve(value: Float32Array): AudioInit<Float32Array>;
export declare function delayTime(value: number): AudioInit<number>;
export declare function detune(value: number): AudioInit<number>;
export declare function distanceModel(value: DistanceModelType): AudioInit<DistanceModelType>;
export declare function fftSize(value: number): AudioInit<number>;
export declare function frequency(value: number): AudioInit<number>;
export declare function gain(value: number): AudioInit<number>;
export declare function iirFilterType(value: OscillatorType): AudioInit<OscillatorType>;
export declare function knee(value: number): AudioInit<number>;
export declare function loop(value: boolean): AudioInit<boolean>;
export declare function loopEnd(value: number): AudioInit<number>;
export declare function loopStart(value: number): AudioInit<number>;
export declare function maxDecibels(value: number): AudioInit<number>;
export declare function maxDistance(value: number): AudioInit<number>;
export declare function minDecibels(value: number): AudioInit<number>;
export declare function normalize(value: boolean): AudioInit<boolean>;
export declare function offset(value: number): AudioInit<number>;
export declare function orientationX(value: number): AudioInit<number>;
export declare function orientationY(value: number): AudioInit<number>;
export declare function orientationZ(value: number): AudioInit<number>;
export declare function oscillatorType(value: OscillatorType): AudioInit<OscillatorType>;
export declare function oversample(value: OverSampleType): AudioInit<OverSampleType>;
export declare function pan(value: number): AudioInit<number>;
export declare function panningModel(value: PanningModelType): AudioInit<PanningModelType>;
export declare function positionX(value: number): AudioInit<number>;
export declare function positionY(value: number): AudioInit<number>;
export declare function positionZ(value: number): AudioInit<number>;
export declare function Q(value: number): AudioInit<number>;
export declare function ratio(value: number): AudioInit<number>;
export declare function refDistance(value: number): AudioInit<number>;
export declare function release(value: number): AudioInit<number>;
export declare function rolloffFactor(value: number): AudioInit<number>;
export declare function smoothingTimeConstant(value: number): AudioInit<number>;
export declare function threshold(value: number): AudioInit<number>;
export {};
