{"version":3,"file":"fetcher.js","sources":["../../../Kudzu/workers/WorkerServer.ts","../../../Kudzu/events/waitFor.ts","../../../Kudzu/typeChecks.ts","../../../Kudzu/html/attrs.ts","../../../Kudzu/html/tags.ts","../../../Kudzu/html/script.ts","../../../Kudzu/tasks/splitProgress.ts","../../../Kudzu/io/Fetcher.ts","../../../Kudzu/io/FetcherWorkerServer.ts","../../src/fetcher/index.ts"],"sourcesContent":["import type { progressCallback } from \"../tasks/progressCallback\";\r\n\r\nexport type workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\nexport type workerServerCreateTransferableCallback<T> = (returnValue: T) => Transferable[];\r\n\r\nexport enum WorkerMethodMessageType {\r\n    Error = \"error\",\r\n    Progress = \"progress\",\r\n    Return = \"return\",\r\n    ReturnValue = \"returnValue\"\r\n}\r\n\r\ninterface WorkerMethodMessage<T extends WorkerMethodMessageType> {\r\n    taskID: number;\r\n    methodName: T;\r\n}\r\n\r\nexport interface WorkerMethodErrorMessage\r\n    extends WorkerMethodMessage<WorkerMethodMessageType.Error> {\r\n    errorMessage: string;\r\n}\r\n\r\nexport interface WorkerMethodProgressMessage\r\n    extends WorkerMethodMessage<WorkerMethodMessageType.Progress> {\r\n    soFar: number;\r\n    total: number;\r\n    msg: number;\r\n}\r\n\r\nexport interface WorkerMethodReturnMessage\r\n    extends WorkerMethodMessage<WorkerMethodMessageType.Return> {\r\n}\r\n\r\nexport interface WorkerMethodReturnValueMessage\r\n    extends WorkerMethodMessage<WorkerMethodMessageType.ReturnValue> {\r\n    returnValue: any\r\n}\r\n\r\nexport type WorkerMethodMessages = WorkerMethodErrorMessage\r\n    | WorkerMethodProgressMessage\r\n    | WorkerMethodReturnMessage\r\n    | WorkerMethodReturnValueMessage;\r\n\r\nexport interface WorkerMethodCallMessage {\r\n    taskID: number;\r\n    methodName: string;\r\n    params: any[];\r\n}\r\n\r\nexport class WorkerServer {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.onmessage = (evt: MessageEvent<WorkerMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            const method = this.methods.get(data.methodName);\r\n            if (method) {\r\n                method(data.taskID, ...data.params);\r\n            }\r\n            else {\r\n                this.onError(data.taskID, \"method not found: \" + data.methodName);\r\n            }\r\n        };\r\n\r\n        this.add(\"methodExists\", async (methodName: string) => this.methods.has(methodName));\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        this.self.postMessage({\r\n            taskID,\r\n            methodName: WorkerMethodMessageType.Error,\r\n            errorMessage\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Report progress through long-running invocations.\r\n     * @param taskID - the invocation ID of the method that is updating.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     */\r\n    private onProgress(taskID: number, soFar: number, total: number, msg?: string): void {\r\n        this.self.postMessage({\r\n            taskID,\r\n            methodName: WorkerMethodMessageType.Progress,\r\n            soFar,\r\n            total,\r\n            msg\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return the results back to the invoker.\r\n     * @param taskID - the invocation ID of the method that has completed.\r\n     * @param returnValue - the (optional) value that is being returned.\r\n     * @param transferables - an (optional) array of values that appear in the return value that should be transfered back to the calling thread, rather than copied.\r\n     */\r\n    private onReturn(taskID: number, returnValue?: any, transferables?: Transferable[]): void {\r\n        if (returnValue === undefined) {\r\n            this.self.postMessage({\r\n                taskID,\r\n                methodName: WorkerMethodMessageType.Return\r\n            });\r\n        }\r\n        else if (transferables === undefined) {\r\n            this.self.postMessage({\r\n                taskID,\r\n                methodName: WorkerMethodMessageType.ReturnValue,\r\n                returnValue\r\n            });\r\n        }\r\n        else {\r\n            this.self.postMessage({\r\n                taskID,\r\n                methodName: WorkerMethodMessageType.ReturnValue,\r\n                returnValue\r\n            }, transferables);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    add<T>(methodName: string, asyncFunc: (...args: any[]) => Promise<T>, transferReturnValue?: workerServerCreateTransferableCallback<T>) {\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n\r\n            // If your invocable functions don't report progress, this can be safely ignored.\r\n            const onProgress: progressCallback = (soFar: number, total: number, msg?: string) => {\r\n                this.onProgress(\r\n                    taskID,\r\n                    soFar,\r\n                    total,\r\n                    msg\r\n                );\r\n            };\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, onProgress);\r\n                if (returnValue === undefined) {\r\n                    this.onReturn(taskID);\r\n                }\r\n                else {\r\n                    if (transferReturnValue) {\r\n                        const transferables = transferReturnValue(returnValue);\r\n                        this.onReturn(taskID, returnValue, transferables);\r\n                    }\r\n                    else {\r\n                        this.onReturn(taskID, returnValue);\r\n                    }\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(taskID, exp.message);\r\n            }\r\n        });\r\n    }\r\n}","ï»¿export function waitFor(test: () => boolean): Promise<void> {\r\n    return new Promise((resolve: () => void) => {\r\n        const handle = setInterval(() => {\r\n            if (test()) {\r\n                clearInterval(handle);\r\n                resolve();\r\n            }\r\n        }, 100);\r\n    });\r\n}\r\n","function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function isHTMLElement(obj: any): obj is HTMLElement {\r\n    return obj instanceof HTMLElement;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isNullOrUndefined(obj: any): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}","import { isBoolean, isHTMLElement } from \"../typeChecks\";\r\n\r\nexport interface IAppliable {\r\n    apply(elem: HTMLElement | CSSStyleDeclaration): void;\r\n}\r\n\r\n/**\r\n * A setter functor for HTML attributes.\r\n **/\r\nexport class Attr implements IAppliable {\r\n    readonly tags: readonly string[];\r\n    /**\r\n     * Creates a new setter functor for HTML Attributes\r\n     * @param key - the attribute name.\r\n     * @param value - the value to set for the attribute.\r\n     * @param tags - the HTML tags that support this attribute.\r\n     */\r\n    constructor(\r\n        public readonly key: string,\r\n        public readonly value: any,\r\n        ...tags: string[]) {\r\n        this.tags = tags.map(t => t.toLocaleUpperCase());\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    apply(elem: HTMLElement | CSSStyleDeclaration) {\r\n        if (isHTMLElement(elem)) {\r\n            const isValid = this.tags.length === 0\r\n                || this.tags.indexOf(elem.tagName) > -1;\r\n\r\n            if (!isValid) {\r\n                console.warn(`Element ${elem.tagName} does not support Attribute ${this.key}`);\r\n            }\r\n            else if (this.key === \"style\") {\r\n                Object.assign(elem.style, this.value);\r\n            }\r\n            else if (this.key in elem) {\r\n                (elem as any)[this.key] = this.value;\r\n            }\r\n            else if (this.value === false) {\r\n                elem.removeAttribute(this.key);\r\n            }\r\n            else if (this.value === true) {\r\n                elem.setAttribute(this.key, \"\");\r\n            }\r\n            else {\r\n                elem.setAttribute(this.key, this.value);\r\n            }\r\n        }\r\n        else {\r\n            (elem as any)[this.key] = this.value;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * a list of types the server accepts, typically a file type.\r\n * @param value - the value to set on the attribute.\r\n **/\r\nexport function accept(value: string) { return new Attr(\"accept\", value, \"form\", \"input\"); }\r\n\r\n/**\r\n * The accessKey attribute\r\n **/\r\nexport function accessKey(value: string) { return new Attr(\"accessKey\", value, \"input\", \"button\"); }\r\n\r\n/**\r\n * specifying the horizontal alignment of the element.\r\n **/\r\nexport function align(value: string) { return new Attr(\"align\", value, \"applet\", \"caption\", \"col\", \"colgroup\", \"hr\", \"iframe\", \"img\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"); }\r\n\r\n/**\r\n * Specifies a feature-policy for the iframe.\r\n **/\r\nexport function allow(value: string) { return new Attr(\"allow\", value, \"iframe\"); }\r\n\r\n/**\r\n * Alternative text in case an image can't be displayed.\r\n **/\r\nexport function alt(value: string) { return new Attr(\"alt\", value, \"applet\", \"area\", \"img\", \"input\"); }\r\n\r\n/**\r\n * Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\r\n **/\r\nexport function ariaActiveDescendant(value: string) { return new Attr(\"ariaActiveDescendant\", value); }\r\n\r\n/**\r\n * Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\r\n **/\r\nexport function ariaAtomic(value: boolean) { return new Attr(\"ariaAtomic\", value); }\r\n\r\n/**\r\n * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\r\n **/\r\nexport function ariaAutoComplete(value: string) { return new Attr(\"ariaAutoComplete\", value); }\r\n\r\n/**\r\n * Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\r\n **/\r\nexport function ariaBusy(value: boolean) { return new Attr(\"ariaBusy\", value); }\r\n\r\n/**\r\n * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.\r\n **/\r\nexport function ariaChecked(value: boolean) { return new Attr(\"ariaChecked\", value); }\r\n\r\n/**\r\n * Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\r\n  **/\r\nexport function ariaColCount(value: number) { return new Attr(\"ariaColCount\", value); }\r\n\r\n/**\r\n * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.\r\n  **/\r\nexport function ariaColIndex(value: number) { return new Attr(\"ariaColIndex\", value); }\r\n\r\n/**\r\n * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\r\n  **/\r\nexport function ariaColSpan(value: number) { return new Attr(\"ariaColSpan\", value); }\r\n\r\n/**\r\n * Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.\r\n  **/\r\nexport function ariaControls(value: string) { return new Attr(\"ariaControls\", value); }\r\n\r\n/**\r\n * Indicates the element that represents the current item within a container or set of related elements.\r\n  **/\r\nexport function ariaCurrent(value: string) { return new Attr(\"ariaCurrent\", value); }\r\n\r\n/**\r\n * Identifies the element (or elements) that describes the object. See related aria-labelledby.\r\n  **/\r\nexport function ariaDescribedBy(value: string) { return new Attr(\"ariaDescribedBy\", value); }\r\n\r\n/**\r\n * Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.\r\n  **/\r\nexport function ariaDetails(value: string) { return new Attr(\"ariaDetails\", value); }\r\n\r\n/**\r\n * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.\r\n  **/\r\nexport function ariaDisabled(value: boolean) { return new Attr(\"ariaDisabled\", value); }\r\n\r\n/**\r\n * Identifies the element that provides an error message for the object. See related aria-invalid and aria-describedby.\r\n  **/\r\nexport function ariaErrorMessage(value: string) { return new Attr(\"ariaErrorMessage\", value); }\r\n\r\n/**\r\n * Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\r\n **/\r\nexport function ariaExpanded(value: boolean) { return new Attr(\"ariaExpanded\", value); }\r\n\r\n/**\r\n * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\r\n  **/\r\nexport function ariaFlowTo(value: string) { return new Attr(\"ariaFlowTo\", value); }\r\n\r\n/**\r\n * Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\r\n  **/\r\nexport function ariaHasPopup(value: string) { return new Attr(\"ariaHasPopup\", value); }\r\n\r\n/**\r\n * Indicates whether the element is exposed to an accessibility API. See related aria-disabled.\r\n **/\r\nexport function ariaHidden(value: boolean) { return new Attr(\"ariaHidden\", value); }\r\n\r\n/**\r\n * Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.\r\n  **/\r\nexport function ariaInvalid(value: string) { return new Attr(\"ariaInvalid\", value); }\r\n\r\n/**\r\n * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\r\n  **/\r\nexport function ariaKeyShortcuts(value: string) { return new Attr(\"ariaKeyShortcuts\", value); }\r\n\r\n/**\r\n * Defines a string value that labels the current element. See related aria-labelledby.\r\n  **/\r\nexport function ariaLabel(value: string) { return new Attr(\"ariaLabel\", value); }\r\n\r\n/**\r\n * Identifies the element (or elements) that labels the current element. See related aria-describedby.\r\n  **/\r\nexport function ariaLabelledBy(value: string) { return new Attr(\"ariaLabelledBy\", value); }\r\n\r\n/**\r\n * Defines the hierarchical level of an element within a structure.\r\n  **/\r\nexport function ariaLevel(value: number) { return new Attr(\"ariaLevel\", value); }\r\n\r\n/**\r\n * Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\r\n  **/\r\nexport function ariaLive(value: string) { return new Attr(\"ariaLive\", value); }\r\n\r\n/**\r\n * Indicates whether an element is modal when displayed\r\n  **/\r\nexport function ariaModal(value: boolean) { return new Attr(\"ariaModal\", value); }\r\n\r\n/**\r\n * Indicates whether a text box accepts multiple lines of input or only a single line.\r\n  **/\r\nexport function ariaMultiline(value: boolean) { return new Attr(\"ariaMultiline\", value); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function ariaMultiSelectable(value: boolean) { return new Attr(\"ariaMultiSelectable\", value); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function ariaOrientation(value: string) { return new Attr(\"ariaOrientation\", value); }\r\n\r\n/**\r\n * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\r\n  **/\r\nexport function ariaOwns(value: string) { return new Attr(\"ariaOwns\", value); }\r\n\r\n/**\r\n * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\r\n  **/\r\nexport function ariaPlaceholder(value: string) { return new Attr(\"ariaPlaceholder\", value); }\r\n\r\n/**\r\n * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\r\n  **/\r\nexport function ariaPosInSet(value: number) { return new Attr(\"ariaPosInSet\", value); }\r\n\r\n/**\r\n * Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.\r\n **/\r\nexport function ariaPressed(value: boolean) { return new Attr(\"ariaPressed\", value); }\r\n\r\n/**\r\n * Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.\r\n  **/\r\nexport function ariaReadOnly(value: boolean) { return new Attr(\"ariaReadOnly\", value); }\r\n\r\n/**\r\n * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\r\n  **/\r\nexport function ariaRelevant(value: string) { return new Attr(\"ariaRelevant\", value); }\r\n\r\n/**\r\n * Indicates that user input is required on the element before a form may be submitted.\r\n  **/\r\nexport function ariaRequired(value: boolean) { return new Attr(\"ariaRequired\", value); }\r\n\r\n/**\r\n * Defines a human-readable, author-localized description for the role of an element.\r\n  **/\r\nexport function ariaRoleDescription(value: string) { return new Attr(\"ariaRoleDescription\", value); }\r\n\r\n/**\r\n * Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\r\n  **/\r\nexport function ariaRowCount(value: number) { return new Attr(\"ariaRowCount\", value); }\r\n\r\n/**\r\n * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.\r\n  **/\r\nexport function ariaRowIndex(value: number) { return new Attr(\"ariaRowIndex\", value); }\r\n\r\n/**\r\n Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\r\n  **/\r\nexport function ariaRowSpan(value: number) { return new Attr(\"ariaRowSpan\", value); }\r\n\r\n/**\r\n * Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.\r\n **/\r\nexport function ariaSelected(value: boolean) { return new Attr(\"ariaSelected\", value); }\r\n\r\n/**\r\n * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\r\n  **/\r\nexport function ariaSetSize(value: number) { return new Attr(\"ariaSetsize\", value); }\r\n\r\n/**\r\n * Indicates if items in a table or grid are sorted in ascending or descending order.\r\n  **/\r\nexport function ariaSort(value: string) { return new Attr(\"ariaSort\", value); }\r\n\r\n/**\r\n * Defines the maximum allowed value for a range widget.\r\n  **/\r\nexport function ariaValueMax(value: number) { return new Attr(\"ariaValueMax\", value); }\r\n\r\n/**\r\n * Defines the minimum allowed value for a range widget.\r\n  **/\r\nexport function ariaValueMin(value: number) { return new Attr(\"ariaValueMin\", value); }\r\n\r\n/**\r\n * Defines the current value for a range widget. See related aria-valuetext.\r\n  **/\r\nexport function ariaValueNow(value: number) { return new Attr(\"ariaValueNow\", value); }\r\n\r\n/**\r\n * Defines the human readable text alternative of aria-valuenow for a range widget.\r\n  **/\r\nexport function ariaValueText(value: string) { return new Attr(\"ariaValueText\", value); }\r\n\r\n/**\r\n * Executes the script asynchronously.\r\n  **/\r\nexport function async(value: string) { return new Attr(\"async\", value, \"script\"); }\r\n\r\n/**\r\n * Sets whether input is automatically capitalized when entered by user\r\n  **/\r\nexport function autoCapitalize(value: boolean) { return new Attr(\"autocapitalize\", value); }\r\n\r\n/**\r\n * Indicates whether controls in this form can by default have their values automatically completed by the browser.\r\n  **/\r\nexport function autoComplete(value: boolean) { return new Attr(\"autocomplete\", value, \"form\", \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The element should be automatically focused after the page loaded.\r\n  **/\r\nexport function autoFocus(value: boolean) { return new Attr(\"autofocus\", value, \"button\", \"input\", \"keygen\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The audio or video should play as soon as possible.\r\n  **/\r\nexport function autoPlay(value: boolean) { return new Attr(\"autoplay\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Contains the time range of already buffered media.\r\n  **/\r\nexport function buffered(value: boolean) { return new Attr(\"buffered\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * From the HTML Media Capture\r\n  **/\r\nexport function capture(value: boolean) { return new Attr(\"capture\", value, \"input\"); }\r\n\r\n/**\r\n * Declares the character encoding of the page or script.\r\n  **/\r\nexport function charSet(value: string) { return new Attr(\"charset\", value, \"meta\", \"script\"); }\r\n\r\n/**\r\n * Indicates whether the element should be checked on page load.\r\n  **/\r\nexport function checked(value: boolean) { return new Attr(\"checked\", value, \"command\", \"input\"); }\r\n\r\n/**\r\n * Contains a URI which points to the source of the quote or change.\r\n  **/\r\nexport function cite(value: string) { return new Attr(\"cite\", value, \"blockquote\", \"del\", \"ins\", \"q\"); }\r\n\r\n/**\r\n * Often used with CSS to style elements with common properties.\r\n  **/\r\nexport function className(value: string) { return new Attr(\"className\", value); }\r\n\r\n/**\r\n * Specifies the URL of the applet's class file to be loaded and executed.\r\n  **/\r\nexport function code(value: string) { return new Attr(\"code\", value, \"applet\"); }\r\n\r\n/**\r\n * This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored.\r\n  **/\r\nexport function codeBase(value: string) { return new Attr(\"codebase\", value, \"applet\"); }\r\n\r\n/**\r\n * Defines the number of columns in a textarea.\r\n  **/\r\nexport function cols(value: number) { return new Attr(\"cols\", value, \"textarea\"); }\r\n\r\n/**\r\n * The colspan attribute defines the number of columns a cell should span.\r\n  **/\r\nexport function colSpan(value: number) { return new Attr(\"colspan\", value, \"td\", \"th\"); }\r\n\r\n/**\r\n * A value associated with http-equiv or name depending on the context.\r\n  **/\r\nexport function content(value: string) { return new Attr(\"content\", value, \"meta\"); }\r\n\r\n/**\r\n * Indicates whether the element's content is editable.\r\n  **/\r\nexport function contentEditable(value: string) { return new Attr(\"contenteditable\", value); }\r\n\r\n/**\r\n * Defines the ID of a <menu> element which will serve as the element's context menu.\r\n  **/\r\nexport function contextMenu(value: string) { return new Attr(\"contextmenu\", value); }\r\n\r\n/**\r\n * Indicates whether the browser should show playback controls to the user.\r\n  **/\r\nexport function controls(value: boolean) { return new Attr(\"controls\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * A set of values specifying the coordinates of the hot-spot region.\r\n  **/\r\nexport function coords(value: string) { return new Attr(\"coords\", value, \"area\"); }\r\n\r\n/**\r\n * How the element handles cross-origin requests\r\n  **/\r\nexport function crossOrigin(value: string) { return new Attr(\"crossorigin\", value, \"audio\", \"img\", \"link\", \"script\", \"video\"); }\r\n\r\n/**\r\n * Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\r\n  **/\r\nexport function csp(value: string) { return new Attr(\"csp\", value, \"iframe\"); }\r\n\r\n/**\r\n * Specifies the URL of the resource.\r\n  **/\r\nexport function data(value: string) { return new Attr(\"data\", value, \"object\"); }\r\n\r\n/**\r\n * Lets you attach custom attributes to an HTML element.\r\n */\r\nexport function customData(name: string, value: any) { return new Attr(\"data\" + name, [], value); }\r\n\r\n/**\r\n * Indicates the date and time associated with the element.\r\n  **/\r\nexport function dateTime(value: Date) { return new Attr(\"datetime\", value, \"del\", \"ins\", \"time\"); }\r\n\r\n/**\r\n * Indicates the preferred method to decode the image.\r\n  **/\r\nexport function decoding(value: string) { return new Attr(\"decoding\", value, \"img\"); }\r\n\r\n/**\r\n * Indicates that the track should be enabled unless the user's preferences indicate something different.\r\n  **/\r\nexport function defaultValue(value: string) { return new Attr(\"default\", value, \"track\"); }\r\n\r\n/**\r\n * Indicates that the script should be executed after the page has been parsed.\r\n  **/\r\nexport function defer(value: boolean) { return new Attr(\"defer\", value, \"script\"); }\r\n\r\n/**\r\n * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\r\n  **/\r\nexport function dir(value: string) { return new Attr(\"dir\", value); }\r\n\r\n/**\r\n * Indicates whether the user can interact with the element.\r\n  **/\r\nexport function disabled(value: boolean) { return new Attr(\"disabled\", value, \"button\", \"command\", \"fieldset\", \"input\", \"keygen\", \"optgroup\", \"option\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * ??? \r\n  **/\r\nexport function dirName(value: string) { return new Attr(\"dirname\", value, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates that the hyperlink is to be used for downloading a resource.\r\n  **/\r\nexport function download(value: boolean) { return new Attr(\"download\", value, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines whether the element can be dragged.\r\n  **/\r\nexport function draggable(value: boolean) { return new Attr(\"draggable\", value); }\r\n\r\n/**\r\n * Indicates that the element accepts the dropping of content onto it.\r\n  **/\r\nexport function dropZone(value: string) { return new Attr(\"dropzone\", value); }\r\n\r\n/**\r\n * Defines the content type of the form data when the method is POST.\r\n  **/\r\nexport function encType(value: string) { return new Attr(\"enctype\", value, \"form\"); }\r\n\r\n/**\r\n * The enterkeyhint specifies what action label (or icon) to present for the enter key on virtual keyboards. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function enterKeyHint(value: string) { return new Attr(\"enterkeyhint\", value, \"textarea\"); }\r\n\r\n/**\r\n * Describes elements which belongs to this one.\r\n  **/\r\nexport function htmlFor(value: string) { return new Attr(\"htmlFor\", value, \"label\", \"output\"); }\r\n\r\n/**\r\n * Indicates the form that is the owner of the element.\r\n  **/\r\nexport function form(value: string) { return new Attr(\"form\", value, \"button\", \"fieldset\", \"input\", \"keygen\", \"label\", \"meter\", \"object\", \"output\", \"progress\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates the action of the element, overriding the action defined in the <form>.\r\n  **/\r\nexport function formAction(value: string) { return new Attr(\"formaction\", value, \"input\", \"button\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\r\n  **/\r\nexport function formEncType(value: string) { return new Attr(\"formenctype\", value, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\r\n  **/\r\nexport function formMethod(value: string) { return new Attr(\"formmethod\", value, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\r\n  **/\r\nexport function formNoValidate(value: boolean) { return new Attr(\"formnovalidate\", value, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\r\n  **/\r\nexport function formTarget(value: string) { return new Attr(\"formtarget\", value, \"button\", \"input\"); }\r\n\r\n/**\r\n * IDs of the <th> elements which applies to this element.\r\n  **/\r\nexport function headers(value: string) { return new Attr(\"headers\", value, \"td\", \"th\"); }\r\n\r\n/**\r\n * Specifies the height of elements listed here. For all other elements, use the CSS height property.\r\n  **/\r\nexport function height(value: number|string) { return new Attr(\"height\", value, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\r\n  **/\r\nexport function hidden(value: boolean) { return new Attr(\"hidden\", value); }\r\n\r\n/**\r\n * Indicates the lower bound of the upper range.\r\n  **/\r\nexport function high(value: number) { return new Attr(\"high\", value, \"meter\"); }\r\n\r\n/**\r\n * The URL of a linked resource.\r\n  **/\r\nexport function href(value: string) { return new Attr(\"href\", value, \"a\", \"area\", \"base\", \"link\"); }\r\n\r\n/**\r\n * Specifies the language of the linked resource.\r\n  **/\r\nexport function hrefLang(value: string) { return new Attr(\"hreflang\", value, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Defines a pragma directive.\r\n  **/\r\nexport function httpEquiv(value: string) { return new Attr(\"httpEquiv\", value, \"meta\"); }\r\n\r\n/**\r\n * Specifies a picture which represents the command.\r\n  **/\r\nexport function icon(value: string) { return new Attr(\"icon\", value, \"command\"); }\r\n\r\n/**\r\n * Often used with CSS to style a specific element. The value of this attribute must be unique.\r\n  **/\r\nexport function id(value: string) { return new Attr(\"id\", value); }\r\n\r\n/**\r\n * Indicates the relative fetch priority for the resource.\r\n  **/\r\nexport function importance(value: string) { return new Attr(\"importance\", value, \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function inputMode(value: string) { return new Attr(\"inputmode\", value, \"textarea\"); }\r\n\r\n/**\r\n * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\r\n  **/\r\nexport function integrity(value: string) { return new Attr(\"integrity\", value, \"link\", \"script\"); }\r\n\r\n/**\r\n * This attribute tells the browser to ignore the actual intrinsic size of the image and pretend itâs the size specified in the attribute.\r\n  **/\r\nexport function intrinsicSize(value: string) { return new Attr(\"intrinsicsize\", value, \"img\"); }\r\n\r\n/**\r\n * Indicates that the image is part of a server-side image map.\r\n  **/\r\nexport function isMap(value: boolean) { return new Attr(\"ismap\", value, \"img\"); }\r\n\r\n/**\r\n * Specifies the type of key generated.\r\n  **/\r\nexport function keyType(value: string) { return new Attr(\"keytype\", value, \"keygen\"); }\r\n\r\n/**\r\n * The itemprop attribute\r\n  **/\r\nexport function itemProp(value: string) { return new Attr(\"itemprop\", value); }\r\n\r\n/**\r\n * Specifies the kind of text track.\r\n  **/\r\nexport function kind(value: string) { return new Attr(\"kind\", value, \"track\"); }\r\n\r\n/**\r\n * Specifies a user-readable title of the element.\r\n  **/\r\nexport function label(value: string) { return new Attr(\"label\", value, \"optgroup\", \"option\", \"track\"); }\r\n\r\n/**\r\n * Defines the language used in the element.\r\n  **/\r\nexport function lang(value: string) { return new Attr(\"lang\", value); }\r\n\r\n/**\r\n * Defines the script language used in the element.\r\n  **/\r\nexport function language(value: string) { return new Attr(\"language\", value, \"script\"); }\r\n\r\n/**\r\n * Identifies a list of pre-defined options to suggest to the user.\r\n  **/\r\nexport function list(value: string) { return new Attr(\"list\", value, \"input\"); }\r\n\r\n/**\r\n * Indicates whether the media should start playing from the start when it's finished.\r\n  **/\r\nexport function loop(value: boolean) { return new Attr(\"loop\", value, \"audio\", \"bgsound\", \"marquee\", \"video\"); }\r\n\r\n/**\r\n * Indicates the upper bound of the lower range.\r\n  **/\r\nexport function low(value: number) { return new Attr(\"low\", value, \"meter\"); }\r\n\r\n/**\r\n * Indicates the maximum value allowed.\r\n  **/\r\nexport function max(value: number) { return new Attr(\"max\", value, \"input\", \"meter\", \"progress\"); }\r\n\r\n/**\r\n * Defines the maximum number of characters allowed in the element.\r\n  **/\r\nexport function maxLength(value: number) { return new Attr(\"maxlength\", value, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Defines the minimum number of characters allowed in the element.\r\n  **/\r\nexport function minLength(value: number) { return new Attr(\"minlength\", value, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Specifies a hint of the media for which the linked resource was designed.\r\n  **/\r\nexport function media(value: string) { return new Attr(\"media\", value, \"a\", \"area\", \"link\", \"source\", \"style\"); }\r\n\r\n/**\r\n * Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\r\n  **/\r\nexport function method(value: string) { return new Attr(\"method\", value, \"form\"); }\r\n\r\n/**\r\n * Indicates the minimum value allowed.\r\n  **/\r\nexport function min(value: number) { return new Attr(\"min\", value, \"input\", \"meter\"); }\r\n\r\n/**\r\n * Indicates whether multiple values can be entered in an input of the type email or file.\r\n  **/\r\nexport function multiple(value: boolean) { return new Attr(\"multiple\", value, \"input\", \"select\"); }\r\n\r\n/**\r\n * Indicates whether the audio will be initially silenced on page load.\r\n  **/\r\nexport function muted(value: boolean) { return new Attr(\"muted\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Name of the element. For example used by the server to identify the fields in form submits.\r\n  **/\r\nexport function name(value: string) { return new Attr(\"name\", value, \"button\", \"form\", \"fieldset\", \"iframe\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\", \"map\", \"meta\", \"param\"); }\r\n\r\n/**\r\n * This attribute indicates that the form shouldn't be validated when submitted.\r\n  **/\r\nexport function noValidate(value: boolean) { return new Attr(\"novalidate\", value, \"form\"); }\r\n\r\n/**\r\n * Indicates whether the details will be shown on page load.\r\n  **/\r\nexport function open(value: string) { return new Attr(\"open\", value, \"details\"); }\r\n\r\n/**\r\n * Indicates the optimal numeric value.\r\n  **/\r\nexport function optimum(value: number) { return new Attr(\"optimum\", value, \"meter\"); }\r\n\r\n/**\r\n * Defines a regular expression which the element's value will be validated against.\r\n  **/\r\nexport function pattern(value: string) { return new Attr(\"pattern\", value, \"input\"); }\r\n\r\n/**\r\n * The ping attribute specifies a space-separated list of URLs to be notified if a user follows the hyperlink.\r\n  **/\r\nexport function ping(value: string) { return new Attr(\"ping\", value, \"a\", \"area\"); }\r\n\r\n/**\r\n * Provides a hint to the user of what can be entered in the field.\r\n  **/\r\nexport function placeHolder(value: string) { return new Attr(\"placeholder\", value, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates that the media element should play automatically on iOS.\r\n  **/\r\nexport function playsInline(value: boolean) { return new Attr(\"playsInline\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * A URL indicating a poster frame to show until the user plays or seeks.\r\n  **/\r\nexport function poster(value: string) { return new Attr(\"poster\", value, \"video\"); }\r\n\r\n/**\r\n * Indicates whether the whole resource, parts of it or nothing should be preloaded.\r\n  **/\r\nexport function preload(value: boolean) { return new Attr(\"preload\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Indicates whether the element can be edited.\r\n  **/\r\nexport function readOnly(value: boolean) { return new Attr(\"readonly\", value, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * The radiogroup attribute\r\n  **/\r\nexport function radioGroup(value: string) { return new Attr(\"radiogroup\", value, \"command\"); }\r\n\r\n/**\r\n * Specifies which referrer is sent when fetching the resource.\r\n  **/\r\nexport function referrerPolicy(value: string) { return new Attr(\"referrerpolicy\", value, \"a\", \"area\", \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Specifies the relationship of the target object to the link object.\r\n  **/\r\nexport function rel(value: string) { return new Attr(\"rel\", value, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Indicates whether this element is required to fill out or not.\r\n  **/\r\nexport function required(value: boolean) { return new Attr(\"required\", value, \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates whether the list should be displayed in a descending order instead of a ascending.\r\n  **/\r\nexport function reversed(value: boolean) { return new Attr(\"reversed\", value, \"ol\"); }\r\n\r\n/**\r\n * Defines the number of rows in a text area.\r\n  **/\r\nexport function role(value: string) { return new Attr(\"role\", value); }\r\n\r\n/**\r\n * The rows attribute\r\n  **/\r\nexport function rows(value: number) { return new Attr(\"rows\", value, \"textarea\"); }\r\n\r\n/**\r\n * Defines the number of rows a table cell should span over.\r\n  **/\r\nexport function rowSpan(value: number) { return new Attr(\"rowspan\", value, \"td\", \"th\"); }\r\n\r\n/**\r\n * Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\r\n  **/\r\nexport function sandbox(value: string) { return new Attr(\"sandbox\", value, \"iframe\"); }\r\n\r\n/**\r\n * Defines the cells that the header test (defined in the th element) relates to.\r\n  **/\r\nexport function scope(value: string) { return new Attr(\"scope\", value, \"th\"); }\r\n\r\n/**\r\n * The scoped attribute\r\n  **/\r\nexport function scoped(value: boolean) { return new Attr(\"scoped\", value, \"style\"); }\r\n\r\n/**\r\n * Defines a value which will be selected on page load.\r\n  **/\r\nexport function selected(value: boolean) { return new Attr(\"selected\", value, \"option\"); }\r\n\r\n/**\r\n * The shape attribute\r\n  **/\r\nexport function shape(value: string) { return new Attr(\"shape\", value, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\r\n  **/\r\nexport function size(value: number) { return new Attr(\"size\", value, \"input\", \"select\"); }\r\n\r\n/**\r\n * Assigns a slot in a shadow DOM shadow tree to an element.\r\n  **/\r\nexport function slot(value: string) { return new Attr(\"slot\", value); }\r\n\r\n/**\r\n * The sizes attribute\r\n  **/\r\nexport function sizes(value: string) { return new Attr(\"sizes\", value, \"link\", \"img\", \"source\"); }\r\n\r\n/**\r\n * The span attribute\r\n  **/\r\nexport function span(value: string) { return new Attr(\"span\", value, \"col\", \"colgroup\"); }\r\n\r\n/**\r\n * Indicates whether spell checking is allowed for the element.\r\n  **/\r\nexport function spellCheck(value: boolean) { return new Attr(\"spellcheck\", value); }\r\n\r\n/**\r\n * The URL of the embeddable content.\r\n  **/\r\nexport function src(value: string) { return new Attr(\"src\", value, \"audio\", \"embed\", \"iframe\", \"img\", \"input\", \"script\", \"source\", \"track\", \"video\"); }\r\n\r\n/**\r\n * The srcdoc attribute\r\n  **/\r\nexport function srcDoc(value: string) { return new Attr(\"srcdoc\", value, \"iframe\"); }\r\n\r\n/**\r\n * The srclang attribute\r\n  **/\r\nexport function srcLang(value: string) { return new Attr(\"srclang\", value, \"track\"); }\r\n\r\n/**\r\n * A MediaStream object to use as a source for an HTML video or audio element\r\n  **/\r\nexport function srcObject(value: MediaProvider) { return new Attr(\"srcObject\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * One or more responsive image candidates.\r\n  **/\r\nexport function srcSet(value: string) { return new Attr(\"srcset\", value, \"img\", \"source\"); }\r\n\r\n/**\r\n * Defines the first number if other than 1.\r\n  **/\r\nexport function start(value: number) { return new Attr(\"start\", value, \"ol\"); }\r\n\r\n/**\r\n * Defines CSS styles which will override styles previously set.\r\n *\r\n * NOTE: DO NOT USE THIS. You should use `styles()` instead.\r\n **/\r\nexport function __deprecated__style__deprecated__(value: any) {\r\n    for (let k in value) {\r\n        if (!value[k] && !isBoolean(value[k])) {\r\n            delete value[k];\r\n        }\r\n    }\r\n    return new Attr(\"style\", value);\r\n}\r\n\r\n/**\r\n * The step attribute\r\n  **/\r\nexport function step(value: number) { return new Attr(\"step\", value, \"input\"); }\r\n\r\n/**\r\n * The summary attribute\r\n  **/\r\nexport function summary(value: string) { return new Attr(\"summary\", value, \"table\"); }\r\n\r\n/**\r\n * Overrides the browser's default tab order and follows the one specified instead.\r\n  **/\r\nexport function tabIndex(value: number) { return new Attr(\"tabindex\", value); }\r\n\r\n/**\r\n * Text to be displayed in a tooltip when hovering over the element.\r\n  **/\r\nexport function title(value: string) { return new Attr(\"title\", value); }\r\n\r\n/**\r\n * The target attribute\r\n  **/\r\nexport function target(value: string) { return new Attr(\"target\", value, \"a\", \"area\", \"base\", \"form\"); }\r\n\r\n/**\r\n * Specify whether an elementâs attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.\r\n  **/\r\nexport function translate(value: boolean) { return new Attr(\"translate\", value); }\r\n\r\n/**\r\n * Defines the type of the element.\r\n  **/\r\nexport function type(value: string) { return new Attr(\"type\", value, \"button\", \"input\", \"command\", \"embed\", \"object\", \"script\", \"source\", \"style\", \"menu\"); }\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function value(value: string) { return new Attr(\"value\", value, \"button\", \"data\", \"input\", \"li\", \"meter\", \"option\", \"progress\", \"param\"); }\r\n\r\n/**\r\n * setting the volume at which a media element plays.\r\n  **/\r\nexport function volume(value: number) { return new Attr(\"volume\", value, \"audio\", \"video\"); }\r\n\r\n/**\r\n * The usemap attribute\r\n  **/\r\nexport function useMap(value: boolean) { return new Attr(\"usemap\", value, \"img\", \"input\", \"object\"); }\r\n\r\n/**\r\n * For the elements listed here, this establishes the element's width.\r\n  **/\r\nexport function width(value: number|string) { return new Attr(\"width\", value, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Indicates whether the text should be wrapped.\r\n  **/\r\nexport function wrap(value: boolean) { return new Attr(\"wrap\", value, \"textarea\"); }\r\n\r\nexport class CssPropSet implements IAppliable {\r\n    set: Map<string, string>;\r\n\r\n    constructor(...rest: (Attr|CssPropSet)[]) {\r\n        this.set = new Map<string, string>();\r\n        const set = (key: string, value: string) => {\r\n            if (value || isBoolean(value)) {\r\n                this.set.set(key, value);\r\n            }\r\n            else if (this.set.has(key)) {\r\n                this.set.delete(key);\r\n            }\r\n        };\r\n        for (const prop of rest) {\r\n            if (prop instanceof Attr) {\r\n                const { key, value } = prop;\r\n                set(key, value);\r\n            }\r\n            else {\r\n                for (const [key, value] of prop.set.entries()) {\r\n                    set(key, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    apply(elem: HTMLElement | CSSStyleDeclaration) {\r\n        const style = isHTMLElement(elem)\r\n            ? elem.style\r\n            : elem;\r\n\r\n        for (const prop of this.set.entries()) {\r\n            const [key, value] = prop;\r\n            (style as any)[key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Combine style properties.\r\n **/\r\nexport function styles(...rest: (Attr|CssPropSet)[]) {\r\n    return new CssPropSet(...rest);\r\n}\r\n\r\nexport function alignContent(v: string) { return new Attr(\"alignContent\", v); }\r\nexport function alignItems(v: string) { return new Attr(\"alignItems\", v); }\r\nexport function alignSelf(v: string) { return new Attr(\"alignSelf\", v); }\r\nexport function alignmentBaseline(v: string) { return new Attr(\"alignmentBaseline\", v); }\r\nexport function all(v: string) { return new Attr(\"all\", v); }\r\nexport function animation(v: string) { return new Attr(\"animation\", v); }\r\nexport function animationDelay(v: string) { return new Attr(\"animationDelay\", v); }\r\nexport function animationDirection(v: string) { return new Attr(\"animationDirection\", v); }\r\nexport function animationDuration(v: string) { return new Attr(\"animationDuration\", v); }\r\nexport function animationFillMode(v: string) { return new Attr(\"animationFillMode\", v); }\r\nexport function animationIterationCount(v: string) { return new Attr(\"animationIterationCount\", v); }\r\nexport function animationName(v: string) { return new Attr(\"animationName\", v); }\r\nexport function animationPlayState(v: string) { return new Attr(\"animationPlayState\", v); }\r\nexport function animationTimingFunction(v: string) { return new Attr(\"animationTimingFunction\", v); }\r\nexport function appearance(v: string) { return new Attr(\"appearance\", v); }\r\nexport function backdropFilter(v: string) { return new Attr(\"backdropFilter\", v); }\r\nexport function backfaceVisibility(v: string) { return new Attr(\"backfaceVisibility\", v); }\r\nexport function background(v: string) { return new Attr(\"background\", v); }\r\nexport function backgroundAttachment(v: string) { return new Attr(\"backgroundAttachment\", v); }\r\nexport function backgroundBlendMode(v: string) { return new Attr(\"backgroundBlendMode\", v); }\r\nexport function backgroundClip(v: string) { return new Attr(\"backgroundClip\", v); }\r\nexport function backgroundColor(v: string) { return new Attr(\"backgroundColor\", v); }\r\nexport function backgroundImage(v: string) { return new Attr(\"backgroundImage\", v); }\r\nexport function backgroundOrigin(v: string) { return new Attr(\"backgroundOrigin\", v); }\r\nexport function backgroundPosition(v: string) { return new Attr(\"backgroundPosition\", v); }\r\nexport function backgroundPositionX(v: string) { return new Attr(\"backgroundPositionX\", v); }\r\nexport function backgroundPositionY(v: string) { return new Attr(\"backgroundPositionY\", v); }\r\nexport function backgroundRepeat(v: string) { return new Attr(\"backgroundRepeat\", v); }\r\nexport function backgroundRepeatX(v: string) { return new Attr(\"backgroundRepeatX\", v); }\r\nexport function backgroundRepeatY(v: string) { return new Attr(\"backgroundRepeatY\", v); }\r\nexport function backgroundSize(v: string) { return new Attr(\"backgroundSize\", v); }\r\nexport function baselineShift(v: string) { return new Attr(\"baselineShift\", v); }\r\nexport function blockSize(v: string) { return new Attr(\"blockSize\", v); }\r\nexport function border(v: string) { return new Attr(\"border\", v); }\r\nexport function borderBlockEnd(v: string) { return new Attr(\"borderBlockEnd\", v); }\r\nexport function borderBlockEndColor(v: string) { return new Attr(\"borderBlockEndColor\", v); }\r\nexport function borderBlockEndStyle(v: string) { return new Attr(\"borderBlockEndStyle\", v); }\r\nexport function borderBlockEndWidth(v: string) { return new Attr(\"borderBlockEndWidth\", v); }\r\nexport function borderBlockStart(v: string) { return new Attr(\"borderBlockStart\", v); }\r\nexport function borderBlockStartColor(v: string) { return new Attr(\"borderBlockStartColor\", v); }\r\nexport function borderBlockStartStyle(v: string) { return new Attr(\"borderBlockStartStyle\", v); }\r\nexport function borderBlockStartWidth(v: string) { return new Attr(\"borderBlockStartWidth\", v); }\r\nexport function borderBottom(v: string) { return new Attr(\"borderBottom\", v); }\r\nexport function borderBottomColor(v: string) { return new Attr(\"borderBottomColor\", v); }\r\nexport function borderBottomLeftRadius(v: string) { return new Attr(\"borderBottomLeftRadius\", v); }\r\nexport function borderBottomRightRadius(v: string) { return new Attr(\"borderBottomRightRadius\", v); }\r\nexport function borderBottomStyle(v: string) { return new Attr(\"borderBottomStyle\", v); }\r\nexport function borderBottomWidth(v: string) { return new Attr(\"borderBottomWidth\", v); }\r\nexport function borderCollapse(v: string) { return new Attr(\"borderCollapse\", v); }\r\nexport function borderColor(v: string) { return new Attr(\"borderColor\", v); }\r\nexport function borderImage(v: string) { return new Attr(\"borderImage\", v); }\r\nexport function borderImageOutset(v: string) { return new Attr(\"borderImageOutset\", v); }\r\nexport function borderImageRepeat(v: string) { return new Attr(\"borderImageRepeat\", v); }\r\nexport function borderImageSlice(v: string) { return new Attr(\"borderImageSlice\", v); }\r\nexport function borderImageSource(v: string) { return new Attr(\"borderImageSource\", v); }\r\nexport function borderImageWidth(v: string) { return new Attr(\"borderImageWidth\", v); }\r\nexport function borderInlineEnd(v: string) { return new Attr(\"borderInlineEnd\", v); }\r\nexport function borderInlineEndColor(v: string) { return new Attr(\"borderInlineEndColor\", v); }\r\nexport function borderInlineEndStyle(v: string) { return new Attr(\"borderInlineEndStyle\", v); }\r\nexport function borderInlineEndWidth(v: string) { return new Attr(\"borderInlineEndWidth\", v); }\r\nexport function borderInlineStart(v: string) { return new Attr(\"borderInlineStart\", v); }\r\nexport function borderInlineStartColor(v: string) { return new Attr(\"borderInlineStartColor\", v); }\r\nexport function borderInlineStartStyle(v: string) { return new Attr(\"borderInlineStartStyle\", v); }\r\nexport function borderInlineStartWidth(v: string) { return new Attr(\"borderInlineStartWidth\", v); }\r\nexport function borderLeft(v: string) { return new Attr(\"borderLeft\", v); }\r\nexport function borderLeftColor(v: string) { return new Attr(\"borderLeftColor\", v); }\r\nexport function borderLeftStyle(v: string) { return new Attr(\"borderLeftStyle\", v); }\r\nexport function borderLeftWidth(v: string) { return new Attr(\"borderLeftWidth\", v); }\r\nexport function borderRadius(v: string) { return new Attr(\"borderRadius\", v); }\r\nexport function borderRight(v: string) { return new Attr(\"borderRight\", v); }\r\nexport function borderRightColor(v: string) { return new Attr(\"borderRightColor\", v); }\r\nexport function borderRightStyle(v: string) { return new Attr(\"borderRightStyle\", v); }\r\nexport function borderRightWidth(v: string) { return new Attr(\"borderRightWidth\", v); }\r\nexport function borderSpacing(v: string) { return new Attr(\"borderSpacing\", v); }\r\nexport function borderStyle(v: string) { return new Attr(\"borderStyle\", v); }\r\nexport function borderTop(v: string) { return new Attr(\"borderTop\", v); }\r\nexport function borderTopColor(v: string) { return new Attr(\"borderTopColor\", v); }\r\nexport function borderTopLeftRadius(v: string) { return new Attr(\"borderTopLeftRadius\", v); }\r\nexport function borderTopRightRadius(v: string) { return new Attr(\"borderTopRightRadius\", v); }\r\nexport function borderTopStyle(v: string) { return new Attr(\"borderTopStyle\", v); }\r\nexport function borderTopWidth(v: string) { return new Attr(\"borderTopWidth\", v); }\r\nexport function borderWidth(v: string) { return new Attr(\"borderWidth\", v); }\r\nexport function bottom(v: string) { return new Attr(\"bottom\", v); }\r\nexport function boxShadow(v: string) { return new Attr(\"boxShadow\", v); }\r\nexport function boxSizing(v: string) { return new Attr(\"boxSizing\", v); }\r\nexport function breakAfter(v: string) { return new Attr(\"breakAfter\", v); }\r\nexport function breakBefore(v: string) { return new Attr(\"breakBefore\", v); }\r\nexport function breakInside(v: string) { return new Attr(\"breakInside\", v); }\r\nexport function bufferedRendering(v: string) { return new Attr(\"bufferedRendering\", v); }\r\nexport function captionSide(v: string) { return new Attr(\"captionSide\", v); }\r\nexport function caretColor(v: string) { return new Attr(\"caretColor\", v); }\r\nexport function clear(v: string) { return new Attr(\"clear\", v); }\r\nexport function clip(v: string) { return new Attr(\"clip\", v); }\r\nexport function clipPath(v: string) { return new Attr(\"clipPath\", v); }\r\nexport function clipRule(v: string) { return new Attr(\"clipRule\", v); }\r\nexport function color(v: string) { return new Attr(\"color\", v); }\r\nexport function colorInterpolation(v: string) { return new Attr(\"colorInterpolation\", v); }\r\nexport function colorInterpolationFilters(v: string) { return new Attr(\"colorInterpolationFilters\", v); }\r\nexport function colorRendering(v: string) { return new Attr(\"colorRendering\", v); }\r\nexport function colorScheme(v: string) { return new Attr(\"colorScheme\", v); }\r\nexport function columnCount(v: string) { return new Attr(\"columnCount\", v); }\r\nexport function columnFill(v: string) { return new Attr(\"columnFill\", v); }\r\nexport function columnGap(v: string) { return new Attr(\"columnGap\", v); }\r\nexport function columnRule(v: string) { return new Attr(\"columnRule\", v); }\r\nexport function columnRuleColor(v: string) { return new Attr(\"columnRuleColor\", v); }\r\nexport function columnRuleStyle(v: string) { return new Attr(\"columnRuleStyle\", v); }\r\nexport function columnRuleWidth(v: string) { return new Attr(\"columnRuleWidth\", v); }\r\nexport function columnSpan(v: string) { return new Attr(\"columnSpan\", v); }\r\nexport function columnWidth(v: string) { return new Attr(\"columnWidth\", v); }\r\nexport function columns(v: string) { return new Attr(\"columns\", v); }\r\nexport function contain(v: string) { return new Attr(\"contain\", v); }\r\nexport function containIntrinsicSize(v: string) { return new Attr(\"containIntrinsicSize\", v); }\r\nexport function counterIncrement(v: string) { return new Attr(\"counterIncrement\", v); }\r\nexport function counterReset(v: string) { return new Attr(\"counterReset\", v); }\r\nexport function cursor(v: string) { return new Attr(\"cursor\", v); }\r\nexport function cx(v: string) { return new Attr(\"cx\", v); }\r\nexport function cy(v: string) { return new Attr(\"cy\", v); }\r\nexport function d(v: string) { return new Attr(\"d\", v); }\r\nexport function direction(v: string) { return new Attr(\"direction\", v); }\r\nexport function display(v: string) { return new Attr(\"display\", v); }\r\nexport function dominantBaseline(v: string) { return new Attr(\"dominantBaseline\", v); }\r\nexport function emptyCells(v: string) { return new Attr(\"emptyCells\", v); }\r\nexport function fill(v: string) { return new Attr(\"fill\", v); }\r\nexport function fillOpacity(v: string) { return new Attr(\"fillOpacity\", v); }\r\nexport function fillRule(v: string) { return new Attr(\"fillRule\", v); }\r\nexport function filter(v: string) { return new Attr(\"filter\", v); }\r\nexport function flex(v: string) { return new Attr(\"flex\", v); }\r\nexport function flexBasis(v: string) { return new Attr(\"flexBasis\", v); }\r\nexport function flexDirection(v: string) { return new Attr(\"flexDirection\", v); }\r\nexport function flexFlow(v: string) { return new Attr(\"flexFlow\", v); }\r\nexport function flexGrow(v: string) { return new Attr(\"flexGrow\", v); }\r\nexport function flexShrink(v: string) { return new Attr(\"flexShrink\", v); }\r\nexport function flexWrap(v: string) { return new Attr(\"flexWrap\", v); }\r\nexport function float(v: string) { return new Attr(\"float\", v); }\r\nexport function floodColor(v: string) { return new Attr(\"floodColor\", v); }\r\nexport function floodOpacity(v: string) { return new Attr(\"floodOpacity\", v); }\r\nexport function font(v: string) { return new Attr(\"font\", v); }\r\nexport function fontDisplay(v: string) { return new Attr(\"fontDisplay\", v); }\r\nexport function fontFamily(v: string) { return new Attr(\"fontFamily\", v); }\r\nexport function fontFeatureSettings(v: string) { return new Attr(\"fontFeatureSettings\", v); }\r\nexport function fontKerning(v: string) { return new Attr(\"fontKerning\", v); }\r\nexport function fontOpticalSizing(v: string) { return new Attr(\"fontOpticalSizing\", v); }\r\nexport function fontSize(v: string) { return new Attr(\"fontSize\", v); }\r\nexport function fontStretch(v: string) { return new Attr(\"fontStretch\", v); }\r\nexport function fontStyle(v: string) { return new Attr(\"fontStyle\", v); }\r\nexport function fontVariant(v: string) { return new Attr(\"fontVariant\", v); }\r\nexport function fontVariantCaps(v: string) { return new Attr(\"fontVariantCaps\", v); }\r\nexport function fontVariantEastAsian(v: string) { return new Attr(\"fontVariantEastAsian\", v); }\r\nexport function fontVariantLigatures(v: string) { return new Attr(\"fontVariantLigatures\", v); }\r\nexport function fontVariantNumeric(v: string) { return new Attr(\"fontVariantNumeric\", v); }\r\nexport function fontVariationSettings(v: string) { return new Attr(\"fontVariationSettings\", v); }\r\nexport function fontWeight(v: string) { return new Attr(\"fontWeight\", v); }\r\nexport function forcedColorAdjust(v: string) { return new Attr(\"forcedColorAdjust\", v); }\r\nexport function gap(v: string) { return new Attr(\"gap\", v); }\r\nexport function grid(v: string) { return new Attr(\"grid\", v); }\r\nexport function gridArea(v: string) { return new Attr(\"gridArea\", v); }\r\nexport function gridAutoColumns(v: string) { return new Attr(\"gridAutoColumns\", v); }\r\nexport function gridAutoFlow(v: string) { return new Attr(\"gridAutoFlow\", v); }\r\nexport function gridAutoRows(v: string) { return new Attr(\"gridAutoRows\", v); }\r\nexport function gridColumn(v: string) { return new Attr(\"gridColumn\", v); }\r\nexport function gridColumnEnd(v: string) { return new Attr(\"gridColumnEnd\", v); }\r\nexport function gridColumnGap(v: string) { return new Attr(\"gridColumnGap\", v); }\r\nexport function gridColumnStart(v: string) { return new Attr(\"gridColumnStart\", v); }\r\nexport function gridGap(v: string) { return new Attr(\"gridGap\", v); }\r\nexport function gridRow(v: string) { return new Attr(\"gridRow\", v); }\r\nexport function gridRowEnd(v: string) { return new Attr(\"gridRowEnd\", v); }\r\nexport function gridRowGap(v: string) { return new Attr(\"gridRowGap\", v); }\r\nexport function gridRowStart(v: string) { return new Attr(\"gridRowStart\", v); }\r\nexport function gridTemplate(v: string) { return new Attr(\"gridTemplate\", v); }\r\nexport function gridTemplateAreas(v: string) { return new Attr(\"gridTemplateAreas\", v); }\r\nexport function gridTemplateColumns(v: string) { return new Attr(\"gridTemplateColumns\", v); }\r\nexport function gridTemplateRows(v: string) { return new Attr(\"gridTemplateRows\", v); }\r\nexport function hyphens(v: string) { return new Attr(\"hyphens\", v); }\r\nexport function imageOrientation(v: string) { return new Attr(\"imageOrientation\", v); }\r\nexport function imageRendering(v: string) { return new Attr(\"imageRendering\", v); }\r\nexport function inlineSize(v: string) { return new Attr(\"inlineSize\", v); }\r\nexport function isolation(v: string) { return new Attr(\"isolation\", v); }\r\nexport function justifyContent(v: string) { return new Attr(\"justifyContent\", v); }\r\nexport function justifyItems(v: string) { return new Attr(\"justifyItems\", v); }\r\nexport function justifySelf(v: string) { return new Attr(\"justifySelf\", v); }\r\nexport function left(v: string) { return new Attr(\"left\", v); }\r\nexport function letterSpacing(v: string) { return new Attr(\"letterSpacing\", v); }\r\nexport function lightingColor(v: string) { return new Attr(\"lightingColor\", v); }\r\nexport function lineBreak(v: string) { return new Attr(\"lineBreak\", v); }\r\nexport function lineHeight(v: string) { return new Attr(\"lineHeight\", v); }\r\nexport function listStyle(v: string) { return new Attr(\"listStyle\", v); }\r\nexport function listStyleImage(v: string) { return new Attr(\"listStyleImage\", v); }\r\nexport function listStylePosition(v: string) { return new Attr(\"listStylePosition\", v); }\r\nexport function listStyleType(v: string) { return new Attr(\"listStyleType\", v); }\r\nexport function margin(v: string) { return new Attr(\"margin\", v); }\r\nexport function marginBlockEnd(v: string) { return new Attr(\"marginBlockEnd\", v); }\r\nexport function marginBlockStart(v: string) { return new Attr(\"marginBlockStart\", v); }\r\nexport function marginBottom(v: string) { return new Attr(\"marginBottom\", v); }\r\nexport function marginInlineEnd(v: string) { return new Attr(\"marginInlineEnd\", v); }\r\nexport function marginInlineStart(v: string) { return new Attr(\"marginInlineStart\", v); }\r\nexport function marginLeft(v: string) { return new Attr(\"marginLeft\", v); }\r\nexport function marginRight(v: string) { return new Attr(\"marginRight\", v); }\r\nexport function marginTop(v: string) { return new Attr(\"marginTop\", v); }\r\nexport function marker(v: string) { return new Attr(\"marker\", v); }\r\nexport function markerEnd(v: string) { return new Attr(\"markerEnd\", v); }\r\nexport function markerMid(v: string) { return new Attr(\"markerMid\", v); }\r\nexport function markerStart(v: string) { return new Attr(\"markerStart\", v); }\r\nexport function mask(v: string) { return new Attr(\"mask\", v); }\r\nexport function maskType(v: string) { return new Attr(\"maskType\", v); }\r\nexport function maxBlockSize(v: string) { return new Attr(\"maxBlockSize\", v); }\r\nexport function maxHeight(v: string) { return new Attr(\"maxHeight\", v); }\r\nexport function maxInlineSize(v: string) { return new Attr(\"maxInlineSize\", v); }\r\nexport function maxWidth(v: string) { return new Attr(\"maxWidth\", v); }\r\nexport function maxZoom(v: string) { return new Attr(\"maxZoom\", v); }\r\nexport function minBlockSize(v: string) { return new Attr(\"minBlockSize\", v); }\r\nexport function minHeight(v: string) { return new Attr(\"minHeight\", v); }\r\nexport function minInlineSize(v: string) { return new Attr(\"minInlineSize\", v); }\r\nexport function minWidth(v: string) { return new Attr(\"minWidth\", v); }\r\nexport function minZoom(v: string) { return new Attr(\"minZoom\", v); }\r\nexport function mixBlendMode(v: string) { return new Attr(\"mixBlendMode\", v); }\r\nexport function objectFit(v: string) { return new Attr(\"objectFit\", v); }\r\nexport function objectPosition(v: string) { return new Attr(\"objectPosition\", v); }\r\nexport function offset(v: string) { return new Attr(\"offset\", v); }\r\nexport function offsetDistance(v: string) { return new Attr(\"offsetDistance\", v); }\r\nexport function offsetPath(v: string) { return new Attr(\"offsetPath\", v); }\r\nexport function offsetRotate(v: string) { return new Attr(\"offsetRotate\", v); }\r\nexport function opacity(v: string) { return new Attr(\"opacity\", v); }\r\nexport function order(v: string) { return new Attr(\"order\", v); }\r\nexport function orientation(v: string) { return new Attr(\"orientation\", v); }\r\nexport function orphans(v: string) { return new Attr(\"orphans\", v); }\r\nexport function outline(v: string) { return new Attr(\"outline\", v); }\r\nexport function outlineColor(v: string) { return new Attr(\"outlineColor\", v); }\r\nexport function outlineOffset(v: string) { return new Attr(\"outlineOffset\", v); }\r\nexport function outlineStyle(v: string) { return new Attr(\"outlineStyle\", v); }\r\nexport function outlineWidth(v: string) { return new Attr(\"outlineWidth\", v); }\r\nexport function overflow(v: string) { return new Attr(\"overflow\", v); }\r\nexport function overflowAnchor(v: string) { return new Attr(\"overflowAnchor\", v); }\r\nexport function overflowWrap(v: string) { return new Attr(\"overflowWrap\", v); }\r\nexport function overflowX(v: string) { return new Attr(\"overflowX\", v); }\r\nexport function overflowY(v: string) { return new Attr(\"overflowY\", v); }\r\nexport function overscrollBehavior(v: string) { return new Attr(\"overscrollBehavior\", v); }\r\nexport function overscrollBehaviorBlock(v: string) { return new Attr(\"overscrollBehaviorBlock\", v); }\r\nexport function overscrollBehaviorInline(v: string) { return new Attr(\"overscrollBehaviorInline\", v); }\r\nexport function overscrollBehaviorX(v: string) { return new Attr(\"overscrollBehaviorX\", v); }\r\nexport function overscrollBehaviorY(v: string) { return new Attr(\"overscrollBehaviorY\", v); }\r\nexport function padding(v: string) { return new Attr(\"padding\", v); }\r\nexport function paddingBlockEnd(v: string) { return new Attr(\"paddingBlockEnd\", v); }\r\nexport function paddingBlockStart(v: string) { return new Attr(\"paddingBlockStart\", v); }\r\nexport function paddingBottom(v: string) { return new Attr(\"paddingBottom\", v); }\r\nexport function paddingInlineEnd(v: string) { return new Attr(\"paddingInlineEnd\", v); }\r\nexport function paddingInlineStart(v: string) { return new Attr(\"paddingInlineStart\", v); }\r\nexport function paddingLeft(v: string) { return new Attr(\"paddingLeft\", v); }\r\nexport function paddingRight(v: string) { return new Attr(\"paddingRight\", v); }\r\nexport function paddingTop(v: string) { return new Attr(\"paddingTop\", v); }\r\nexport function pageBreakAfter(v: string) { return new Attr(\"pageBreakAfter\", v); }\r\nexport function pageBreakBefore(v: string) { return new Attr(\"pageBreakBefore\", v); }\r\nexport function pageBreakInside(v: string) { return new Attr(\"pageBreakInside\", v); }\r\nexport function paintOrder(v: string) { return new Attr(\"paintOrder\", v); }\r\nexport function perspective(v: string) { return new Attr(\"perspective\", v); }\r\nexport function perspectiveOrigin(v: string) { return new Attr(\"perspectiveOrigin\", v); }\r\nexport function placeContent(v: string) { return new Attr(\"placeContent\", v); }\r\nexport function placeItems(v: string) { return new Attr(\"placeItems\", v); }\r\nexport function placeSelf(v: string) { return new Attr(\"placeSelf\", v); }\r\nexport function pointerEvents(v: string) { return new Attr(\"pointerEvents\", v); }\r\nexport function position(v: string) { return new Attr(\"position\", v); }\r\nexport function quotes(v: string) { return new Attr(\"quotes\", v); }\r\nexport function r(v: string) { return new Attr(\"r\", v); }\r\nexport function resize(v: string) { return new Attr(\"resize\", v); }\r\nexport function right(v: string) { return new Attr(\"right\", v); }\r\nexport function rowGap(v: string) { return new Attr(\"rowGap\", v); }\r\nexport function rubyPosition(v: string) { return new Attr(\"rubyPosition\", v); }\r\nexport function rx(v: string) { return new Attr(\"rx\", v); }\r\nexport function ry(v: string) { return new Attr(\"ry\", v); }\r\nexport function scrollBehavior(v: string) { return new Attr(\"scrollBehavior\", v); }\r\nexport function scrollMargin(v: string) { return new Attr(\"scrollMargin\", v); }\r\nexport function scrollMarginBlock(v: string) { return new Attr(\"scrollMarginBlock\", v); }\r\nexport function scrollMarginBlockEnd(v: string) { return new Attr(\"scrollMarginBlockEnd\", v); }\r\nexport function scrollMarginBlockStart(v: string) { return new Attr(\"scrollMarginBlockStart\", v); }\r\nexport function scrollMarginBottom(v: string) { return new Attr(\"scrollMarginBottom\", v); }\r\nexport function scrollMarginInline(v: string) { return new Attr(\"scrollMarginInline\", v); }\r\nexport function scrollMarginInlineEnd(v: string) { return new Attr(\"scrollMarginInlineEnd\", v); }\r\nexport function scrollMarginInlineStart(v: string) { return new Attr(\"scrollMarginInlineStart\", v); }\r\nexport function scrollMarginLeft(v: string) { return new Attr(\"scrollMarginLeft\", v); }\r\nexport function scrollMarginRight(v: string) { return new Attr(\"scrollMarginRight\", v); }\r\nexport function scrollMarginTop(v: string) { return new Attr(\"scrollMarginTop\", v); }\r\nexport function scrollPadding(v: string) { return new Attr(\"scrollPadding\", v); }\r\nexport function scrollPaddingBlock(v: string) { return new Attr(\"scrollPaddingBlock\", v); }\r\nexport function scrollPaddingBlockEnd(v: string) { return new Attr(\"scrollPaddingBlockEnd\", v); }\r\nexport function scrollPaddingBlockStart(v: string) { return new Attr(\"scrollPaddingBlockStart\", v); }\r\nexport function scrollPaddingBottom(v: string) { return new Attr(\"scrollPaddingBottom\", v); }\r\nexport function scrollPaddingInline(v: string) { return new Attr(\"scrollPaddingInline\", v); }\r\nexport function scrollPaddingInlineEnd(v: string) { return new Attr(\"scrollPaddingInlineEnd\", v); }\r\nexport function scrollPaddingInlineStart(v: string) { return new Attr(\"scrollPaddingInlineStart\", v); }\r\nexport function scrollPaddingLeft(v: string) { return new Attr(\"scrollPaddingLeft\", v); }\r\nexport function scrollPaddingRight(v: string) { return new Attr(\"scrollPaddingRight\", v); }\r\nexport function scrollPaddingTop(v: string) { return new Attr(\"scrollPaddingTop\", v); }\r\nexport function scrollSnapAlign(v: string) { return new Attr(\"scrollSnapAlign\", v); }\r\nexport function scrollSnapStop(v: string) { return new Attr(\"scrollSnapStop\", v); }\r\nexport function scrollSnapType(v: string) { return new Attr(\"scrollSnapType\", v); }\r\nexport function shapeImageThreshold(v: string) { return new Attr(\"shapeImageThreshold\", v); }\r\nexport function shapeMargin(v: string) { return new Attr(\"shapeMargin\", v); }\r\nexport function shapeOutside(v: string) { return new Attr(\"shapeOutside\", v); }\r\nexport function shapeRendering(v: string) { return new Attr(\"shapeRendering\", v); }\r\nexport function speak(v: string) { return new Attr(\"speak\", v); }\r\nexport function stopColor(v: string) { return new Attr(\"stopColor\", v); }\r\nexport function stopOpacity(v: string) { return new Attr(\"stopOpacity\", v); }\r\nexport function stroke(v: string) { return new Attr(\"stroke\", v); }\r\nexport function strokeDasharray(v: string) { return new Attr(\"strokeDasharray\", v); }\r\nexport function strokeDashoffset(v: string) { return new Attr(\"strokeDashoffset\", v); }\r\nexport function strokeLinecap(v: string) { return new Attr(\"strokeLinecap\", v); }\r\nexport function strokeLinejoin(v: string) { return new Attr(\"strokeLinejoin\", v); }\r\nexport function strokeMiterlimit(v: string) { return new Attr(\"strokeMiterlimit\", v); }\r\nexport function strokeOpacity(v: string) { return new Attr(\"strokeOpacity\", v); }\r\nexport function strokeWidth(v: string) { return new Attr(\"strokeWidth\", v); }\r\nexport function tabSize(v: string) { return new Attr(\"tabSize\", v); }\r\nexport function tableLayout(v: string) { return new Attr(\"tableLayout\", v); }\r\nexport function textAlign(v: string) { return new Attr(\"textAlign\", v); }\r\nexport function textAlignLast(v: string) { return new Attr(\"textAlignLast\", v); }\r\nexport function textAnchor(v: string) { return new Attr(\"textAnchor\", v); }\r\nexport function textCombineUpright(v: string) { return new Attr(\"textCombineUpright\", v); }\r\nexport function textDecoration(v: string) { return new Attr(\"textDecoration\", v); }\r\nexport function textDecorationColor(v: string) { return new Attr(\"textDecorationColor\", v); }\r\nexport function textDecorationLine(v: string) { return new Attr(\"textDecorationLine\", v); }\r\nexport function textDecorationSkipInk(v: string) { return new Attr(\"textDecorationSkipInk\", v); }\r\nexport function textDecorationStyle(v: string) { return new Attr(\"textDecorationStyle\", v); }\r\nexport function textIndent(v: string) { return new Attr(\"textIndent\", v); }\r\nexport function textOrientation(v: string) { return new Attr(\"textOrientation\", v); }\r\nexport function textOverflow(v: string) { return new Attr(\"textOverflow\", v); }\r\nexport function textRendering(v: string) { return new Attr(\"textRendering\", v); }\r\nexport function textShadow(v: string) { return new Attr(\"textShadow\", v); }\r\nexport function textSizeAdjust(v: string) { return new Attr(\"textSizeAdjust\", v); }\r\nexport function textTransform(v: string) { return new Attr(\"textTransform\", v); }\r\nexport function textUnderlinePosition(v: string) { return new Attr(\"textUnderlinePosition\", v); }\r\nexport function top(v: string) { return new Attr(\"top\", v); }\r\nexport function touchAction(v: string) { return new Attr(\"touchAction\", v); }\r\nexport function transform(v: string) { return new Attr(\"transform\", v); }\r\nexport function transformBox(v: string) { return new Attr(\"transformBox\", v); }\r\nexport function transformOrigin(v: string) { return new Attr(\"transformOrigin\", v); }\r\nexport function transformStyle(v: string) { return new Attr(\"transformStyle\", v); }\r\nexport function transition(v: string) { return new Attr(\"transition\", v); }\r\nexport function transitionDelay(v: string) { return new Attr(\"transitionDelay\", v); }\r\nexport function transitionDuration(v: string) { return new Attr(\"transitionDuration\", v); }\r\nexport function transitionProperty(v: string) { return new Attr(\"transitionProperty\", v); }\r\nexport function transitionTimingFunction(v: string) { return new Attr(\"transitionTimingFunction\", v); }\r\nexport function unicodeBidi(v: string) { return new Attr(\"unicodeBidi\", v); }\r\nexport function unicodeRange(v: string) { return new Attr(\"unicodeRange\", v); }\r\nexport function userSelect(v: string) { return new Attr(\"userSelect\", v); }\r\nexport function userZoom(v: string) { return new Attr(\"userZoom\", v); }\r\nexport function vectorEffect(v: string) { return new Attr(\"vectorEffect\", v); }\r\nexport function verticalAlign(v: string) { return new Attr(\"verticalAlign\", v); }\r\nexport function visibility(v: string) { return new Attr(\"visibility\", v); }\r\nexport function whiteSpace(v: string) { return new Attr(\"whiteSpace\", v); }\r\nexport function widows(v: string) { return new Attr(\"widows\", v); }\r\nexport function willChange(v: string) { return new Attr(\"willChange\", v); }\r\nexport function wordBreak(v: string) { return new Attr(\"wordBreak\", v); }\r\nexport function wordSpacing(v: string) { return new Attr(\"wordSpacing\", v); }\r\nexport function wordWrap(v: string) { return new Attr(\"wordWrap\", v); }\r\nexport function writingMode(v: string) { return new Attr(\"writingMode\", v); }\r\nexport function x(v: string) { return new Attr(\"x\", v); }\r\nexport function y(v: string) { return new Attr(\"y\", v); }\r\nexport function zIndex(v: number) { return new Attr(\"zIndex\", v); }\r\nexport function zoom(v: number) { return new Attr(\"zoom\", v); }\r\n\r\n\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFonts() {\r\n    return \"'Droid Sans Mono', 'Consolas', 'Lucida Console', 'Courier New', 'Courier', monospace\";\r\n}\r\n\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFamily() {\r\n    return fontFamily(getMonospaceFonts());\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFonts() {\r\n    return \"-apple-system, '.SFNSText-Regular', 'San Francisco', 'Roboto', 'Segoe UI', 'Helvetica Neue', 'Lucida Grande', sans-serif\";\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFamily() {\r\n    return fontFamily(getSystemFonts());\r\n}","import { isBoolean, isDate, isFunction, isNullOrUndefined, isNumber, isString } from \"../typeChecks\";\r\nimport { Attr, IAppliable, type, margin, styles } from \"./attrs\";\r\n\r\nexport type HTMLValuedElement = HTMLElement & { value: string; };\r\n\r\ninterface HasNode {\r\n    element: HTMLElement;\r\n}\r\n\r\ntype makesIAppliable = (v: any) => IAppliable;\r\n\r\n\r\nexport type TagChild = Node\r\n    | HasNode\r\n    | IAppliable\r\n    | makesIAppliable\r\n    | string\r\n    | number\r\n    | boolean\r\n    | Date;\r\n\r\nfunction hasNode(obj: any): obj is HasNode {\r\n    return !isNullOrUndefined(obj)\r\n        && !isString(obj)\r\n        && !isNumber(obj)\r\n        && !isBoolean(obj)\r\n        && !isDate(obj)\r\n        && \"element\" in obj\r\n        && obj.element instanceof Node;\r\n}\r\n\r\nexport interface IFocusable {\r\n    focus(): void;\r\n}\r\n\r\nexport function isFocusable(elem: any): elem is IFocusable {\r\n    return \"focus\" in elem && isFunction((elem as IFocusable).focus);\r\n}\r\n\r\nexport function elementSetDisplay(elem: HTMLElement, visible: boolean, visibleDisplayType: string = \"block\"): void {\r\n    elem.style.display = visible ? visibleDisplayType : \"none\";\r\n}\r\n\r\nexport function elementIsDisplayed(elem: HTMLElement): boolean {\r\n    return elem.style.display !== \"none\";\r\n}\r\n\r\nexport function nodeList2Array<T extends Element>(list: NodeListOf<T>|HTMLCollectionOf<T>): Array<T> {\r\n    const arr = new Array<T>(list.length);\r\n    for (let i = 0; i < list.length; ++i) {\r\n        arr[i] = list[i];\r\n    }\r\n    return arr;\r\n}\r\n\r\n/**\r\n * Creates an HTML element for a given tag name.\r\n * \r\n * Boolean attributes that you want to default to true can be passed\r\n * as just the attribute creating function, \r\n *   e.g. `Audio(autoPlay)` vs `Audio(autoPlay(true))`\r\n * @param name - the name of the tag\r\n * @param rest - optional attributes, child elements, and text\r\n * @returns\r\n */\r\nexport function tag(name: string, ...rest: TagChild[]) {\r\n    let elem: HTMLElement | null = null;\r\n\r\n    for (const attr of rest) {\r\n        if (attr instanceof Attr\r\n            && attr.key === \"id\") {\r\n            elem = document.getElementById(attr.value);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (elem == null) {\r\n        elem = document.createElement(name);\r\n    }\r\n\r\n    for (let x of rest) {\r\n        if (x != null) {\r\n            if (isString(x)\r\n                || isNumber(x)\r\n                || isBoolean(x)\r\n                || x instanceof Date\r\n                || x instanceof Node\r\n                || hasNode(x)) {\r\n\r\n                if (hasNode(x)) {\r\n                    x = x.element;\r\n                }\r\n                else if (!(x instanceof Node)) {\r\n                    x = document.createTextNode(x.toLocaleString());\r\n                }\r\n\r\n                elem.appendChild(x);\r\n            }\r\n            else {\r\n                if (x instanceof Function) {\r\n                    x = x(true);\r\n                }\r\n\r\n                x.apply(elem);\r\n            }\r\n        }\r\n    }\r\n\r\n    return elem;\r\n}\r\n\r\nexport interface IDisableable {\r\n    disabled: boolean;\r\n}\r\n\r\nexport function isDisableable(element: any): element is IDisableable {\r\n    return \"disabled\" in element\r\n        && typeof element.disabled === \"boolean\";\r\n}\r\n\r\n/**\r\n * Empty an element of all children. This is faster than setting `innerHTML = \"\"`.\r\n */\r\nexport function elementClearChildren(elem: HTMLElement) {\r\n    while (elem.lastChild) {\r\n        elem.lastChild.remove();\r\n    }\r\n}\r\n\r\nexport function elementSetText(elem: HTMLElement, text: string) {\r\n    elementClearChildren(elem);\r\n    elem.appendChild(TextNode(text));\r\n}\r\n\r\n\r\nexport type HTMLAudioElementWithSinkID = HTMLAudioElement & {\r\n    sinkId: string;\r\n    setSinkId(id: string): Promise<void>;\r\n};\r\n\r\nexport function A(...rest: TagChild[]): HTMLAnchorElement { return tag(\"a\", ...rest) as HTMLAnchorElement; }\r\nexport function Abbr(...rest: TagChild[]): HTMLElement { return tag(\"abbr\", ...rest); }\r\nexport function Address(...rest: TagChild[]): HTMLElement { return tag(\"address\", ...rest); }\r\nexport function Area(...rest: TagChild[]): HTMLAreaElement { return tag(\"area\", ...rest) as HTMLAreaElement; }\r\nexport function Article(...rest: TagChild[]): HTMLElement { return tag(\"article\", ...rest); }\r\nexport function Aside(...rest: TagChild[]): HTMLElement { return tag(\"aside\", ...rest); }\r\nexport function Audio(...rest: TagChild[]): HTMLAudioElementWithSinkID { return tag(\"audio\", ...rest) as HTMLAudioElementWithSinkID; }\r\nexport function B(...rest: TagChild[]): HTMLElement { return tag(\"b\", ...rest); }\r\nexport function Base(...rest: TagChild[]): HTMLBaseElement { return tag(\"base\", ...rest) as HTMLBaseElement; }\r\nexport function BDI(...rest: TagChild[]): HTMLElement { return tag(\"bdi\", ...rest); }\r\nexport function BDO(...rest: TagChild[]): HTMLElement { return tag(\"bdo\", ...rest); }\r\nexport function BlockQuote(...rest: TagChild[]): HTMLQuoteElement { return tag(\"blockquote\", ...rest) as HTMLQuoteElement; }\r\nexport function Body(...rest: TagChild[]): HTMLBodyElement { return tag(\"body\", ...rest) as HTMLBodyElement; }\r\nexport function BR(): HTMLBRElement { return tag(\"br\") as HTMLBRElement; }\r\nexport function ButtonRaw(...rest: TagChild[]): HTMLButtonElement { return tag(\"button\", ...rest) as HTMLButtonElement; }\r\nexport function Button(...rest: TagChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"button\")); }\r\nexport function ButtonSubmit(...rest: TagChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"submit\")); }\r\nexport function ButtonReset(...rest: TagChild[]): HTMLButtonElement { return ButtonRaw(...rest, type(\"reset\")); }\r\nexport function Canvas(...rest: TagChild[]): HTMLCanvasElement { return tag(\"canvas\", ...rest) as HTMLCanvasElement; }\r\nexport function Caption(...rest: TagChild[]): HTMLTableCaptionElement { return tag(\"caption\", ...rest) as HTMLTableCaptionElement; }\r\nexport function Cite(...rest: TagChild[]): HTMLElement { return tag(\"cite\", ...rest); }\r\nexport function Code(...rest: TagChild[]): HTMLElement { return tag(\"code\", ...rest); }\r\nexport function Col(...rest: TagChild[]): HTMLTableColElement { return tag(\"col\", ...rest) as HTMLTableColElement; }\r\nexport function ColGroup(...rest: TagChild[]): HTMLTableColElement { return tag(\"colgroup\", ...rest) as HTMLTableColElement; }\r\nexport function Data(...rest: TagChild[]): HTMLDataElement { return tag(\"data\", ...rest) as HTMLDataElement; }\r\nexport function DataList(...rest: TagChild[]): HTMLDataListElement { return tag(\"datalist\", ...rest) as HTMLDataListElement; }\r\nexport function DD(...rest: TagChild[]): HTMLElement { return tag(\"dd\", ...rest); }\r\nexport function Del(...rest: TagChild[]): HTMLModElement { return tag(\"del\", ...rest) as HTMLModElement; }\r\nexport function Details(...rest: TagChild[]): HTMLDetailsElement { return tag(\"details\", ...rest) as HTMLDetailsElement; }\r\nexport function DFN(...rest: TagChild[]): HTMLElement { return tag(\"dfn\", ...rest); }\r\nexport function Dialog(...rest: TagChild[]): HTMLDialogElement { return tag(\"dialog\", ...rest) as HTMLDialogElement; }\r\nexport function Dir(...rest: TagChild[]): HTMLDirectoryElement { return tag(\"dir\", ...rest) as HTMLDirectoryElement; }\r\nexport function Div(...rest: TagChild[]): HTMLDivElement { return tag(\"div\", ...rest) as HTMLDivElement; }\r\nexport function DL(...rest: TagChild[]): HTMLDListElement { return tag(\"dl\", ...rest) as HTMLDListElement; }\r\nexport function DT(...rest: TagChild[]): HTMLElement { return tag(\"dt\", ...rest); }\r\nexport function Em(...rest: TagChild[]): HTMLElement { return tag(\"em\", ...rest); }\r\nexport function Embed(...rest: TagChild[]): HTMLEmbedElement { return tag(\"embed\", ...rest) as HTMLEmbedElement; }\r\nexport function FieldSet(...rest: TagChild[]): HTMLFieldSetElement { return tag(\"fieldset\", ...rest) as HTMLFieldSetElement; }\r\nexport function FigCaption(...rest: TagChild[]): HTMLElement { return tag(\"figcaption\", ...rest); }\r\nexport function Figure(...rest: TagChild[]): HTMLElement { return tag(\"figure\", ...rest); }\r\nexport function Footer(...rest: TagChild[]): HTMLElement { return tag(\"footer\", ...rest); }\r\nexport function Form(...rest: TagChild[]): HTMLFormElement { return tag(\"form\", ...rest) as HTMLFormElement; }\r\nexport function H1(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h1\", ...rest) as HTMLHeadingElement; }\r\nexport function H2(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h2\", ...rest) as HTMLHeadingElement; }\r\nexport function H3(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h3\", ...rest) as HTMLHeadingElement; }\r\nexport function H4(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h4\", ...rest) as HTMLHeadingElement; }\r\nexport function H5(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h5\", ...rest) as HTMLHeadingElement; }\r\nexport function H6(...rest: TagChild[]): HTMLHeadingElement { return tag(\"h6\", ...rest) as HTMLHeadingElement; }\r\nexport function HR(...rest: TagChild[]): HTMLHRElement { return tag(\"hr\", ...rest) as HTMLHRElement; }\r\nexport function Head(...rest: TagChild[]): HTMLHeadElement { return tag(\"head\", ...rest) as HTMLHeadElement; }\r\nexport function Header(...rest: TagChild[]): HTMLElement { return tag(\"header\", ...rest); }\r\nexport function HGroup(...rest: TagChild[]): HTMLElement { return tag(\"hgroup\", ...rest); }\r\nexport function HTML(...rest: TagChild[]): HTMLHtmlElement { return tag(\"html\", ...rest) as HTMLHtmlElement; }\r\nexport function I(...rest: TagChild[]): HTMLElement { return tag(\"i\", ...rest); }\r\nexport function IFrame(...rest: TagChild[]): HTMLIFrameElement { return tag(\"iframe\", ...rest) as HTMLIFrameElement; }\r\nexport function Img(...rest: TagChild[]): HTMLImageElement { return tag(\"img\", ...rest) as HTMLImageElement; }\r\nexport function Input(...rest: TagChild[]): HTMLInputElement { return tag(\"input\", ...rest) as HTMLInputElement; }\r\nexport function Ins(...rest: TagChild[]): HTMLModElement { return tag(\"ins\", ...rest) as HTMLModElement; }\r\nexport function KBD(...rest: TagChild[]): HTMLElement { return tag(\"kbd\", ...rest); }\r\nexport function Label(...rest: TagChild[]): HTMLLabelElement { return tag(\"label\", ...rest) as HTMLLabelElement; }\r\nexport function Legend(...rest: TagChild[]): HTMLLegendElement { return tag(\"legend\", ...rest) as HTMLLegendElement; }\r\nexport function LI(...rest: TagChild[]): HTMLLIElement { return tag(\"li\", ...rest) as HTMLLIElement; }\r\nexport function Link(...rest: TagChild[]): HTMLLinkElement { return tag(\"link\", ...rest) as HTMLLinkElement; }\r\nexport function Main(...rest: TagChild[]): HTMLElement { return tag(\"main\", ...rest); }\r\nexport function HtmlMap(...rest: TagChild[]): HTMLMapElement { return tag(\"map\", ...rest) as HTMLMapElement; }\r\nexport function Mark(...rest: TagChild[]): HTMLElement { return tag(\"mark\", ...rest); }\r\nexport function Marquee(...rest: TagChild[]): HTMLMarqueeElement { return tag(\"marquee\", ...rest) as HTMLMarqueeElement; }\r\nexport function Menu(...rest: TagChild[]): HTMLMenuElement { return tag(\"menu\", ...rest) as HTMLMenuElement; }\r\nexport function Meta(...rest: TagChild[]): HTMLMetaElement { return tag(\"meta\", ...rest) as HTMLMetaElement; }\r\nexport function Meter(...rest: TagChild[]): HTMLMeterElement { return tag(\"meter\", ...rest) as HTMLMeterElement; }\r\nexport function Nav(...rest: TagChild[]): HTMLElement { return tag(\"nav\", ...rest); }\r\nexport function NoScript(...rest: TagChild[]): HTMLElement { return tag(\"noscript\", ...rest); }\r\nexport function HtmlObject(...rest: TagChild[]): HTMLObjectElement { return tag(\"object\", ...rest) as HTMLObjectElement; }\r\nexport function OL(...rest: TagChild[]): HTMLOListElement { return tag(\"ol\", ...rest) as HTMLOListElement; }\r\nexport function OptGroup(...rest: TagChild[]): HTMLOptGroupElement { return tag(\"optgroup\", ...rest) as HTMLOptGroupElement; }\r\nexport function Option(...rest: TagChild[]): HTMLOptionElement { return tag(\"option\", ...rest) as HTMLOptionElement; }\r\nexport function Output(...rest: TagChild[]): HTMLOutputElement { return tag(\"output\", ...rest) as HTMLOutputElement; }\r\nexport function P(...rest: TagChild[]): HTMLParagraphElement { return tag(\"p\", ...rest) as HTMLParagraphElement; }\r\nexport function Param(...rest: TagChild[]): HTMLParamElement { return tag(\"param\", ...rest) as HTMLParamElement; }\r\nexport function Picture(...rest: TagChild[]): HTMLPictureElement { return tag(\"picture\", ...rest) as HTMLPictureElement; }\r\nexport function Pre(...rest: TagChild[]): HTMLPreElement { return tag(\"pre\", ...rest) as HTMLPreElement; }\r\nexport function Progress(...rest: TagChild[]): HTMLProgressElement { return tag(\"progress\", ...rest) as HTMLProgressElement; }\r\nexport function Q(...rest: TagChild[]): HTMLQuoteElement { return tag(\"q\", ...rest) as HTMLQuoteElement; }\r\nexport function RB(...rest: TagChild[]): HTMLElement { return tag(\"rb\", ...rest); }\r\nexport function RP(...rest: TagChild[]): HTMLElement { return tag(\"rp\", ...rest); }\r\nexport function RT(...rest: TagChild[]): HTMLElement { return tag(\"rt\", ...rest); }\r\nexport function RTC(...rest: TagChild[]): HTMLElement { return tag(\"rtc\", ...rest); }\r\nexport function Ruby(...rest: TagChild[]): HTMLElement { return tag(\"ruby\", ...rest); }\r\nexport function S(...rest: TagChild[]): HTMLElement { return tag(\"s\", ...rest); }\r\nexport function Samp(...rest: TagChild[]): HTMLElement { return tag(\"samp\", ...rest); }\r\nexport function Script(...rest: TagChild[]): HTMLScriptElement { return tag(\"script\", ...rest) as HTMLScriptElement; }\r\nexport function Section(...rest: TagChild[]): HTMLElement { return tag(\"section\", ...rest); }\r\nexport function Select(...rest: TagChild[]): HTMLSelectElement { return tag(\"select\", ...rest) as HTMLSelectElement; }\r\nexport function Slot(...rest: TagChild[]): HTMLSlotElement { return tag(\"slot\", ...rest) as HTMLSlotElement; }\r\nexport function Small(...rest: TagChild[]): HTMLElement { return tag(\"small\", ...rest); }\r\nexport function Source(...rest: TagChild[]): HTMLSourceElement { return tag(\"source\", ...rest) as HTMLSourceElement; }\r\nexport function Span(...rest: TagChild[]): HTMLSpanElement { return tag(\"span\", ...rest) as HTMLSpanElement; }\r\nexport function Strong(...rest: TagChild[]): HTMLElement { return tag(\"strong\", ...rest); }\r\nexport function Style(...rest: TagChild[]): HTMLStyleElement { return tag(\"style\", ...rest) as HTMLStyleElement; }\r\nexport function Sub(...rest: TagChild[]): HTMLElement { return tag(\"sub\", ...rest); }\r\nexport function Summary(...rest: TagChild[]): HTMLElement { return tag(\"summary\", ...rest); }\r\nexport function Sup(...rest: TagChild[]): HTMLElement { return tag(\"sup\", ...rest); }\r\nexport function Table(...rest: TagChild[]): HTMLTableElement { return tag(\"table\", ...rest) as HTMLTableElement; }\r\nexport function TBody(...rest: TagChild[]): HTMLTableSectionElement { return tag(\"tbody\", ...rest) as HTMLTableSectionElement; }\r\nexport function TD(...rest: TagChild[]): HTMLTableDataCellElement { return tag(\"td\", ...rest) as HTMLTableDataCellElement; }\r\nexport function Template(...rest: TagChild[]): HTMLTemplateElement { return tag(\"template\", ...rest) as HTMLTemplateElement; }\r\nexport function TextArea(...rest: TagChild[]): HTMLTextAreaElement { return tag(\"textarea\", ...rest) as HTMLTextAreaElement; }\r\nexport function TFoot(...rest: TagChild[]): HTMLTableSectionElement { return tag(\"tfoot\", ...rest) as HTMLTableSectionElement; }\r\nexport function TH(...rest: TagChild[]): HTMLTableHeaderCellElement { return tag(\"th\", ...rest) as HTMLTableHeaderCellElement; }\r\nexport function THead(...rest: TagChild[]): HTMLTableSectionElement { return tag(\"thead\", ...rest) as HTMLTableSectionElement; }\r\nexport function Time(...rest: TagChild[]): HTMLTimeElement { return tag(\"time\", ...rest) as HTMLTimeElement; }\r\nexport function Title(...rest: TagChild[]): HTMLTitleElement { return tag(\"title\", ...rest) as HTMLTitleElement; }\r\nexport function TR(...rest: TagChild[]): HTMLTableRowElement { return tag(\"tr\", ...rest) as HTMLTableRowElement; }\r\nexport function Track(...rest: TagChild[]): HTMLTrackElement { return tag(\"track\", ...rest) as HTMLTrackElement; }\r\nexport function U(...rest: TagChild[]): HTMLElement { return tag(\"u\", ...rest); }\r\nexport function UL(...rest: TagChild[]): HTMLUListElement { return tag(\"ul\", ...rest) as HTMLUListElement; }\r\nexport function Var(...rest: TagChild[]): HTMLElement { return tag(\"var\", ...rest); }\r\nexport function Video(...rest: TagChild[]): HTMLVideoElement { return tag(\"video\", ...rest) as HTMLVideoElement; }\r\nexport function WBR(): HTMLElement { return tag(\"wbr\"); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a button.\r\n */\r\nexport function InputButton(...rest: TagChild[]): HTMLInputElement { return Input(type(\"button\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a checkbox.\r\n */\r\nexport function InputCheckbox(...rest: TagChild[]): HTMLInputElement { return Input(type(\"checkbox\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a color picker.\r\n */\r\nexport function InputColor(...rest: TagChild[]): HTMLInputElement { return Input(type(\"color\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a date picker.\r\n */\r\nexport function InputDate(...rest: TagChild[]): HTMLInputElement { return Input(type(\"date\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a local date-time picker.\r\n */\r\nexport function InputDateTime(...rest: TagChild[]): HTMLInputElement { return Input(type(\"datetime-local\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is an email entry field.\r\n */\r\nexport function InputEmail(...rest: TagChild[]): HTMLInputElement { return Input(type(\"email\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a file picker.\r\n */\r\nexport function InputFile(...rest: TagChild[]): HTMLInputElement { return Input(type(\"file\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a hidden field.\r\n */\r\nexport function InputHidden(...rest: TagChild[]): HTMLInputElement { return Input(type(\"hidden\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a graphical submit button.\r\n */\r\nexport function InputImage(...rest: TagChild[]): HTMLInputElement { return Input(type(\"image\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a month picker.\r\n */\r\nexport function InputMonth(...rest: TagChild[]): HTMLInputElement { return Input(type(\"month\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a password entry field.\r\n */\r\nexport function InputPassword(...rest: TagChild[]): HTMLInputElement { return Input(type(\"password\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a radio button.\r\n */\r\nexport function InputRadio(...rest: TagChild[]): HTMLInputElement { return Input(type(\"radio\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a range selector.\r\n */\r\nexport function InputRange(...rest: TagChild[]): HTMLInputElement { return Input(type(\"range\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a form reset button.\r\n */\r\nexport function InputReset(...rest: TagChild[]): HTMLInputElement { return Input(type(\"reset\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a search entry field.\r\n */\r\nexport function InputSearch(...rest: TagChild[]): HTMLInputElement { return Input(type(\"search\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a submit button.\r\n */\r\nexport function InputSubmit(...rest: TagChild[]): HTMLInputElement { return Input(type(\"submit\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a telephone number entry field.\r\n */\r\nexport function InputTelephone(...rest: TagChild[]): HTMLInputElement { return Input(type(\"tel\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a text entry field.\r\n */\r\nexport function InputText(...rest: TagChild[]): HTMLInputElement { return Input(type(\"text\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a time picker.\r\n */\r\nexport function InputTime(...rest: TagChild[]): HTMLInputElement { return Input(type(\"time\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a URL entry field.\r\n */\r\nexport function InputURL(...rest: TagChild[]): HTMLInputElement { return Input(type(\"url\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a week picker.\r\n */\r\nexport function InputWeek(...rest: TagChild[]): HTMLInputElement { return Input(type(\"week\"), ...rest); }\r\n\r\n/**\r\n * Creates a text node out of the give input.\r\n */\r\nexport function TextNode(txt: any): Text {\r\n    return document.createTextNode(txt);\r\n}\r\n\r\n/**\r\n * Creates a Div element with margin: auto.\r\n */\r\nexport function Run(...rest: TagChild[]): HTMLDivElement {\r\n    return Div(\r\n        styles(\r\n            margin(\"auto\")),\r\n        ...rest);\r\n}","import { src } from \"./attrs\";\r\nimport { Script } from \"./tags\";\r\n\r\n\r\nexport function createScript(file: string): void {\r\n    const script = Script(src(file));\r\n    document.body.appendChild(script);\r\n}\r\n","import { isNumber } from \"../typeChecks\";\r\nimport type { progressCallback } from \"./progressCallback\";\r\n\r\nexport function splitProgress(onProgress: progressCallback|undefined, weights: number | number[]) {\r\n\r\n    let subProgressWeights: number[];\r\n    if (isNumber(weights)) {\r\n        subProgressWeights = new Array<number>(weights);\r\n        for (let i = 0; i < subProgressWeights.length; ++i) {\r\n            subProgressWeights[i] = 1 / weights;\r\n        }\r\n    }\r\n    else {\r\n        subProgressWeights = weights;\r\n    }\r\n\r\n    let weightTotal = 0;\r\n    for (let i = 0; i < subProgressWeights.length; ++i) {\r\n        weightTotal += subProgressWeights[i];\r\n    }\r\n\r\n    const subProgressValues = new Array<number>(subProgressWeights.length);\r\n\r\n    const subProgressCallbacks = new Array<progressCallback>(subProgressWeights.length);\r\n    const start = performance.now();\r\n    const update = (i: number, subSoFar: number, subTotal: number, msg?: string) => {\r\n        if (onProgress) {\r\n            subProgressValues[i] = subSoFar / subTotal;\r\n            let soFar = 0;\r\n            for (let j = 0; j < subProgressWeights.length; ++j) {\r\n                soFar += subProgressValues[j] * subProgressWeights[j];\r\n            }\r\n\r\n            const end = performance.now();\r\n            const delta = end - start;\r\n            const est = start - end + delta * weightTotal / soFar;\r\n            onProgress(soFar, weightTotal, msg, est);\r\n        }\r\n    };\r\n\r\n    for (let i = 0; i < subProgressWeights.length; ++i) {\r\n        subProgressValues[i] = 0;\r\n        subProgressCallbacks[i] = (soFar: number, total: number, msg?: string) => update(i, soFar, total, msg);\r\n    }\r\n\r\n    return subProgressCallbacks;\r\n}\r\n\r\n","import { waitFor } from \"../events/waitFor\";\r\nimport { createScript } from \"../html/script\";\r\nimport type { progressCallback } from \"../tasks/progressCallback\";\r\nimport { splitProgress } from \"../tasks/splitProgress\";\r\nimport { isGoodNumber, isNullOrUndefined } from \"../typeChecks\";\r\nimport { BufferAndContentType } from \"./BufferAndContentType\";\r\nimport { IFetcher } from \"./IFetcher\";\r\n\r\nexport class Fetcher implements IFetcher {\r\n\r\n    protected normalizeOnProgress(headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): progressCallback | undefined {\r\n        if (isNullOrUndefined(onProgress)\r\n            && headerMap instanceof Function) {\r\n            onProgress = headerMap;\r\n        }\r\n\r\n        return onProgress;\r\n    }\r\n\r\n    protected normalizeHeaderMap(headerMap?: Map<string, string> | progressCallback): Map<string, string> | undefined {\r\n        if (headerMap instanceof Map) {\r\n            return headerMap;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private async getResponse(path: string, headerMap?: Map<string, string>): Promise<Response> {\r\n        const headers = {};\r\n\r\n        if (headerMap) {\r\n            for (const pair of headerMap.entries()) {\r\n                (headers as any)[pair[0]] = pair[1];\r\n            }\r\n        }\r\n\r\n        return await this.readRequestResponse(path, fetch(path, {\r\n            headers\r\n        }));\r\n    }\r\n\r\n    private async postObjectForResponse<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<Response> {\r\n        const headers: any = {};\r\n        if (!(obj instanceof FormData)) {\r\n            headers[\"Content-Type\"] = \"application/json\";\r\n        }\r\n\r\n        if (headerMap) {\r\n            for (const pair of headerMap.entries()) {\r\n                (headers as any)[pair[0]] = pair[1];\r\n            }\r\n        }\r\n\r\n        const body = obj instanceof FormData\r\n            ? obj\r\n            : JSON.stringify(obj);\r\n\r\n        return await this.readRequestResponse(path, fetch(path, {\r\n            method: \"POST\",\r\n            headers,\r\n            body\r\n        }));\r\n    }\r\n\r\n    private async readRequestResponse(path: string, request: Promise<Response>): Promise<Response> {\r\n        const response = await request;\r\n\r\n        if (!response.ok) {\r\n            let message = response.statusText;\r\n            if (response.body) {\r\n                message += \" \";\r\n                message += await response.text();\r\n                message = message.trim();\r\n            }\r\n\r\n            throw new Error(`[${response.status}] - ${message} . Path ${path}`);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private async readResponseBuffer(path: string, response: Response, onProgress?: progressCallback): Promise<BufferAndContentType> {\r\n        const contentType = response.headers.get(\"Content-Type\");\r\n        if (!contentType) {\r\n            throw new Error(\"Server did not provide a content type\");\r\n        }\r\n\r\n        let contentLength = 1;\r\n        const contentLengthStr = response.headers.get(\"Content-Length\");\r\n        if (!contentLengthStr) {\r\n            console.warn(`Server did not provide a content length header. Path: ${path}`);\r\n        }\r\n        else {\r\n            contentLength = parseInt(contentLengthStr, 10);\r\n            if (!isGoodNumber(contentLength)) {\r\n                console.warn(`Server did not provide a valid content length header. Value: ${contentLengthStr}, Path: ${path}`);\r\n                contentLength = 1;\r\n            }\r\n        }\r\n\r\n        const hasContentLength = isGoodNumber(contentLength);\r\n        if (!hasContentLength) {\r\n            contentLength = 1;\r\n        }\r\n\r\n        if (!response.body) {\r\n            throw new Error(\"No response body!\");\r\n        }\r\n\r\n        const reader = response.body.getReader();\r\n        const values = [];\r\n        let receivedLength = 0;\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n                break;\r\n            }\r\n\r\n            if (value) {\r\n                values.push(value);\r\n                receivedLength += value.length;\r\n                if (onProgress) {\r\n                    onProgress(receivedLength, Math.max(receivedLength, contentLength), path);\r\n                }\r\n            }\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(receivedLength);\r\n        const array = new Uint8Array(buffer);\r\n        receivedLength = 0;\r\n        for (const value of values) {\r\n            array.set(value, receivedLength);\r\n            receivedLength += value.length;\r\n        }\r\n\r\n        if (onProgress) {\r\n            onProgress(1, 1, path);\r\n        }\r\n\r\n        return { buffer, contentType };\r\n    }\r\n\r\n    protected async _getBuffer(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<BufferAndContentType> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const response = await this.getResponse(path, headerMap);\r\n        return await this.readResponseBuffer(path, response, onProgress);\r\n    }\r\n\r\n    async getBuffer(path: string): Promise<BufferAndContentType>;\r\n    async getBuffer(path: string, onProgress?: progressCallback): Promise<BufferAndContentType>;\r\n    async getBuffer(path: string, headerMap?: Map<string, string>): Promise<BufferAndContentType>;\r\n    async getBuffer(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<BufferAndContentType>;\r\n    async getBuffer(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<BufferAndContentType> {\r\n        return await this._getBuffer(path, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _postObjectForBuffer<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<BufferAndContentType> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const response = await this.postObjectForResponse(path, obj, headerMap);\r\n        return await this.readResponseBuffer(path, response, onProgress);\r\n    }\r\n\r\n    async postObjectForBuffer<T>(path: string, obj: T): Promise<BufferAndContentType>;\r\n    async postObjectForBuffer<T>(path: string, obj: T, onProgress?: progressCallback): Promise<BufferAndContentType>;\r\n    async postObjectForBuffer<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<BufferAndContentType>;\r\n    async postObjectForBuffer<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<BufferAndContentType>;\r\n    async postObjectForBuffer<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<BufferAndContentType> {\r\n        return await this._postObjectForBuffer(path, obj, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _getBlob(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<Blob> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const { buffer, contentType } = await this._getBuffer(path, headerMap, onProgress);\r\n        return new Blob([buffer], { type: contentType });\r\n    }\r\n\r\n    async getBlob(path: string): Promise<Blob>;\r\n    async getBlob(path: string, onProgress?: progressCallback): Promise<Blob>;\r\n    async getBlob(path: string, headerMap?: Map<string, string>): Promise<Blob>;\r\n    async getBlob(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<Blob>;\r\n    async getBlob(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<Blob> {\r\n        return this._getBlob(path, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _postObjectForBlob<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback) {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const { buffer, contentType } = await this._postObjectForBuffer(path, obj, headerMap, onProgress);\r\n        return new Blob([buffer], { type: contentType });\r\n    }\r\n\r\n    async postObjectForBlob<T>(path: string, obj: T): Promise<Blob>;\r\n    async postObjectForBlob<T>(path: string, obj: T, onProgress?: progressCallback): Promise<Blob>;\r\n    async postObjectForBlob<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<Blob>;\r\n    async postObjectForBlob<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<Blob>;\r\n    async postObjectForBlob<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback) {\r\n        return this._postObjectForBlob(path, obj, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _getFile(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const blob = await this._getBlob(path, headerMap, onProgress);\r\n        return URL.createObjectURL(blob);\r\n    }\r\n\r\n    async getFile(path: string): Promise<string>;\r\n    async getFile(path: string, onProgress?: progressCallback): Promise<string>;\r\n    async getFile(path: string, headerMap?: Map<string, string>): Promise<string>;\r\n    async getFile(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<string>;\r\n    async getFile(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        return await this._getFile(path, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _postObjectForFile<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const blob = await this._postObjectForBlob(path, obj, headerMap, onProgress);\r\n        return URL.createObjectURL(blob);\r\n    }\r\n\r\n    async postObjectForFile<T>(path: string, obj: T): Promise<string>;\r\n    async postObjectForFile<T>(path: string, obj: T, onProgress?: progressCallback): Promise<string>;\r\n    async postObjectForFile<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<string>;\r\n    async postObjectForFile<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<string>;\r\n    async postObjectForFile<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        return await this._postObjectForFile(path, obj, headerMap, onProgress);\r\n    }\r\n\r\n    private readBufferText(buffer: ArrayBuffer): string {\r\n        const decoder = new TextDecoder(\"utf-8\");\r\n        const text = decoder.decode(buffer);\r\n        return text;\r\n    }\r\n\r\n    protected async _getText(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const { buffer } = await this._getBuffer(path, headerMap, onProgress);\r\n        return this.readBufferText(buffer);\r\n    }\r\n\r\n    async getText(path: string): Promise<string>;\r\n    async getText(path: string, onProgress?: progressCallback): Promise<string>;\r\n    async getText(path: string, headerMap?: Map<string, string>): Promise<string>;\r\n    async getText(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<string>;\r\n    async getText(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        return await this._getText(path, headerMap, onProgress);\r\n    }\r\n\r\n    private async _postObjectForText<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const { buffer } = await this._postObjectForBuffer(path, obj, headerMap, onProgress);\r\n        return this.readBufferText(buffer);\r\n    }\r\n\r\n    async postObjectForText<T>(path: string, obj: T): Promise<string>;\r\n    async postObjectForText<T>(path: string, obj: T, onProgress?: progressCallback): Promise<string>;\r\n    async postObjectForText<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<string>;\r\n    async postObjectForText<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<string>;\r\n    async postObjectForText<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<string> {\r\n        return await this._postObjectForText(path, obj, headerMap, onProgress);\r\n    }\r\n\r\n    private setDefaultAcceptType(headerMap: Map<string, string> | undefined, type: string): Map<string, string> {\r\n        if (!headerMap) {\r\n            headerMap = new Map<string, string>();\r\n        }\r\n\r\n        if (!headerMap.has(\"Accept\")) {\r\n            headerMap.set(\"Accept\", type);\r\n        }\r\n\r\n        return headerMap;\r\n    }\r\n    protected async _getObject<T>(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<T> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n        headerMap = this.setDefaultAcceptType(headerMap, \"application/json\");\r\n        const text = await this._getText(path, headerMap, onProgress);\r\n        return JSON.parse(text) as T;\r\n    }\r\n\r\n    async getObject<T>(path: string): Promise<T>;\r\n    async getObject<T>(path: string, onProgress?: progressCallback): Promise<T>;\r\n    async getObject<T>(path: string, headerMap?: Map<string, string>): Promise<T>;\r\n    async getObject<T>(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<T>;\r\n    async getObject<T>(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<T> {\r\n        return await this._getObject<T>(path, headerMap, onProgress);\r\n    }\r\n\r\n    protected async _postObjectForObject<T, U>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<U> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n        headerMap = this.setDefaultAcceptType(headerMap, \"application/json\");\r\n        const text = await this._postObjectForText(path, obj, headerMap, onProgress);\r\n        return JSON.parse(text) as U;\r\n    }\r\n\r\n    async postObjectForObject<T, U>(path: string, obj: T): Promise<U>;\r\n    async postObjectForObject<T, U>(path: string, obj: T, onProgress?: progressCallback): Promise<U>;\r\n    async postObjectForObject<T, U>(path: string, obj: T, headerMap?: Map<string, string>): Promise<U>;\r\n    async postObjectForObject<T, U>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<U>;\r\n    async postObjectForObject<T, U>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<U> {\r\n        return await this._postObjectForObject<T, U>(path, obj, headerMap, onProgress);\r\n    }\r\n\r\n    async postObject<T>(path: string, obj: T): Promise<void>;\r\n    async postObject<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<void>;\r\n    async postObject<T>(path: string, obj: T, onProgress?: progressCallback): Promise<void>;\r\n    async postObject<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<void>;\r\n    async postObject<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<void> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n        if (onProgress instanceof Function) {\r\n            const [upProg, downProg] = splitProgress(onProgress, 2);\r\n            let headers: Map<string, string> | undefined = headerMap;\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            function makeTask(name: string, target: (XMLHttpRequest | XMLHttpRequestUpload), onProgress: progressCallback, skipLoading: boolean, prevTask: Promise<void>): Promise<void> {\r\n                return new Promise((resolve: () => void, reject: (status: number) => void) => {\r\n                    let done = false;\r\n                    let loaded = skipLoading;\r\n                    function maybeResolve() {\r\n                        if (loaded && done) {\r\n                            resolve();\r\n                        }\r\n                    }\r\n\r\n                    async function onError() {\r\n                        await prevTask;\r\n                        reject(xhr.status);\r\n                    }\r\n\r\n                    target.addEventListener(\"loadstart\", async () => {\r\n                        await prevTask;\r\n                        onProgress(0, 1, name);\r\n                    });\r\n\r\n                    target.addEventListener(\"progress\", async (ev: Event) => {\r\n                        const evt = ev as ProgressEvent<XMLHttpRequestEventTarget>;\r\n                        await prevTask;\r\n                        onProgress(evt.loaded, evt.total, name);\r\n                        if (evt.loaded === evt.total) {\r\n                            loaded = true;\r\n                            maybeResolve();\r\n                        }\r\n                    });\r\n\r\n                    target.addEventListener(\"load\", async () => {\r\n                        await prevTask;\r\n                        onProgress(1, 1, name);\r\n                        done = true;\r\n                        maybeResolve();\r\n                    });\r\n\r\n                    target.addEventListener(\"error\", onError);\r\n                    target.addEventListener(\"abort\", onError);\r\n                });\r\n            }\r\n\r\n            const upload = makeTask(\"uploading\", xhr.upload, upProg, false, Promise.resolve());\r\n            const download = makeTask(\"saving\", xhr, downProg, true, upload);\r\n\r\n            xhr.open(\"POST\", path);\r\n\r\n            if (headers) {\r\n                for (const [key, value] of headers) {\r\n                    xhr.setRequestHeader(key, value);\r\n                }\r\n            }\r\n\r\n            if (obj instanceof FormData) {\r\n                xhr.send(obj);\r\n            }\r\n            else {\r\n                const json = JSON.stringify(obj);\r\n                xhr.send(json);\r\n            }\r\n\r\n            await upload;\r\n            await download;\r\n        }\r\n        else {\r\n            await this.postObjectForResponse(path, obj, headerMap);\r\n        }\r\n    }\r\n\r\n    private readTextXml(text: string): HTMLElement {\r\n        const parser = new DOMParser();\r\n        const xml = parser.parseFromString(text, \"text/xml\");\r\n        return xml.documentElement;\r\n    }\r\n\r\n    protected async _getXml(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<HTMLElement> {\r\n        onProgress = this.normalizeOnProgress(headerMap, onProgress);\r\n        headerMap = this.normalizeHeaderMap(headerMap);\r\n\r\n        const text = await this._getText(path, headerMap, onProgress);\r\n        return this.readTextXml(text);\r\n    }\r\n\r\n    async getXml(path: string): Promise<HTMLElement>;\r\n    async getXml(path: string, onProgress?: progressCallback): Promise<HTMLElement>;\r\n    async getXml(path: string, headerMap?: Map<string, string>): Promise<HTMLElement>;\r\n    async getXml(path: string, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<HTMLElement>;\r\n    async getXml(path: string, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<HTMLElement> {\r\n        return await this._getXml(path, headerMap, onProgress);\r\n    }\r\n\r\n    async postObjectForXml<T>(path: string, obj: T): Promise<HTMLElement>;\r\n    async postObjectForXml<T>(path: string, obj: T, onProgress?: progressCallback): Promise<HTMLElement>;\r\n    async postObjectForXml<T>(path: string, obj: T, headerMap?: Map<string, string>): Promise<HTMLElement>;\r\n    async postObjectForXml<T>(path: string, obj: T, headerMap?: Map<string, string>, onProgress?: progressCallback): Promise<HTMLElement>;\r\n    async postObjectForXml<T>(path: string, obj: T, headerMap?: Map<string, string> | progressCallback, onProgress?: progressCallback): Promise<HTMLElement> {\r\n        const text = await this._postObjectForText(path, obj, headerMap, onProgress);\r\n        return this.readTextXml(text);\r\n    }\r\n\r\n    async loadScript(path: string, test: () => boolean, onProgress?: progressCallback): Promise<void> {\r\n        if (!test()) {\r\n            const scriptLoadTask = waitFor(test);\r\n            const file = await this.getFile(path, onProgress);\r\n            createScript(file);\r\n            await scriptLoadTask;\r\n        }\r\n        else if (onProgress) {\r\n            onProgress(1, 1, \"skip\");\r\n        }\r\n    }\r\n\r\n    async getWASM<T>(path: string, imports: Record<string, Record<string, WebAssembly.ImportValue>>, onProgress?: progressCallback): Promise<T> {\r\n        const wasmBuffer = await this.getBuffer(path, onProgress);\r\n        if (wasmBuffer.contentType !== \"application/wasm\") {\r\n            throw new Error(\"Server did not respond with WASM file. Was: \" + wasmBuffer.contentType);\r\n        }\r\n        const wasmModule = await WebAssembly.instantiate(wasmBuffer.buffer, imports);\r\n        return (wasmModule.instance.exports as any) as T;\r\n    }\r\n}","import { progressCallback } from \"../tasks/progressCallback\";\r\nimport { WorkerServer } from \"../workers/WorkerServer\";\r\nimport { Fetcher } from \"./Fetcher\";\r\nimport { BufferAndContentType } from \"./BufferAndContentType\";\r\n\r\nexport class FetcherWorkerServer extends WorkerServer {\r\n\r\n    constructor(self: DedicatedWorkerGlobalScope) {\r\n        super(self);\r\n\r\n        const fetcher = new Fetcher();\r\n\r\n        this.add(\r\n            \"getBuffer\",\r\n            (path: string, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.getBuffer(path, headerMap, onProgress),\r\n            (parts: BufferAndContentType) => [parts.buffer]);\r\n\r\n        this.add(\r\n            \"postObjectForBuffer\",\r\n            (path: string, obj: any, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.postObjectForBuffer(path, obj, headerMap, onProgress),\r\n            (parts: BufferAndContentType) => [parts.buffer]);\r\n\r\n        this.add(\r\n            \"getObject\",\r\n            (path: string, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.getObject(path, headerMap, onProgress));\r\n\r\n        this.add(\r\n            \"postObjectForObject\",\r\n            (path: string, obj: any, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.postObjectForObject(path, obj, headerMap, onProgress));\r\n\r\n        this.add(\r\n            \"getFile\",\r\n            (path: string, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.getFile(path, headerMap, onProgress));\r\n\r\n        this.add(\r\n            \"postObjectForFile\",\r\n            (path: string, obj: any, headerMap: Map<string, string>, onProgress: progressCallback) =>\r\n                fetcher.postObjectForFile(path, obj, headerMap, onProgress));\r\n    }\r\n}","import { FetcherWorkerServer } from \"kudzu/io/FetcherWorkerServer\";\r\n(globalThis as any).server = new FetcherWorkerServer((globalThis as any) as DedicatedWorkerGlobalScope);"],"names":[],"mappings":"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"}