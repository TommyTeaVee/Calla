import { TypedEvent, TypedEventBase } from "kudzu/events/EventBase";
import type { CanvasTypes } from "kudzu/html/canvas";
import { Grammar } from "./grammars";
interface PointXY {
    x: number;
    y: number;
}
interface PointerUVEvent {
    uv: PointXY;
}
interface PointerEventCollection {
    readOverEventUV: () => void;
    readOutEventUV: () => void;
    readDownEventUV: (evt: PointerUVEvent) => void;
    readUpEventUV: (evt: PointerUVEvent) => void;
    readMoveEventUV: (evt: PointerUVEvent) => void;
}
export interface PrimroseOptions {
    readOnly: boolean;
    multiLine: boolean;
    wordWrap: boolean;
    scrollBars: boolean;
    lineNumbers: boolean;
    padding: number;
    fontSize: number;
    fontFamily: string;
    language: string | Grammar;
    scaleFactor: number;
    element: HTMLElement;
    width: number;
    height: number;
}
export interface PrimroseEvents {
    out: TypedEvent<"out">;
    over: TypedEvent<"over">;
    blur: TypedEvent<"blur">;
    focus: TypedEvent<"focus">;
    change: TypedEvent<"change">;
    update: TypedEvent<"update">;
}
export declare class Primrose extends TypedEventBase<PrimroseEvents> {
    private longPress;
    private tx;
    private ty;
    private _value;
    private _padding;
    private _theme;
    private _tabWidth;
    private _canvas;
    private _hovered;
    private _focused;
    private _fontSize;
    private _fontFamily;
    private _scaleFactor;
    private _readOnly;
    private _wordWrap;
    private _multiLine;
    private resized;
    private _element;
    private _language;
    private _showScrollBars;
    private _showLineNumbers;
    private pressed;
    private dragging;
    private scrolling;
    private tabPressed;
    private tabString;
    private historyIndex;
    private history;
    private tokens;
    private os;
    private lineCount;
    private lineCountWidth;
    private controlType;
    private lastCharacterHeight;
    private lastCharacterWidth;
    private lastFrontCursor;
    private lastGridBoundsX;
    private lastGridBoundsY;
    private lastGridBoundsWidth;
    private lastGridBoundsHeight;
    private lastBackCursor;
    private lastThemeName;
    private lastPadding;
    private lastFocused;
    private lastScrollX;
    private lastScrollY;
    private lastFont;
    private lastText;
    private renderer;
    private outEvt;
    private overEvt;
    private blurEvt;
    private focusEvt;
    private changeEvt;
    private updateEvt;
    private keyDownCommands;
    private keyPressCommands;
    mouse: PointerEventCollection;
    touch: PointerEventCollection;
    constructor(options: Partial<PrimroseOptions>);
    private startSelecting;
    private pointerDown;
    private pointerMove;
    private mouseLikePointerDown;
    private mouseLikePointerUp;
    private mouseLikePointerMove;
    private touchLikePointerDown;
    private touchLikePointerUp;
    private touchLikePointerMove;
    private moveCursor;
    private dragScroll;
    private refreshControlType;
    private refreshGutter;
    private render;
    private doRender;
    private setValue;
    private setSelectedText;
    private refreshAllTokens;
    private refreshTokens;
    private minDelta;
    private clampScroll;
    private scrollIntoView;
    private pushUndo;
    private moveInHistory;
    scrollTo(x: number, y: number): boolean;
    scrollBy(dx: number, dy: number): boolean;
    readKeyDownEvent(evt: KeyboardEvent): void;
    readKeyPressEvent(evt: KeyboardEvent): void;
    private copySelectedText;
    readCopyEvent(evt: ClipboardEvent): void;
    readCutEvent(evt: ClipboardEvent): void;
    readPasteEvent(evt: ClipboardEvent): void;
    readWheelEvent(evt: WheelEvent): void;
    get element(): HTMLElement;
    get isInDocument(): boolean;
    get canvas(): CanvasTypes;
    get hovered(): boolean;
    get focused(): boolean;
    set focused(f: boolean);
    blur(): void;
    focus(): void;
    get readOnly(): boolean;
    set readOnly(r: boolean);
    get multiLine(): boolean;
    set multiLine(m: boolean);
    get wordWrap(): boolean;
    set wordWrap(w: boolean);
    get value(): string;
    set value(txt: string);
    get selectedText(): string;
    set selectedText(txt: string);
    get selectionStart(): number;
    set selectionStart(i: number);
    get selectionEnd(): number;
    set selectionEnd(i: number);
    get selectionDirection(): "forward" | "backward";
    get tabWidth(): number;
    set tabWidth(tw: number);
    get theme(): import("./themes").Theme;
    set theme(t: import("./themes").Theme);
    get language(): Grammar;
    set language(l: Grammar);
    get padding(): number;
    set padding(p: number);
    get showLineNumbers(): boolean;
    set showLineNumbers(s: boolean);
    get showScrollBars(): boolean;
    set showScrollBars(s: boolean);
    get fontSize(): number;
    set fontSize(s: number);
    get fontFamily(): string;
    set fontFamily(v: string);
    private setFont;
    get scaleFactor(): number;
    set scaleFactor(s: number);
    get width(): number;
    set width(w: number);
    get height(): number;
    set height(h: number);
    resize(): void;
    setSize(w: number, h: number, scaleFactor: number): void;
    static has(key: any): boolean;
    static get(key: any): Primrose;
    static add(key: any, control: Primrose): void;
    static get hoveredControl(): Primrose;
    static get focusedControl(): Primrose;
    static get editors(): Primrose[];
    static get ready(): Promise<void>;
}
export {};
